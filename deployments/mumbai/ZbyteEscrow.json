{
  "address": "0x72EEF2831e58d5A0f4aF93a5379d9CD977Faf044",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zbyte_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotSendEther",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InsufficientERC20ForDepositGas",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InvalidCallbackAck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InvalidCallbackMessage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "InvalidRelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ERC20DepositConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ERC20DepositFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ERC20DepositFailedAndRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ERC20Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ERC20WithdrawConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ERC20WithdrawFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ERC20Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RelayWrapperAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TreasuryAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "WorkerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ZbytePriceFeederAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vERC20AddressSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "ack_",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "success_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "retval_",
          "type": "uint256"
        }
      ],
      "name": "callbackHandler",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pendingAction",
      "outputs": [
        {
          "internalType": "enum EscrowERC20.Action",
          "name": "action",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "nAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "register_",
          "type": "bool"
        }
      ],
      "name": "registerWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayWrapper",
      "outputs": [
        {
          "internalType": "contract IRelayWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapper_",
          "type": "address"
        }
      ],
      "name": "setRelayWrapperAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zbytePriceFeederAddress_",
          "type": "address"
        }
      ],
      "name": "setZbytePriceFeederAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verc20_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        }
      ],
      "name": "setvERC20Address",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyAllChains",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ulAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vERC20Addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vERC20Depositor_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6437ac384449f0c28abc7b3cabbcda543dd354135f2aa64b66d2ef1443df1a9f",
  "receipt": {
    "to": null,
    "from": "0x8DAEBA8cdfe06B0ddFb3c43473F11144B15A4075",
    "contractAddress": "0x72EEF2831e58d5A0f4aF93a5379d9CD977Faf044",
    "transactionIndex": 2,
    "gasUsed": "1782691",
    "logsBloom": "0x
    "blockHash": "0x6c3fcd4e9bd5c9da0d177f7000218e2e5b5e122b78782bddccd0bab636b1da92",
    "transactionHash": "0x6437ac384449f0c28abc7b3cabbcda543dd354135f2aa64b66d2ef1443df1a9f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 43276251,
        "transactionHash": "0x6437ac384449f0c28abc7b3cabbcda543dd354135f2aa64b66d2ef1443df1a9f",
        "address": "0x72EEF2831e58d5A0f4aF93a5379d9CD977Faf044",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008daeba8cdfe06b0ddfb3c43473f11144b15a4075"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x6c3fcd4e9bd5c9da0d177f7000218e2e5b5e122b78782bddccd0bab636b1da92"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 43276251,
        "transactionHash": "0x6437ac384449f0c28abc7b3cabbcda543dd354135f2aa64b66d2ef1443df1a9f",
        "address": "0x72EEF2831e58d5A0f4aF93a5379d9CD977Faf044",
        "topics": [
          "0x94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a04d4d1145fe9e99cc9225110f68930007a5f20",
        "logIndex": 8,
        "blockHash": "0x6c3fcd4e9bd5c9da0d177f7000218e2e5b5e122b78782bddccd0bab636b1da92"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 43276251,
        "transactionHash": "0x6437ac384449f0c28abc7b3cabbcda543dd354135f2aa64b66d2ef1443df1a9f",
        "address": "0x72EEF2831e58d5A0f4aF93a5379d9CD977Faf044",
        "topics": [
          "0x1db696c9becb6c7e5b140934fe902d723d35791ef36d36c9b1586f6a502fd297"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004354441c4f40dfb3f14ceb68977fa20b62068200",
        "logIndex": 9,
        "blockHash": "0x6c3fcd4e9bd5c9da0d177f7000218e2e5b5e122b78782bddccd0bab636b1da92"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 43276251,
        "transactionHash": "0x6437ac384449f0c28abc7b3cabbcda543dd354135f2aa64b66d2ef1443df1a9f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008daeba8cdfe06b0ddfb3c43473f11144b15a4075",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d89da1e98b7b9000000000000000000000000000000000000000000000000448e5be16cb6e16600000000000000000000000000000000000000000000139a04dd428ec9f19c670000000000000000000000000000000000000000000000004480d2074e1e29ad00000000000000000000000000000000000000000000139a04eacc68e88a5420",
        "logIndex": 10,
        "blockHash": "0x6c3fcd4e9bd5c9da0d177f7000218e2e5b5e122b78782bddccd0bab636b1da92"
      }
    ],
    "blockNumber": 43276251,
    "cumulativeGasUsed": "1910783",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3a04D4D1145FE9E99cC9225110f68930007a5F20",
    "0xf955d5086965d9Cab4df1D67aB497BE202A3D9F3",
    "0x4354441c4F40dFB3F14ceb68977fA20B62068200"
  ],
  "numDeployments": 1,
  "solcInputHash": "62526db6fb7afca11f883e0b4cff6f40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zbyte_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSendEther\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InsufficientERC20ForDepositGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidCallbackAck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidCallbackMessage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvalidRelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC20DepositConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ERC20DepositFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC20DepositFailedAndRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ERC20Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC20WithdrawConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ERC20WithdrawFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ERC20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RelayWrapperAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TreasuryAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"WorkerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ZbytePriceFeederAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vERC20AddressSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ack_\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"retval_\",\"type\":\"uint256\"}],\"name\":\"callbackHandler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingAction\",\"outputs\":[{\"internalType\":\"enum EscrowERC20.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"register_\",\"type\":\"bool\"}],\"name\":\"registerWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayWrapper\",\"outputs\":[{\"internalType\":\"contract IRelayWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper_\",\"type\":\"address\"}],\"name\":\"setRelayWrapperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zbytePriceFeederAddress_\",\"type\":\"address\"}],\"name\":\"setZbytePriceFeederAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verc20_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"}],\"name\":\"setvERC20Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAllChains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ulAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vERC20Addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vERC20Depositor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"callbackHandler(uint256,bytes32,bool,uint256)\":{\"params\":{\"ack_\":\"Unique hash of the submitted deposit/withdraw request\",\"chain_\":\"Target chain identifier\",\"retval_\":\"The amount of tokens that were deposited/withdrawn\",\"success_\":\"true if the deposit/withdraw was successful on remote\"}},\"deposit(uint256,uint256,address,uint256)\":{\"params\":{\"amount_\":\"Amount of ERC20 deposited\",\"chain_\":\"Target chain identifier\",\"receiver_\":\"Recipient address for vERC20\",\"relay_\":\"Relay identifier that should be used for the crosschain call\"}},\"getNonce()\":{\"details\":\"nonce is incremented for every successful deposit or withdraw\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder_\":\"Address to check\"},\"returns\":{\"_0\":\"true if forwarder_ is trusted forwarder\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerWorker(address,bool)\":{\"params\":{\"register_\":\"A boolean indicating whether to register (true) or unregister (false) the worker.\",\"worker_\":\"The address of the worker to be registered or unregistered.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRelayWrapperAddress(address)\":{\"params\":{\"wrapper_\":\"Core relay wrapper contract address\"}},\"setTreasuryAddress(address)\":{\"params\":{\"treasury_\":\"Treasury address\"}},\"setTrustedForwarder(address)\":{\"details\":\"onlyOwner can call\",\"params\":{\"forwarder_\":\"Frwarder conract address\"}},\"setZbytePriceFeederAddress(address)\":{\"details\":\"This function allows updating the address of the ZbytePriceFeeder contract.\",\"params\":{\"zbytePriceFeederAddress_\":\"The address of the ZbytePriceFeeder contract.\"}},\"setvERC20Address(address,uint256)\":{\"details\":\"nonce is incremented for every successful deposit or withdraw\",\"params\":{\"chain_\":\"chain id of the chain where vERC2o contract resides\",\"verc20_\":\"vERC20 contract address\"}},\"totalSupply(uint256)\":{\"params\":{\"chain_\":\"The id of the chain of interest\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256,address,address)\":{\"details\":\"The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited\",\"params\":{\"chain_\":\"Target chain identifier\",\"receiver_\":\"Recipient address for ERC20\",\"relay_\":\"Relay identifier that should be used for the crosschain call\",\"vERC20Depositor_\":\"Address to deposit vERC20\"}}},\"title\":\"The ZBYT ERC20 Escrow contract\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotSendEther()\":[{\"notice\":\"error (0xbf064619): Contract cannot receive ether\"}],\"InsufficientERC20ForDepositGas(uint256,uint256)\":[{\"notice\":\"error (0xed3fc6b3): Insufficient ERC20 for Deposit operation.\"}],\"InvalidCallbackAck(uint256,bytes32,bool,uint256)\":[{\"notice\":\"error (0xcd9d7bb0): The ack in callback received was not found\"}],\"InvalidCallbackMessage(uint256,uint256,uint256,uint256)\":[{\"notice\":\"error (0xd6facdff): The callback received was invalid\"}],\"InvalidRelay(address)\":[{\"notice\":\"Caller is not a valid relay\"}],\"UnAuthorized(address)\":[{\"notice\":\"error (0xb3922495): Unauthorized caller.\"}],\"ZeroAddress()\":[{\"notice\":\"error (0xd92e233d): Address is address(0)\"}],\"ZeroValue()\":[{\"notice\":\"error(): Value sent is 0\"}]},\"events\":{\"ERC20DepositConfirmed(bytes32,bool,uint256)\":{\"notice\":\"event (0xf64578a8): ERC20 tokens deposit confirmed\"},\"ERC20DepositFailed(address,address,uint256,uint256,bytes32)\":{\"notice\":\"event (0x0583eefc): ERC20 tokens deposit failed\"},\"ERC20DepositFailedAndRefunded(bytes32,bool,uint256)\":{\"notice\":\"event (0x82b9d61d): ERC20 tokens deposit failed and refund issued to depositor\"},\"ERC20Deposited(address,address,uint256,uint256,bytes32)\":{\"notice\":\"event (0xcae09af7): ERC20 tokens deposited\"},\"ERC20WithdrawConfirmed(bytes32,bool,uint256)\":{\"notice\":\"event (0xf5a60bd1): ERC20 tokens withdraw confirmed\"},\"ERC20WithdrawFailed(address,address,address,uint256,bytes32)\":{\"notice\":\"event (0x2b4d7cea): ERC20 tokens withdraw failed\"},\"ERC20Withdrawn(address,address,address,uint256,bytes32)\":{\"notice\":\"event (0x8b923c21): ERC20 tokens withdrawn\"},\"ForwarderSet(address,address)\":{\"notice\":\"event (0x94aed472): Forwarder address is changed\"},\"RelayWrapperAddressSet(address)\":{\"notice\":\"event (0x95290bcc): Core relay wrapper contract address is set\"},\"TreasuryAddressSet(address,address)\":{\"notice\":\"event (0x1db696c9): The Treasury address is set\"},\"WorkerRegistered(address,bool)\":{\"notice\":\"event (0x2ddb4d51): Worker is registered(true/false)\"},\"ZbytePriceFeederAddressSet(address)\":{\"notice\":\"event (0x5e7c3cb3): Zbyte Price Feeder address is set\"},\"vERC20AddressSet(address,uint256)\":{\"notice\":\"event (0x1a40ce6d): vERC20 contract address is set\"}},\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"Return the address of underlying ERC20 contract address\"},\"callbackHandler(uint256,bytes32,bool,uint256)\":{\"notice\":\"callback handler to handle acknowledgement for deposit/withdraw\"},\"deposit(uint256,uint256,address,uint256)\":{\"notice\":\"Deposit ERC20 tokens to obtain vERC20 on target chain\"},\"getNonce()\":{\"notice\":\"Get the latest nonce \"},\"isTrustedForwarder(address)\":{\"notice\":\"Check if the given address is the trusted forwarder\"},\"pause()\":{\"notice\":\"Pauses the contract (mint, transfer and burn operations are paused)\"},\"pendingAction(bytes32)\":{\"notice\":\"mapping of current deposit/withdraw operations for which callback has not yet been received\"},\"registerWorker(address,bool)\":{\"notice\":\"Registers or unregisters a worker, allowing or denying access to specific functionality.\"},\"relayWrapper()\":{\"notice\":\"RelayWrapper contract address\"},\"setRelayWrapperAddress(address)\":{\"notice\":\"Set the address of core relay wrapper\"},\"setTreasuryAddress(address)\":{\"notice\":\"Set the treasury address\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set the forwarder contract address\"},\"setZbytePriceFeederAddress(address)\":{\"notice\":\"Sets the address of the ZbytePriceFeeder contract.\"},\"setvERC20Address(address,uint256)\":{\"notice\":\"Set the address of vERC20 on a given chain\"},\"totalSupply(uint256)\":{\"notice\":\"Return the amount of vERC20 currently available on a given chain\"},\"totalSupplyAllChains()\":{\"notice\":\"Return the amount of vERC20 currently available on all chains\"},\"ulAsset()\":{\"notice\":\"The underlying ERC20 token contract\"},\"unpause()\":{\"notice\":\"Unpauses the paused contract\"},\"vERC20Addresses(uint256)\":{\"notice\":\"mapping of the vERC20 contract address for the chain\"},\"withdraw(uint256,uint256,address,address)\":{\"notice\":\"Withdraw ERC20 tokens by depositing vERC20 on target chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/ZbyteEscrow.sol\":\"ZbyteEscrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/core/EscrowERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/ZbyteContext.sol\\\";\\nimport \\\"../interface/relay/IRelayWrapper.sol\\\";\\nimport \\\"../interface/core/IEscrowERC20.sol\\\";\\nimport \\\"../interface/dplat/IZbytePriceFeeder.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title The ERC20 Escrow contract\\n/// @dev DPLAT ERC20 escrow abstract contract\\nabstract contract EscrowERC20 is ZbyteContext, IEscrowERC20, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // @notice Address to treasury. Holds the 'platform fee' tokens\\n    address public treasury;\\n    /// @notice Total vERC20 supply on all chains\\n    uint256 private _totalSupply;\\n    // @notice mapping of vERC20 amount for the chain\\n    mapping(uint256 => uint256) private _reserve;\\n    /// @notice mapping of the vERC20 contract address for the chain\\n    mapping(uint256 => address) public vERC20Addresses;\\n    /// @notice The underlying ERC20 token contract\\n    IERC20 public ulAsset;\\n    /// @notice Zbyte price feeder address.\\n    address zbytePriceFeeder;\\n    /// @notice Authorized workers\\n    mapping(address => bool) authorizedWorkers;\\n    /// @notice RelayWrapper contract address\\n    /// @dev Escrow can only use this trusted RelayWrapper to perform deposit/withdraw\\n    IRelayWrapper public relayWrapper;\\n    /// @notice nonce used for deposit/withdraw operations.  Incremented for every successful deposit or withdraw\\n    uint256 nonce;\\n    /// @notice enumeration of actions performed on this escrow\\n    enum Action {\\n        NONE,\\n        DEPOSIT,\\n        WITHDRAW\\n    }\\n    /// @notice Parameters of the deposit/withdraw operation.\\n    struct PendingAction {\\n        Action action;\\n        address nAddress;\\n        address rAddress;\\n        uint256 chainId;\\n        uint256 amount;\\n    }\\n    /// @notice mapping of current deposit/withdraw operations for which callback has not yet been received\\n    /// @dev action: EscrowERC20.Action that is being performed\\\\\\n    ///   nAddress: Address from which ERC20 tokens are deposited (for Action.DEPOSIT) or tokens are received into (for Action.WITHDRAW)\\\\\\n    ///   rAddress: Address to which vERC20 tokens are deposited (for Action.DEPOSIT) or tokens are received into (for Action.WITHDRAW)\\\\\\n    ///   chainId: chain id of the remote chain\\\\\\n    ///   amount: Amount of tokens that are deposited or withdrawn\\\\\\n    /// @dev This is updated on successful deposit/withdraw and cleared when callback is received\\n    mapping(bytes32 => PendingAction) public pendingAction;\\n\\n    /// @notice ZBYT ERC20 Escrow constructor\\n    /// @param forwarder_ Forwarder contact address\\n    /// @param asset_ Underlying ERC20 asset address\\n    constructor(address forwarder_, IERC20 asset_) {\\n        if (address(asset_) == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if(forwarder_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _setTrustedForwarder(forwarder_);\\n        ulAsset = asset_;\\n    }\\n\\n    /// @notice receive function\\n    receive() external payable {\\n        revert CannotSendEther();\\n    }\\n\\n\\n    /**\\n    * @dev Modifier to ensure that the sender is an authorized worker.\\n    * @notice Reverts the transaction with an `UnAuthorized` error if the sender is not authorized.\\n    */\\n    modifier onlyAuthorized() {\\n        if (!authorizedWorkers[_msgSender()]) {\\n            revert UnAuthorized(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to enforce call only from valid relay contract\\n    modifier onlyRelay {\\n        if(!(relayWrapper.isValidRelay(block.chainid,_msgSender()))) {\\n            revert InvalidRelay(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// @notice Registers or unregisters a worker, allowing or denying access to specific functionality.\\n    /// @param worker_ The address of the worker to be registered or unregistered.\\n    /// @param register_ A boolean indicating whether to register (true) or unregister (false) the worker.\\n    function registerWorker(address worker_, bool register_) public onlyOwner {\\n        authorizedWorkers[worker_] = register_;\\n        emit WorkerRegistered(worker_, register_);\\n    }\\n\\n\\n    /// @notice Get the latest nonce \\n    /// @dev nonce is incremented for every successful deposit or withdraw\\n    function getNonce() public view returns(uint256) {\\n        return nonce;\\n    }\\n\\n    /// @notice Sets the address of the ZbytePriceFeeder contract.\\n    /// @dev This function allows updating the address of the ZbytePriceFeeder contract.\\n    /// @param zbytePriceFeederAddress_ The address of the ZbytePriceFeeder contract.\\n    function setZbytePriceFeederAddress(address zbytePriceFeederAddress_) public {\\n        zbytePriceFeeder = zbytePriceFeederAddress_;\\n        emit ZbytePriceFeederAddressSet(zbytePriceFeederAddress_);\\n    }\\n\\n    /// @notice Set the treasury address\\n    /// @param treasury_ Treasury address\\n    function setTreasuryAddress(address treasury_) public onlyOwner {\\n        if(treasury_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        address oldTreasury = treasury;\\n        treasury = treasury_;\\n\\n        emit TreasuryAddressSet(oldTreasury,treasury);\\n    }\\n\\n    /// @notice Set the address of vERC20 on a given chain\\n    /// @param verc20_ vERC20 contract address\\n    /// @param chain_ chain id of the chain where vERC2o contract resides\\n    /// @dev nonce is incremented for every successful deposit or withdraw\\n    function _setvERC20Address(address verc20_, uint256 chain_) internal {\\n        if (verc20_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if(chain_ == 0) {\\n            revert ZeroValue();\\n        }\\n        vERC20Addresses[chain_] = verc20_;\\n\\n        emit vERC20AddressSet(verc20_,chain_);\\n    }\\n\\n    /// @notice Set the address of core relay wrapper\\n    /// @param wrapper_ Core relay wrapper contract address\\n    function _setRelayWrapperAddress(address wrapper_) internal {\\n        if (wrapper_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        relayWrapper = IRelayWrapper(wrapper_);\\n\\n        emit RelayWrapperAddressSet(wrapper_);\\n    }\\n\\n    /// @notice Return the amount of vERC20 currently available on all chains\\n    function totalSupplyAllChains() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Return the amount of vERC20 currently available on a given chain\\n    /// @param chain_ The id of the chain of interest\\n    function totalSupply(uint256 chain_) public view virtual override  returns (uint256) {\\n        return _reserve[chain_];\\n    }\\n\\n    /// @notice Return the address of underlying ERC20 contract address\\n    function asset() external view virtual override returns (address) {\\n        return address(ulAsset);\\n    }\\n\\n    /// @notice Record and update state on successful deposit/withdraw \\n    /// @param action_ deposit or withdraw action\\n    /// @param amount_ amount of tokens deposited or withdrawn\\n    /// @param chain_ target chain id\\n    function _record(Action action_, uint256 amount_, uint256 chain_) internal {\\n        if (action_ == Action.DEPOSIT) {\\n            _totalSupply += amount_;\\n            _reserve[chain_] += amount_;\\n        } else if (action_ == Action.WITHDRAW){\\n            _totalSupply -= amount_;\\n            _reserve[chain_] -= amount_;\\n        }\\n     }\\n\\n    /// @notice Deposit ERC20 tokens to obtain vERC20 on target chain\\n    /// @notice Deposit with ZbyteRelay is supported only via Zbyte Platform in case user deposits directly, it may result in loss of funds(Zbyte).\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param amount_ Amount of ERC20 deposited\\n    function _deposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 amount_)\\n                      internal\\n                      returns (bool result) {\\n        address verc20_ = vERC20Addresses[chain_];\\n        _beforeTokenDeposit(relay_, chain_, receiver_, amount_, verc20_);\\n\\n        uint256 _gasCostForApproveAndDeposit = IZbytePriceFeeder(zbytePriceFeeder).getApproveAndDepositGasCostInZbyte(relay_, chain_);\\n        console.log(\\\"_gasCostForApproveAndDeposit: \\\", _gasCostForApproveAndDeposit);\\n        console.log(\\\"relay_: \\\", relay_);\\n        console.log(\\\"chain_: \\\", chain_);\\n        console.log(\\\"zbytePriceFeeder: \\\", zbytePriceFeeder);\\n        if(amount_ < _gasCostForApproveAndDeposit) revert InsufficientERC20ForDepositGas(amount_, _gasCostForApproveAndDeposit);\\n\\n\\n        IERC20(ulAsset).safeTransferFrom(_msgSender(), _getTrustedForwarder(), _gasCostForApproveAndDeposit);\\n        amount_ = amount_ - _gasCostForApproveAndDeposit;\\n        IERC20(ulAsset).safeTransferFrom(_msgSender(), address(this), amount_);\\n\\n        bytes32 _ack = keccak256(abi.encodePacked(chain_,receiver_,amount_, nonce));\\n        nonce = nonce + 1;\\n        PendingAction memory pAction;\\n        pAction.action = Action.DEPOSIT;\\n        pAction.nAddress = _msgSender();\\n        pAction.rAddress = receiver_;\\n        pAction.chainId = chain_;\\n        pAction.amount = amount_;\\n        pendingAction[_ack] = pAction;\\n        result = relayWrapper.performCrossChainCall(relay_,\\n                                block.chainid,\\n                                chain_,\\n                                verc20_,\\n                                abi.encodeWithSignature(\\\"mint(address,uint256)\\\",receiver_,amount_),\\n                                _ack,\\n                                address(this),\\n                                \\\"\\\");\\n        require(result, \\\"_deposit: callRemote failed.\\\");\\n\\n        _afterTokenDeposit(relay_, chain_, receiver_, amount_, verc20_);\\n\\n        emit ERC20Deposited(_msgSender(), receiver_, amount_, chain_,_ack);\\n        return result;\\n    }\\n\\n    /// @notice Withdraw ERC20 tokens by depositing vERC20 on target chain\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param vERC20Depositor_ Address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @dev The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited\\n    function _withdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address vERC20Depositor_,\\n                      address receiver_)\\n                      internal\\n                      returns (bool result) {\\n        address verc20_ = vERC20Addresses[chain_];\\n        _beforeTokenWithdraw(relay_, chain_, vERC20Depositor_, receiver_, verc20_);\\n\\n        bytes32 _ack = keccak256(abi.encodePacked(chain_,vERC20Depositor_,receiver_,nonce));\\n        nonce = nonce + 1;\\n        PendingAction memory pAction;\\n        pAction.action = Action.WITHDRAW;\\n        pAction.nAddress = receiver_;\\n        pAction.rAddress = vERC20Depositor_;\\n        pAction.chainId = chain_;\\n        pAction.amount = 0;\\n        pendingAction[_ack] = pAction;\\n        result = relayWrapper.performCrossChainCall(relay_,\\n                                block.chainid,\\n                                chain_,\\n                                verc20_,\\n                                abi.encodeWithSignature(\\\"destroy(address)\\\",vERC20Depositor_),\\n                                _ack,\\n                                address(this),\\n                                \\\"\\\");\\n\\n        require(result, \\\"_withdraw: callRemote failed.\\\");\\n        \\n        _afterTokenWithdraw(relay_, chain_, vERC20Depositor_, receiver_, verc20_);\\n\\n        emit ERC20Withdrawn(_msgSender(), vERC20Depositor_, receiver_, chain_, _ack);\\n        return result;\\n    }\\n\\n    /// @notice callback handler to handle acknowledgement for deposit/withdraw\\n    /// @param chain_ Target chain identifier\\n    /// @param ack_ Unique hash of the submitted deposit/withdraw request\\n    /// @param success_ true if the deposit/withdraw was successful on remote\\n    /// @param retval_ The amount of tokens that were deposited/withdrawn\\n    function _callbackHandler(uint256 chain_,\\n                            bytes32 ack_,\\n                            bool success_,\\n                            uint256  retval_)\\n        internal\\n        nonReentrant\\n        onlyRelay returns(uint256) {\\n        PendingAction storage _pAction = pendingAction[ack_];\\n        address _nAddress = _pAction.nAddress;\\n        uint256 _amount = _pAction.amount;\\n        uint256 _chainId = _pAction.chainId;\\n\\n        if (_pAction.action == Action.DEPOSIT) {\\n            if ((chain_ != _chainId) || (_amount != retval_)) {\\n                revert InvalidCallbackMessage(_chainId, _amount, chain_, retval_);\\n            }\\n            if(success_) {\\n                _record(Action.DEPOSIT, _amount, _chainId);\\n\\n                delete pendingAction[ack_];\\n                emit ERC20DepositConfirmed(ack_, success_,retval_);\\n            } else {\\n                IERC20(ulAsset).safeTransfer(_nAddress, _amount);\\n                delete pendingAction[ack_];\\n                emit ERC20DepositFailedAndRefunded(ack_, success_,retval_);\\n            }\\n\\n        } else if (_pAction.action == Action.WITHDRAW && success_) {\\n            if (chain_ != _chainId) {\\n                revert InvalidCallbackMessage(_chainId, _amount, chain_, retval_);\\n            }\\n            IERC20(ulAsset).safeTransfer(_nAddress, retval_);\\n            _record(Action.WITHDRAW, _amount, _chainId);\\n\\n            delete pendingAction[ack_];\\n            emit ERC20WithdrawConfirmed(ack_, success_,retval_);\\n\\n        } else {\\n            revert InvalidCallbackAck(chain_,ack_, success_,retval_);\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Hook called before token deposit\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param amount_ Amount of ERC20 deposited\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _beforeTokenDeposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 amount_,\\n                      address verc20_) internal  {}\\n\\n    /// @notice Hook called after token deposit\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param amount_ Amount of ERC20 deposited\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _afterTokenDeposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 amount_,\\n                      address verc20_) internal  {}\\n\\n    /// @notice Hook called before token withdraw\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param paymaster_ Paymaster address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _beforeTokenWithdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address paymaster_,\\n                      address receiver_,\\n                      address verc20_) internal  {}\\n\\n    /// @notice Hook called after token withdraw\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param paymaster_ Paymaster address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _afterTokenWithdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address paymaster_,\\n                      address receiver_,\\n                      address verc20_) internal  {}\\n}\\n\",\"keccak256\":\"0x731ebea367b0be52058bf4f71addc316b3552041dd4bceeb70ea6faa06004e26\",\"license\":\"MIT\"},\"contracts/core/ZbyteEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./EscrowERC20.sol\\\";\\n\\n/// @title The ZBYT ERC20 Escrow contract\\ncontract ZbyteEscrow is Ownable, Pausable, EscrowERC20 {\\n\\n    constructor(address forwarder_,\\n                address zbyte_,\\n                address treasury_)\\n                EscrowERC20(forwarder_, IERC20(zbyte_)) {\\n        setTreasuryAddress(treasury_);\\n    }\\n\\n    /// @notice Deposit ERC20 tokens to obtain vERC20 on target chain\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param amount_ Amount of ERC20 deposited\\n    function deposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 amount_)\\n                      public\\n                      whenNotPaused\\n                      returns (bool result) {\\n        return _deposit(relay_,chain_,receiver_,amount_);\\n    }\\n\\n    /// @notice Withdraw ERC20 tokens by depositing vERC20 on target chain\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param vERC20Depositor_ Address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @dev The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited\\n    function withdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address vERC20Depositor_,\\n                      address receiver_)\\n                      whenNotPaused\\n                      public onlyAuthorized\\n                      returns (bool result) {\\n        return _withdraw(relay_,chain_,vERC20Depositor_,receiver_);\\n    }\\n\\n    /// @notice callback handler to handle acknowledgement for deposit/withdraw\\n    /// @param chain_ Target chain identifier\\n    /// @param ack_ Unique hash of the submitted deposit/withdraw request\\n    /// @param success_ true if the deposit/withdraw was successful on remote\\n    /// @param retval_ The amount of tokens that were deposited/withdrawn\\n    function callbackHandler(uint256 chain_,\\n                            bytes32 ack_,\\n                            bool success_,\\n                            uint256  retval_)\\n        external\\n        returns(uint256) {\\n        return _callbackHandler(chain_,ack_,success_,retval_);\\n\\n    }\\n\\n    /// @notice Set the address of vERC20 on a given chain\\n    /// @param verc20_ vERC20 contract address\\n    /// @param chain_ chain id of the chain where vERC2o contract resides\\n    /// @dev nonce is incremented for every successful deposit or withdraw\\n    function setvERC20Address(address verc20_, uint256 chain_) public onlyOwner {\\n        _setvERC20Address(verc20_,chain_);\\n    }\\n    \\n    /// @notice Set the address of core relay wrapper\\n    /// @param wrapper_ Core relay wrapper contract address\\n    function setRelayWrapperAddress(address wrapper_) public onlyOwner {\\n        _setRelayWrapperAddress(wrapper_);\\n    }\\n\\n    /// @notice Pauses the contract (mint, transfer and burn operations are paused)\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the paused contract\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @notice ERC2771 _msgSender override\\n    function _msgSender() internal view override(ZbyteContext,Context) returns (address sender) {\\n        return ZbyteContext._msgSender();\\n    }\\n\\n    /// @notice ERC2771 _msgData override\\n    function _msgData() internal view override(ZbyteContext,Context) returns (bytes calldata) {\\n        return ZbyteContext._msgData();\\n    }\\n}\",\"keccak256\":\"0xa2126b9db7f8721d78e5d01b712aa1cd9dcec0a1622bbf001ff70727a3c4a51d\",\"license\":\"MIT\"},\"contracts/interface/core/IEscrowERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title The ZBYT ERC20 Escrow contract\\ninterface IEscrowERC20 {\\n    // errors\\n    /// @notice Caller is not a valid relay\\n    error InvalidRelay(address);\\n    /// @notice error (0xd6facdff): The callback received was invalid\\n    error InvalidCallbackMessage(uint256,uint256,uint256,uint256);\\n    /// @notice error (0xcd9d7bb0): The ack in callback received was not found\\n    error InvalidCallbackAck(uint256,bytes32,bool,uint256);\\n    /// @notice error (0xed3fc6b3): Insufficient ERC20 for Deposit operation.\\n    error InsufficientERC20ForDepositGas(uint256,uint256);\\n    /// @notice error (0xb3922495): Unauthorized caller.\\n    error UnAuthorized(address);\\n\\n    // events\\n    /// @notice event (0x1a40ce6d): vERC20 contract address is set\\n    event vERC20AddressSet(address,uint256);\\n    /// @notice event (0x95290bcc): Core relay wrapper contract address is set\\n    event RelayWrapperAddressSet(address);\\n    /// @notice event (0xcae09af7): ERC20 tokens deposited\\n    event ERC20Deposited(address,address,uint256,uint256,bytes32);\\n    /// @notice event (0x0583eefc): ERC20 tokens deposit failed\\n    event ERC20DepositFailed(address,address,uint256,uint256,bytes32);\\n    /// @notice event (0xf64578a8): ERC20 tokens deposit confirmed\\n    event ERC20DepositConfirmed(bytes32,bool,uint256);\\n    /// @notice event (0x8b923c21): ERC20 tokens withdrawn\\n    event ERC20Withdrawn(address,address,address,uint256,bytes32);\\n    /// @notice event (0x2b4d7cea): ERC20 tokens withdraw failed\\n    event ERC20WithdrawFailed(address,address,address,uint256,bytes32);\\n    /// @notice event (0xf5a60bd1): ERC20 tokens withdraw confirmed\\n    event ERC20WithdrawConfirmed(bytes32,bool,uint256);\\n    /// @notice event (0x1db696c9): The Treasury address is set\\n    event TreasuryAddressSet(address,address);\\n    /// @notice event (0x5e7c3cb3): Zbyte Price Feeder address is set\\n    event ZbytePriceFeederAddressSet(address);\\n    /// @notice event (0x82b9d61d): ERC20 tokens deposit failed and refund issued to depositor\\n    event ERC20DepositFailedAndRefunded(bytes32,bool,uint256);\\n    /// @notice event (0x2ddb4d51): Worker is registered(true/false)\\n    event WorkerRegistered(address,bool);\\n\\n    function getNonce() external view returns(uint256);\\n    function totalSupplyAllChains() external view returns (uint256);\\n    function totalSupply(uint256 chain_) external view returns (uint256);\\n    function asset() external view returns (address);\\n    function callbackHandler(uint256 chain_,\\n                            bytes32 ack_,\\n                            bool success_,\\n                            uint256  retval_)\\n        external returns(uint256);\\n}\",\"keccak256\":\"0x16399c38685b098c53a4141f59bb2307807cacb6215377f45beac42737ec27a6\",\"license\":\"MIT\"},\"contracts/interface/dplat/IZbytePriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title IZbytePriceFeeder\\n/// @notice Interface for Zbyte price feeder, defining functions for gas cost conversion and retrieval.\\ninterface IZbytePriceFeeder {\\n    /// @notice Event emitted when the equivalent Zbyte price for native ETH is set.\\n    event NativeEthEquivalentZbyteSet(uint256 nativeEthEquivalentZbyteInGwei);\\n\\n    /// @notice Event emitted when the Zbyte price in Gwei is set.\\n    event ZbytePriceInGweiSet(uint256 zbytePriceInGwei);\\n\\n    /// @notice Event emitted when the gas cost for approve and deposit operation is set.\\n    event ApproveAndDepositGasCostSet(uint256 relay, uint256 remoteChainId, uint256 gasCost);\\n\\n    /// @notice Converts eth to equivalent Zbyte amount.\\n    /// @param ethAmount_ Amount of eth.\\n    /// @return Equivalent Amount of zbyte.\\n    function convertEthToEquivalentZbyte(uint256 ethAmount_) external view returns (uint256);\\n\\n    /// @notice Converts price in millionths to Zbyte amount.\\n    /// @param priceInMill_ Price in millionths.\\n    /// @return Equivalent Zbyte amount.\\n    function convertMillToZbyte(uint256 priceInMill_) external view returns (uint256);\\n\\n    /// @notice Retrieves the gas cost for approve and deposit operation converted to Zbyte.\\n    /// @param relay_ The relay identifier.\\n    /// @param remoteChainId_ The remote chain identifier.\\n    /// @return Equivalent Zbyte gas cost.\\n    function getApproveAndDepositGasCostInZbyte(uint256 relay_, uint256 remoteChainId_) external view returns (uint256);\\n\\n    /// @notice Returns equivalent amount of Zbyte to burn.\\n    /// @return Equivalent amount of Zbyte to burn.\\n    function getBurnAmountInZbyte() external view returns(uint256);\\n}\",\"keccak256\":\"0xdb1687c1a73545c359e66044d583efc40a3f9fec2b08a01e3adefd514dd04a4c\",\"license\":\"MIT\"},\"contracts/interface/relay/IRelayWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title Relay wrapper interface (facilitates cross chain call during deposit/mint)\\ninterface IRelayWrapper {\\n\\n    function performCrossChainCall(\\n        uint256 relay_,\\n        uint256 srcChain_,\\n        uint256 destChain_,\\n        address destContract_,\\n        bytes calldata destCallData_,\\n        bytes32 ack_,\\n        address callbackContract_,\\n        bytes calldata relayParams_\\n    ) external payable returns (bool);\\n\\n    function isValidRelay(uint256 chainId, address relay_) external returns(bool);\\n    function updatePayload(uint256 destChain_,\\n                            address destContract_,\\n                            bytes32 ack_,\\n                            address callbackContract_,\\n                            bytes calldata data_) external pure returns(bytes memory);\\n}\",\"keccak256\":\"0x209615ffe8434d01b3e9c1ad353a47994bf4cbc0957623d32bb5edd03ff0d17e\",\"license\":\"MIT\"},\"contracts/utils/ZbyteContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title The ZBYT ERC20 contract\\n/// @dev ERC2771Context with a function to set forwarder\\nabstract contract ZbyteContext is Context, Ownable {\\n    // errors\\n    /// @notice error (0xbf064619): Contract cannot receive ether\\n    error CannotSendEther();\\n    /// @notice error (0xd92e233d): Address is address(0)\\n    error ZeroAddress();\\n    /// @notice error(): Value sent is 0\\n    error ZeroValue();\\n\\n    // events\\n    /// @notice event (0x94aed472): Forwarder address is changed\\n    event ForwarderSet(address,address);\\n\\n    // Trusted forwarder address\\n    address private trustedForwarder;\\n\\n    // /// @notice ZbyteContext constructor\\n    // /// @param forwarder_ Forwarder contact address\\n    // constructor(address forwarder_) {\\n    //     _setTrustedForwarder(forwarder_);\\n    // }\\n\\n    /// @notice Check if the given address is the trusted forwarder\\n    /// @param forwarder_ Address to check\\n    /// @return true if forwarder_ is trusted forwarder\\n    function isTrustedForwarder(address forwarder_) public view virtual returns (bool) {\\n        return forwarder_ == trustedForwarder;\\n    }\\n\\n    /// @notice Set a trusted forwarder address\\n    /// @param forwarder_ Trusted forwarder address\\n    /// @dev emits ForwarderSet on success\\n    function _setTrustedForwarder(address forwarder_) internal {\\n        if (forwarder_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        address oldForwarder = trustedForwarder;\\n        trustedForwarder = forwarder_;\\n\\n        emit ForwarderSet(oldForwarder,forwarder_);\\n    }\\n\\n    /// @notice Set the forwarder contract address\\n    /// @param forwarder_ Frwarder conract address\\n    /// @dev onlyOwner can call\\n    function setTrustedForwarder(address forwarder_) public onlyOwner {\\n        _setTrustedForwarder(forwarder_);\\n    }\\n\\n    /// @notice Get the trusted forwarder address\\n    function _getTrustedForwarder() internal view returns(address){\\n        return trustedForwarder;\\n    }\\n\\n    /// @notice Extract true caller if called via trusted forwarder\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /// @notice Extract data if called via trusted forwarder\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c27022a50e80284df94f275bd72bc0c08af33480ab79d00e7ab6eb6741fce4f\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200022357601f62001f7638819003918201601f1916830191906001600160401b0383118484101762000228578160609285926040958652833981010312620002235762000050826200023e565b916200006c8262000064602084016200023e565b92016200023e565b6001600160a01b039182166200008162000253565b908360005492169182865191818782167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a81b03191617600055600160025581156200021457508386169586156200020357600180546001600160a01b03198082169990991790915586516001600160a01b0391871682168152911660208201527f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd3090604090a1856007541617600755826200014562000253565b1603620001c0578116928315620001af576003805491821685179055825191166001600160a01b0390811682529092166020830152907f1db696c9becb6c7e5b140934fe902d723d35791ef36d36c9b1586f6a502fd29790604090a151611cfd9081620002798239f35b825163d92e233d60e01b8152600490fd5b6064835162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b855163d92e233d60e01b8152600490fd5b63d92e233d60e01b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200022357565b600154336001600160a01b0390911603620002745736601319013560601c90565b339056fe60806040526004361015610026575b361561001957600080fd5b61002161129f565b600080fd5b60003560e01c806301c99f9f1461021157806312c00ccb1461020857806338d52e0f146101e45780633f4ba83a146101ff5780633fcc4a81146101f6578063450a9d77146101ed5780634d3273db146101e4578063572b6c05146101db5780635c975abb146101d257806361d027b3146101c95780636605bfda146101c0578063715018a6146101b757806371b3177a146101ae5780638456cb59146101a55780638da5cb5b1461019c578063a1478a3b14610193578063bd85b0391461018a578063c6a3178514610181578063c8b5303814610178578063d087d2881461016f578063da74222814610166578063deee40781461015d578063e78f094914610154578063e7f7b83d1461014b5763f2fde38b0361000e57610146611172565b61000e565b5061014661110f565b50610146610d69565b50610146610d34565b50610146610c99565b50610146610c7a565b50610146610c0b565b50610146610bcc565b50610146610b9f565b50610146610b75565b50610146610b4b565b50610146610acc565b5061014661081b565b506101466107b0565b50610146610715565b506101466106eb565b506101466106c4565b5061014661068e565b50610146610390565b506101466105c9565b5061014661044a565b506101466103ba565b50610146610300565b50610146610266565b600435906001600160a01b038216820361002157565b604435906001600160a01b038216820361002157565b606435906001600160a01b038216820361002157565b8015150361002157565b5034610021576040366003190112610021577f2ddb4d518081e3226ce50314090fbddc7a51e92d125bd71d785914d1b6d3d67960406102a361021a565b602435906102b08261025c565b6000546001600160a01b0391906102d3908316836102cc611bf7565b161461120d565b1690816000526009602052826000209015159060ff1981541660ff831617905582519182526020820152a1005b50346100215760203660031901126100215761031a61021a565b6000546001600160a01b039190610336908316836102cc611bf7565b16801561037e576020817f8e3584f39ded6e1a9a02b72cddce11efa1a306747c8527671917b231983edbad926001600160601b0360a01b600a541617600a55604051908152a1005b60405163d92e233d60e01b8152600490fd5b5034610021576000366003190112610021576007546040516001600160a01b039091168152602090f35b5034610021576000806003193601126104475780547f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020906001600160a01b039061041382610409611bf7565b168383161461120d565b61042b60ff8260a01c1661042681611bb4565b611bb4565b60ff60a01b1916845561043c611bf7565b60405191168152a180f35b80fd5b5034610021576080366003190112610021576044356104688161025c565b60028054146105845760028055600a546000906020906104c5906001600160a01b0316610493611bf7565b604051630b43159160e41b81524660048201526001600160a01b03909116602482015293849283919082906044820190565b03925af1908115610577575b600091610549575b5015610513576104f561050f9160643590602435600435611893565b6104ff6001600255565b6040519081529081906020820190565b0390f35b61054561051e611bf7565b604051630adb4ca360e41b81526001600160a01b0390911660048201529081906024820190565b0390fd5b61056a915060203d8111610570575b6105628183611331565b810190611529565b386104d9565b503d610558565b61057f611362565b6104d1565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b5034610021576040366003190112610021576105e361021a565b600054602435906001600160a01b0390610602908216826102cc611bf7565b82161561037e57801561067c57600081815260066020526040902080546001600160a01b0319166001600160a01b0384161790557f1a40ce6d89bbc096abbbb07f26f960227344b0199ce4c540844114d7839b793891604080516001600160a01b039092168252602082019290925290819081015b0390a1005b604051637c946ed760e01b8152600490fd5b50346100215760203660031901126100215760206106aa61021a565b6001546040516001600160a01b0392831691909216148152f35b503461002157600036600319011261002157602060ff60005460a01c166040519015158152f35b5034610021576000366003190112610021576003546040516001600160a01b039091168152602090f35b50346100215760203660031901126100215761072f61021a565b6000546001600160a01b0391829161074c908316836102cc611bf7565b1690811561037e57600380546001600160a01b03198116841790915560408051929091166001600160a01b03908116835290921660208201527f1db696c9becb6c7e5b140934fe902d723d35791ef36d36c9b1586f6a502fd2979181908101610677565b50346100215760008060031936011261044757805481906001600160a01b0380821691906107e8906107e0611bf7565b16831461120d565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461002157608036600319011261002157602435610838610230565b90610841610246565b60009261085560ff855460a01c16156112b2565b6001600160a01b039081610867611bf7565b1685526020926009845260409260ff848820541615610aab5750610895856000526006602052604060002090565b546001600160a01b03168585600b54928651828101816108e187898b898692606894929184526001600160601b0319809260601b16602085015260601b16603483015260488201520190565b0391601f199283810182526108f69082611331565b519020946109039061144c565b600b5561090e61145a565b600281526001600160a01b038716818501526001600160a01b038816818a01528460608201528b608082015261094e86600052600c602052604060002090565b90610958916114a4565b600a54885162f55d9d60e01b858201526001600160a01b038981166024830152604493840182529091169186918d916109919082611331565b8a516380516ec960e01b8152968795869485936109b8933093904660048035908901611581565b03925af19586159861050f99610a9e575b96610a55575b5050610a42908596610a027f72b69b7283d7f94f82af237df98dac53d1240005b789c3ed88e3834d21ad7e1b9697611847565b610a0a611bf7565b87516001600160a01b0391821681529581166020870152909316604085015260608401929092526080830191909152819060a0820190565b0390a15190151581529081906020820190565b7f72b69b7283d7f94f82af237df98dac53d1240005b789c3ed88e3834d21ad7e1b959650610a42929181610a9492903d10610570576105628183611331565b95948192506109cf565b610aa6611362565b6109c9565b83602491610ab7611bf7565b915163b392249560e01b815291166004820152fd5b5034610021576000806003193601126104475780547f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020906001600160a01b0390610b1b82610409611bf7565b610b3460ff8260a01c1615610b2f816112b2565b6112b2565b60ff60a01b1916600160a01b17845561043c611bf7565b5034610021576000366003190112610021576000546040516001600160a01b039091168152602090f35b503461002157600036600319011261002157600a546040516001600160a01b039091168152602090f35b50346100215760203660031901126100215760043560005260056020526020604060002054604051908152f35b5034610021576000366003190112610021576020600454604051908152f35b60031115610bf557565b634e487b7160e01b600052602160045260246000fd5b503461002157602036600319011261002157600435600052600c6020526040600020805460ff81169160018060a01b0390816001820154166003600283015492015492604051946003871015610bf55760a096865260081c166020850152604084015260608301526080820152f35b5034610021576000366003190112610021576020600b54604051908152f35b503461002157602036600319011261002157610cb361021a565b6000546001600160a01b0390610cce908216826102cc611bf7565b808216801561037e57600180546001600160a01b031981169092179055604080516001600160a01b0393909216831682529190921660208301527f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30919081908101610677565b5034610021576020366003190112610021576004356000526006602052602060018060a01b0360406000205416604051908152f35b503461002157608036600319011261002157602435600435610d89610230565b9160643592610da060ff60005460a01c16156112b2565b610dc4610db7836000526006602052604060002090565b546001600160a01b031690565b6008546040805163029e92db60e61b815260048101879052602481018690529660209691949391926001600160a01b03908116888a604481845afa998a15611102575b60009a6110cf575b50610e4a90610e258b610e2061136f565b611c1b565b610e3186610e206113a8565b610e3d89610e206113cc565b610e456113f0565b611c79565b8882106110b0576007549798969788978a9392909182906001600160a01b031691610e73611bf7565b906001541690610e829361161f565b610e8b91611435565b6007549093906001600160a01b031684610ea3611bf7565b3090610eae9361161f565b600b548651838101898152606088901b6bffffffffffffffffffffffff19166020820152603481018790526054810183905291929181607482010391601f19928381018252610efd9082611331565b51902094610f0b869461144c565b600b55610f1661145a565b60018152610f22611bf7565b6001600160a01b0316818701526001600160a01b038916818b01528a6060820152876080820152610f5d85600052600c602052604060002090565b90610f67916114a4565b600a5489516340c10f1960e01b878201526001600160a01b038a81166024830152604482018a905260649485018252909116939092610fa69084611331565b89516380516ec960e01b81529a8b9586948594610fcb94309490469060048901611581565b03915a90600091f19485159761050f986110a3575b60009661105a575b5050610a4290859661101b7f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d196976115d3565b611023611bf7565b87516001600160a01b03918216815295166020860152604085019390935260608401929092526080830191909152819060a0820190565b7f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d1959650610a4292918161109992903d10610570576105628183611331565b9594819250610fe8565b6110ab611362565b610fe0565b855163ed3fc6b360e01b815260048101839052602481018a9052604490fd5b610e4a919a506110f4908a3d8c116110fb575b6110ec8183611331565b810190611353565b9990610e0f565b503d6110e2565b61110a611362565b610e07565b5034610021576020366003190112610021577f5e7c3cb3d523380949b38d03a0dc0e6bedc8286e8421d75e02234c903433e1a060206001600160a01b0361115461021a565b16806001600160601b0360a01b6008541617600855604051908152a1005b50346100215760203660031901126100215761118c61021a565b6000546001600160a01b03906111a7908216826102cc611bf7565b8116156111b9576111b790611258565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b1561121457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b5060405163bf06461960e01b8152600490fd5b156112b957565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761132457604052565b61132c6112f1565b604052565b90601f8019910116810190811067ffffffffffffffff82111761132457604052565b90816020910312610021575190565b506040513d6000823e3d90fd5b6040519061137c82611308565b601e82527f5f676173436f7374466f72417070726f7665416e644465706f7369743a2000006020830152565b604051906113b582611308565b600882526703932b630bcaf9d160c51b6020830152565b604051906113d982611308565b6008825267031b430b4b72f9d160c51b6020830152565b604051906113fd82611308565b601282527103d313cba32a83934b1b2a332b2b232b91d160751b6020830152565b50634e487b7160e01b600052601160045260246000fd5b9190820391821161144257565b61144a61141e565b565b906001820180921161144257565b6040519060a0820182811067ffffffffffffffff821117611497575b60405260006080838281528260208201528260408201528260608201520152565b61149f6112f1565b611476565b9080516003811015610bf55782546020830151610100600160a81b0360089190911b1660ff929092166001600160a81b0319909116171782556040810151600391608091611518906001600160a01b03166001860180546001600160a01b0319166001600160a01b03909216919091179055565b606081015160028501550151910155565b90816020910312610021575161153e8161025c565b90565b919082519283825260005b84811061156d575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161154c565b9490926115b79260209894875288870152604086015260018060a01b038094166060860152610100806080870152850190611541565b9360a08401521660c082015260e0818303910152600081520190565b156115da57565b60405162461bcd60e51b815260206004820152601c60248201527f5f6465706f7369743a2063616c6c52656d6f7465206661696c65642e000000006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815261144a9160a0820182811067ffffffffffffffff821117611678575b6040526116e4565b6116806112f1565b611670565b1561168c57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b0391909116916116fd82611308565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b15611774576000828192828761174f9796519301915af16117496117b9565b90611807565b8051908161175c57505050565b8261144a9361176f938301019101611529565b611685565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15611802573d9067ffffffffffffffff82116117f5575b604051916117e9601f8201601f191660200184611331565b82523d6000602084013e565b6117fd6112f1565b6117d1565b606090565b90919015611813575090565b8151156118235750805190602001fd5b60405162461bcd60e51b815260206004820152908190610545906024830190611541565b1561184e57565b60405162461bcd60e51b815260206004820152601d60248201527f5f77697468647261773a2063616c6c52656d6f7465206661696c65642e0000006044820152606490fd5b6118a782600052600c602052604060002090565b8054600382015460029092015492600882901c6001600160a01b03169160ff166118d081610beb565b60018103611a215750838114801590611a17575b6119e85750841561197557509361191f61196d927ff64578a8ea3d511e99da45c5925c1f2ba97616679c9991a491f79d269452f97096611b80565b61194e61193684600052600c602052604060002090565b60036000918281558260018201558260028201550155565b6040519384938460409194939260608201958252151560208201520152565b0390a1600090565b6007547f82b9d61d8c40f24d7817c0a9f6a5a07452b27d8d2a563f58d52847ce9e9849e89695506119b493506001600160a01b0316611af2565b611af2565b6119cb61193682600052600c602052604060002090565b6040805191825260006020830152810191909152606090a1600090565b60405163d6facdff60e01b81526004810185905260248101849052604481019190915260648101879052608490fd5b50868314156118e4565b80611a326002929a9996959a610beb565b1480611aeb575b15611abb57828103611a8c575082917ff5a60bd1e87b05bb87d7c368ca3ef2adb38148647f0a7b7cafdba3e8279051059697611a8761196d9561191f946119af60075460018060a01b031690565b611b33565b60405163d6facdff60e01b81526004810184905260248101899052604481019190915260648101849052608490fd5b604051630cd9d7bb60e41b8152600481019190915260248101859052851515604482015260648101849052608490fd5b5085611a39565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261144a91611b2e606483611331565b6116e4565b90611b5990600454838103908111611b73575b6004556000526005602052604060002090565b8054918203918211611b685755565b611b7061141e565b55565b611b7b61141e565b611b46565b90611ba590600454838101809111611b73576004556000526005602052604060002090565b8054918201809211611b685755565b15611bbb57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b600154336001600160a01b0390911603611c175736601319013560601c90565b3390565b611c5e611c4a9161144a93604051938492632d839cb360e21b6020850152604060248501526064840190611541565b90604483015203601f198101835282611331565b600080916020815191016a636f6e736f6c652e6c6f675afa50565b611c5e611ca89161144a9360405193849263319af33360e01b6020850152604060248501526064840190611541565b6001600160a01b0391909116604483015203601f19810183528261133156fea264697066735822122050af6302a2653c870b8ff30d75ce1b089dd93924814e2128edb07d6c69d4ef8a64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610026575b361561001957600080fd5b61002161129f565b600080fd5b60003560e01c806301c99f9f1461021157806312c00ccb1461020857806338d52e0f146101e45780633f4ba83a146101ff5780633fcc4a81146101f6578063450a9d77146101ed5780634d3273db146101e4578063572b6c05146101db5780635c975abb146101d257806361d027b3146101c95780636605bfda146101c0578063715018a6146101b757806371b3177a146101ae5780638456cb59146101a55780638da5cb5b1461019c578063a1478a3b14610193578063bd85b0391461018a578063c6a3178514610181578063c8b5303814610178578063d087d2881461016f578063da74222814610166578063deee40781461015d578063e78f094914610154578063e7f7b83d1461014b5763f2fde38b0361000e57610146611172565b61000e565b5061014661110f565b50610146610d69565b50610146610d34565b50610146610c99565b50610146610c7a565b50610146610c0b565b50610146610bcc565b50610146610b9f565b50610146610b75565b50610146610b4b565b50610146610acc565b5061014661081b565b506101466107b0565b50610146610715565b506101466106eb565b506101466106c4565b5061014661068e565b50610146610390565b506101466105c9565b5061014661044a565b506101466103ba565b50610146610300565b50610146610266565b600435906001600160a01b038216820361002157565b604435906001600160a01b038216820361002157565b606435906001600160a01b038216820361002157565b8015150361002157565b5034610021576040366003190112610021577f2ddb4d518081e3226ce50314090fbddc7a51e92d125bd71d785914d1b6d3d67960406102a361021a565b602435906102b08261025c565b6000546001600160a01b0391906102d3908316836102cc611bf7565b161461120d565b1690816000526009602052826000209015159060ff1981541660ff831617905582519182526020820152a1005b50346100215760203660031901126100215761031a61021a565b6000546001600160a01b039190610336908316836102cc611bf7565b16801561037e576020817f8e3584f39ded6e1a9a02b72cddce11efa1a306747c8527671917b231983edbad926001600160601b0360a01b600a541617600a55604051908152a1005b60405163d92e233d60e01b8152600490fd5b5034610021576000366003190112610021576007546040516001600160a01b039091168152602090f35b5034610021576000806003193601126104475780547f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020906001600160a01b039061041382610409611bf7565b168383161461120d565b61042b60ff8260a01c1661042681611bb4565b611bb4565b60ff60a01b1916845561043c611bf7565b60405191168152a180f35b80fd5b5034610021576080366003190112610021576044356104688161025c565b60028054146105845760028055600a546000906020906104c5906001600160a01b0316610493611bf7565b604051630b43159160e41b81524660048201526001600160a01b03909116602482015293849283919082906044820190565b03925af1908115610577575b600091610549575b5015610513576104f561050f9160643590602435600435611893565b6104ff6001600255565b6040519081529081906020820190565b0390f35b61054561051e611bf7565b604051630adb4ca360e41b81526001600160a01b0390911660048201529081906024820190565b0390fd5b61056a915060203d8111610570575b6105628183611331565b810190611529565b386104d9565b503d610558565b61057f611362565b6104d1565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b5034610021576040366003190112610021576105e361021a565b600054602435906001600160a01b0390610602908216826102cc611bf7565b82161561037e57801561067c57600081815260066020526040902080546001600160a01b0319166001600160a01b0384161790557f1a40ce6d89bbc096abbbb07f26f960227344b0199ce4c540844114d7839b793891604080516001600160a01b039092168252602082019290925290819081015b0390a1005b604051637c946ed760e01b8152600490fd5b50346100215760203660031901126100215760206106aa61021a565b6001546040516001600160a01b0392831691909216148152f35b503461002157600036600319011261002157602060ff60005460a01c166040519015158152f35b5034610021576000366003190112610021576003546040516001600160a01b039091168152602090f35b50346100215760203660031901126100215761072f61021a565b6000546001600160a01b0391829161074c908316836102cc611bf7565b1690811561037e57600380546001600160a01b03198116841790915560408051929091166001600160a01b03908116835290921660208201527f1db696c9becb6c7e5b140934fe902d723d35791ef36d36c9b1586f6a502fd2979181908101610677565b50346100215760008060031936011261044757805481906001600160a01b0380821691906107e8906107e0611bf7565b16831461120d565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461002157608036600319011261002157602435610838610230565b90610841610246565b60009261085560ff855460a01c16156112b2565b6001600160a01b039081610867611bf7565b1685526020926009845260409260ff848820541615610aab5750610895856000526006602052604060002090565b546001600160a01b03168585600b54928651828101816108e187898b898692606894929184526001600160601b0319809260601b16602085015260601b16603483015260488201520190565b0391601f199283810182526108f69082611331565b519020946109039061144c565b600b5561090e61145a565b600281526001600160a01b038716818501526001600160a01b038816818a01528460608201528b608082015261094e86600052600c602052604060002090565b90610958916114a4565b600a54885162f55d9d60e01b858201526001600160a01b038981166024830152604493840182529091169186918d916109919082611331565b8a516380516ec960e01b8152968795869485936109b8933093904660048035908901611581565b03925af19586159861050f99610a9e575b96610a55575b5050610a42908596610a027f72b69b7283d7f94f82af237df98dac53d1240005b789c3ed88e3834d21ad7e1b9697611847565b610a0a611bf7565b87516001600160a01b0391821681529581166020870152909316604085015260608401929092526080830191909152819060a0820190565b0390a15190151581529081906020820190565b7f72b69b7283d7f94f82af237df98dac53d1240005b789c3ed88e3834d21ad7e1b959650610a42929181610a9492903d10610570576105628183611331565b95948192506109cf565b610aa6611362565b6109c9565b83602491610ab7611bf7565b915163b392249560e01b815291166004820152fd5b5034610021576000806003193601126104475780547f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020906001600160a01b0390610b1b82610409611bf7565b610b3460ff8260a01c1615610b2f816112b2565b6112b2565b60ff60a01b1916600160a01b17845561043c611bf7565b5034610021576000366003190112610021576000546040516001600160a01b039091168152602090f35b503461002157600036600319011261002157600a546040516001600160a01b039091168152602090f35b50346100215760203660031901126100215760043560005260056020526020604060002054604051908152f35b5034610021576000366003190112610021576020600454604051908152f35b60031115610bf557565b634e487b7160e01b600052602160045260246000fd5b503461002157602036600319011261002157600435600052600c6020526040600020805460ff81169160018060a01b0390816001820154166003600283015492015492604051946003871015610bf55760a096865260081c166020850152604084015260608301526080820152f35b5034610021576000366003190112610021576020600b54604051908152f35b503461002157602036600319011261002157610cb361021a565b6000546001600160a01b0390610cce908216826102cc611bf7565b808216801561037e57600180546001600160a01b031981169092179055604080516001600160a01b0393909216831682529190921660208301527f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30919081908101610677565b5034610021576020366003190112610021576004356000526006602052602060018060a01b0360406000205416604051908152f35b503461002157608036600319011261002157602435600435610d89610230565b9160643592610da060ff60005460a01c16156112b2565b610dc4610db7836000526006602052604060002090565b546001600160a01b031690565b6008546040805163029e92db60e61b815260048101879052602481018690529660209691949391926001600160a01b03908116888a604481845afa998a15611102575b60009a6110cf575b50610e4a90610e258b610e2061136f565b611c1b565b610e3186610e206113a8565b610e3d89610e206113cc565b610e456113f0565b611c79565b8882106110b0576007549798969788978a9392909182906001600160a01b031691610e73611bf7565b906001541690610e829361161f565b610e8b91611435565b6007549093906001600160a01b031684610ea3611bf7565b3090610eae9361161f565b600b548651838101898152606088901b6bffffffffffffffffffffffff19166020820152603481018790526054810183905291929181607482010391601f19928381018252610efd9082611331565b51902094610f0b869461144c565b600b55610f1661145a565b60018152610f22611bf7565b6001600160a01b0316818701526001600160a01b038916818b01528a6060820152876080820152610f5d85600052600c602052604060002090565b90610f67916114a4565b600a5489516340c10f1960e01b878201526001600160a01b038a81166024830152604482018a905260649485018252909116939092610fa69084611331565b89516380516ec960e01b81529a8b9586948594610fcb94309490469060048901611581565b03915a90600091f19485159761050f986110a3575b60009661105a575b5050610a4290859661101b7f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d196976115d3565b611023611bf7565b87516001600160a01b03918216815295166020860152604085019390935260608401929092526080830191909152819060a0820190565b7f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d1959650610a4292918161109992903d10610570576105628183611331565b9594819250610fe8565b6110ab611362565b610fe0565b855163ed3fc6b360e01b815260048101839052602481018a9052604490fd5b610e4a919a506110f4908a3d8c116110fb575b6110ec8183611331565b810190611353565b9990610e0f565b503d6110e2565b61110a611362565b610e07565b5034610021576020366003190112610021577f5e7c3cb3d523380949b38d03a0dc0e6bedc8286e8421d75e02234c903433e1a060206001600160a01b0361115461021a565b16806001600160601b0360a01b6008541617600855604051908152a1005b50346100215760203660031901126100215761118c61021a565b6000546001600160a01b03906111a7908216826102cc611bf7565b8116156111b9576111b790611258565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b1561121457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b5060405163bf06461960e01b8152600490fd5b156112b957565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761132457604052565b61132c6112f1565b604052565b90601f8019910116810190811067ffffffffffffffff82111761132457604052565b90816020910312610021575190565b506040513d6000823e3d90fd5b6040519061137c82611308565b601e82527f5f676173436f7374466f72417070726f7665416e644465706f7369743a2000006020830152565b604051906113b582611308565b600882526703932b630bcaf9d160c51b6020830152565b604051906113d982611308565b6008825267031b430b4b72f9d160c51b6020830152565b604051906113fd82611308565b601282527103d313cba32a83934b1b2a332b2b232b91d160751b6020830152565b50634e487b7160e01b600052601160045260246000fd5b9190820391821161144257565b61144a61141e565b565b906001820180921161144257565b6040519060a0820182811067ffffffffffffffff821117611497575b60405260006080838281528260208201528260408201528260608201520152565b61149f6112f1565b611476565b9080516003811015610bf55782546020830151610100600160a81b0360089190911b1660ff929092166001600160a81b0319909116171782556040810151600391608091611518906001600160a01b03166001860180546001600160a01b0319166001600160a01b03909216919091179055565b606081015160028501550151910155565b90816020910312610021575161153e8161025c565b90565b919082519283825260005b84811061156d575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161154c565b9490926115b79260209894875288870152604086015260018060a01b038094166060860152610100806080870152850190611541565b9360a08401521660c082015260e0818303910152600081520190565b156115da57565b60405162461bcd60e51b815260206004820152601c60248201527f5f6465706f7369743a2063616c6c52656d6f7465206661696c65642e000000006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815261144a9160a0820182811067ffffffffffffffff821117611678575b6040526116e4565b6116806112f1565b611670565b1561168c57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b0391909116916116fd82611308565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b15611774576000828192828761174f9796519301915af16117496117b9565b90611807565b8051908161175c57505050565b8261144a9361176f938301019101611529565b611685565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15611802573d9067ffffffffffffffff82116117f5575b604051916117e9601f8201601f191660200184611331565b82523d6000602084013e565b6117fd6112f1565b6117d1565b606090565b90919015611813575090565b8151156118235750805190602001fd5b60405162461bcd60e51b815260206004820152908190610545906024830190611541565b1561184e57565b60405162461bcd60e51b815260206004820152601d60248201527f5f77697468647261773a2063616c6c52656d6f7465206661696c65642e0000006044820152606490fd5b6118a782600052600c602052604060002090565b8054600382015460029092015492600882901c6001600160a01b03169160ff166118d081610beb565b60018103611a215750838114801590611a17575b6119e85750841561197557509361191f61196d927ff64578a8ea3d511e99da45c5925c1f2ba97616679c9991a491f79d269452f97096611b80565b61194e61193684600052600c602052604060002090565b60036000918281558260018201558260028201550155565b6040519384938460409194939260608201958252151560208201520152565b0390a1600090565b6007547f82b9d61d8c40f24d7817c0a9f6a5a07452b27d8d2a563f58d52847ce9e9849e89695506119b493506001600160a01b0316611af2565b611af2565b6119cb61193682600052600c602052604060002090565b6040805191825260006020830152810191909152606090a1600090565b60405163d6facdff60e01b81526004810185905260248101849052604481019190915260648101879052608490fd5b50868314156118e4565b80611a326002929a9996959a610beb565b1480611aeb575b15611abb57828103611a8c575082917ff5a60bd1e87b05bb87d7c368ca3ef2adb38148647f0a7b7cafdba3e8279051059697611a8761196d9561191f946119af60075460018060a01b031690565b611b33565b60405163d6facdff60e01b81526004810184905260248101899052604481019190915260648101849052608490fd5b604051630cd9d7bb60e41b8152600481019190915260248101859052851515604482015260648101849052608490fd5b5085611a39565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261144a91611b2e606483611331565b6116e4565b90611b5990600454838103908111611b73575b6004556000526005602052604060002090565b8054918203918211611b685755565b611b7061141e565b55565b611b7b61141e565b611b46565b90611ba590600454838101809111611b73576004556000526005602052604060002090565b8054918201809211611b685755565b15611bbb57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b600154336001600160a01b0390911603611c175736601319013560601c90565b3390565b611c5e611c4a9161144a93604051938492632d839cb360e21b6020850152604060248501526064840190611541565b90604483015203601f198101835282611331565b600080916020815191016a636f6e736f6c652e6c6f675afa50565b611c5e611ca89161144a9360405193849263319af33360e01b6020850152604060248501526064840190611541565b6001600160a01b0391909116604483015203601f19810183528261133156fea264697066735822122050af6302a2653c870b8ff30d75ce1b089dd93924814e2128edb07d6c69d4ef8a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "callbackHandler(uint256,bytes32,bool,uint256)": {
        "params": {
          "ack_": "Unique hash of the submitted deposit/withdraw request",
          "chain_": "Target chain identifier",
          "retval_": "The amount of tokens that were deposited/withdrawn",
          "success_": "true if the deposit/withdraw was successful on remote"
        }
      },
      "deposit(uint256,uint256,address,uint256)": {
        "params": {
          "amount_": "Amount of ERC20 deposited",
          "chain_": "Target chain identifier",
          "receiver_": "Recipient address for vERC20",
          "relay_": "Relay identifier that should be used for the crosschain call"
        }
      },
      "getNonce()": {
        "details": "nonce is incremented for every successful deposit or withdraw"
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder_": "Address to check"
        },
        "returns": {
          "_0": "true if forwarder_ is trusted forwarder"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerWorker(address,bool)": {
        "params": {
          "register_": "A boolean indicating whether to register (true) or unregister (false) the worker.",
          "worker_": "The address of the worker to be registered or unregistered."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRelayWrapperAddress(address)": {
        "params": {
          "wrapper_": "Core relay wrapper contract address"
        }
      },
      "setTreasuryAddress(address)": {
        "params": {
          "treasury_": "Treasury address"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "onlyOwner can call",
        "params": {
          "forwarder_": "Frwarder conract address"
        }
      },
      "setZbytePriceFeederAddress(address)": {
        "details": "This function allows updating the address of the ZbytePriceFeeder contract.",
        "params": {
          "zbytePriceFeederAddress_": "The address of the ZbytePriceFeeder contract."
        }
      },
      "setvERC20Address(address,uint256)": {
        "details": "nonce is incremented for every successful deposit or withdraw",
        "params": {
          "chain_": "chain id of the chain where vERC2o contract resides",
          "verc20_": "vERC20 contract address"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "chain_": "The id of the chain of interest"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256,address,address)": {
        "details": "The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited",
        "params": {
          "chain_": "Target chain identifier",
          "receiver_": "Recipient address for ERC20",
          "relay_": "Relay identifier that should be used for the crosschain call",
          "vERC20Depositor_": "Address to deposit vERC20"
        }
      }
    },
    "title": "The ZBYT ERC20 Escrow contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotSendEther()": [
        {
          "notice": "error (0xbf064619): Contract cannot receive ether"
        }
      ],
      "InsufficientERC20ForDepositGas(uint256,uint256)": [
        {
          "notice": "error (0xed3fc6b3): Insufficient ERC20 for Deposit operation."
        }
      ],
      "InvalidCallbackAck(uint256,bytes32,bool,uint256)": [
        {
          "notice": "error (0xcd9d7bb0): The ack in callback received was not found"
        }
      ],
      "InvalidCallbackMessage(uint256,uint256,uint256,uint256)": [
        {
          "notice": "error (0xd6facdff): The callback received was invalid"
        }
      ],
      "InvalidRelay(address)": [
        {
          "notice": "Caller is not a valid relay"
        }
      ],
      "UnAuthorized(address)": [
        {
          "notice": "error (0xb3922495): Unauthorized caller."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "error (0xd92e233d): Address is address(0)"
        }
      ],
      "ZeroValue()": [
        {
          "notice": "error(): Value sent is 0"
        }
      ]
    },
    "events": {
      "ERC20DepositConfirmed(bytes32,bool,uint256)": {
        "notice": "event (0xf64578a8): ERC20 tokens deposit confirmed"
      },
      "ERC20DepositFailed(address,address,uint256,uint256,bytes32)": {
        "notice": "event (0x0583eefc): ERC20 tokens deposit failed"
      },
      "ERC20DepositFailedAndRefunded(bytes32,bool,uint256)": {
        "notice": "event (0x82b9d61d): ERC20 tokens deposit failed and refund issued to depositor"
      },
      "ERC20Deposited(address,address,uint256,uint256,bytes32)": {
        "notice": "event (0xcae09af7): ERC20 tokens deposited"
      },
      "ERC20WithdrawConfirmed(bytes32,bool,uint256)": {
        "notice": "event (0xf5a60bd1): ERC20 tokens withdraw confirmed"
      },
      "ERC20WithdrawFailed(address,address,address,uint256,bytes32)": {
        "notice": "event (0x2b4d7cea): ERC20 tokens withdraw failed"
      },
      "ERC20Withdrawn(address,address,address,uint256,bytes32)": {
        "notice": "event (0x8b923c21): ERC20 tokens withdrawn"
      },
      "ForwarderSet(address,address)": {
        "notice": "event (0x94aed472): Forwarder address is changed"
      },
      "RelayWrapperAddressSet(address)": {
        "notice": "event (0x95290bcc): Core relay wrapper contract address is set"
      },
      "TreasuryAddressSet(address,address)": {
        "notice": "event (0x1db696c9): The Treasury address is set"
      },
      "WorkerRegistered(address,bool)": {
        "notice": "event (0x2ddb4d51): Worker is registered(true/false)"
      },
      "ZbytePriceFeederAddressSet(address)": {
        "notice": "event (0x5e7c3cb3): Zbyte Price Feeder address is set"
      },
      "vERC20AddressSet(address,uint256)": {
        "notice": "event (0x1a40ce6d): vERC20 contract address is set"
      }
    },
    "kind": "user",
    "methods": {
      "asset()": {
        "notice": "Return the address of underlying ERC20 contract address"
      },
      "callbackHandler(uint256,bytes32,bool,uint256)": {
        "notice": "callback handler to handle acknowledgement for deposit/withdraw"
      },
      "deposit(uint256,uint256,address,uint256)": {
        "notice": "Deposit ERC20 tokens to obtain vERC20 on target chain"
      },
      "getNonce()": {
        "notice": "Get the latest nonce "
      },
      "isTrustedForwarder(address)": {
        "notice": "Check if the given address is the trusted forwarder"
      },
      "pause()": {
        "notice": "Pauses the contract (mint, transfer and burn operations are paused)"
      },
      "pendingAction(bytes32)": {
        "notice": "mapping of current deposit/withdraw operations for which callback has not yet been received"
      },
      "registerWorker(address,bool)": {
        "notice": "Registers or unregisters a worker, allowing or denying access to specific functionality."
      },
      "relayWrapper()": {
        "notice": "RelayWrapper contract address"
      },
      "setRelayWrapperAddress(address)": {
        "notice": "Set the address of core relay wrapper"
      },
      "setTreasuryAddress(address)": {
        "notice": "Set the treasury address"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set the forwarder contract address"
      },
      "setZbytePriceFeederAddress(address)": {
        "notice": "Sets the address of the ZbytePriceFeeder contract."
      },
      "setvERC20Address(address,uint256)": {
        "notice": "Set the address of vERC20 on a given chain"
      },
      "totalSupply(uint256)": {
        "notice": "Return the amount of vERC20 currently available on a given chain"
      },
      "totalSupplyAllChains()": {
        "notice": "Return the amount of vERC20 currently available on all chains"
      },
      "ulAsset()": {
        "notice": "The underlying ERC20 token contract"
      },
      "unpause()": {
        "notice": "Unpauses the paused contract"
      },
      "vERC20Addresses(uint256)": {
        "notice": "mapping of the vERC20 contract address for the chain"
      },
      "withdraw(uint256,uint256,address,address)": {
        "notice": "Withdraw ERC20 tokens by depositing vERC20 on target chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 292,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7280,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 377,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2126,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2129,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2133,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_reserve",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2138,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "vERC20Addresses",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2142,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "ulAsset",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)1030"
      },
      {
        "astId": 2145,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "zbytePriceFeeder",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2150,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "authorizedWorkers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2154,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "relayWrapper",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IRelayWrapper)6261"
      },
      {
        "astId": 2157,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "nonce",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2179,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "pendingAction",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(PendingAction)2173_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1030": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRelayWrapper)6261": {
        "encoding": "inplace",
        "label": "contract IRelayWrapper",
        "numberOfBytes": "20"
      },
      "t_enum(Action)2161": {
        "encoding": "inplace",
        "label": "enum EscrowERC20.Action",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(PendingAction)2173_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EscrowERC20.PendingAction)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingAction)2173_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PendingAction)2173_storage": {
        "encoding": "inplace",
        "label": "struct EscrowERC20.PendingAction",
        "members": [
          {
            "astId": 2164,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "action",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Action)2161"
          },
          {
            "astId": 2166,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "nAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2168,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "rAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2170,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2172,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}