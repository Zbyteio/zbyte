{
  "address": "0x3539FB70DA92877e7977E2bEE1c52AA9dDA3112d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotSendEther",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remoteChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasCost",
          "type": "uint256"
        }
      ],
      "name": "ApproveAndDepositGasCostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BurnRateInMillSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeEthEquivalentZbyteInGwei",
          "type": "uint256"
        }
      ],
      "name": "NativeEthEquivalentZbyteSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zbytePriceInGwei",
          "type": "uint256"
        }
      ],
      "name": "ZbytePriceInGweiSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount_",
          "type": "uint256"
        }
      ],
      "name": "convertEthToEquivalentZbyte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceInMill_",
          "type": "uint256"
        }
      ],
      "name": "convertMillToZbyte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remoteChainId_",
          "type": "uint256"
        }
      ],
      "name": "getApproveAndDepositGasCostInZbyte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnAmountInZbyte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remoteChainId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasCostInZbyte_",
          "type": "uint256"
        }
      ],
      "name": "setApproveAndDepositGasCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "burnRate_",
          "type": "uint256"
        }
      ],
      "name": "setBurnRateInMill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nativeEthEquivalentZbyteInGwei_",
          "type": "uint256"
        }
      ],
      "name": "setNativeEthEquivalentZbyteInGwei",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zbytePriceInGwei_",
          "type": "uint256"
        }
      ],
      "name": "setZbytePriceInGwei",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x002cbb92e02575515747cfd01c7f5d2adcb78cdb2ed0e23f0ce7fa987d83fe7d",
  "receipt": {
    "to": null,
    "from": "0x8DAEBA8cdfe06B0ddFb3c43473F11144B15A4075",
    "contractAddress": "0x3539FB70DA92877e7977E2bEE1c52AA9dDA3112d",
    "transactionIndex": 3,
    "gasUsed": "451127",
    "logsBloom": "0x00000000000000020000000000000040000000800000000000800000000000000000000000000010000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000060000000000000000000800000000000000000080000001000000400000000000000000000000000000000000000000000000000000000000000000200000000000000020000004000000000001000000000000000000000100004000000000000000000001000000000080000000000000000000100000000020000000000000000000000800000000000000000000000000000000000000100000",
    "blockHash": "0x60c5cee6a11ab46ce6a308e1cae176d74bf5ff888aa47287d2530b6a007812e0",
    "transactionHash": "0x002cbb92e02575515747cfd01c7f5d2adcb78cdb2ed0e23f0ce7fa987d83fe7d",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 43292804,
        "transactionHash": "0x002cbb92e02575515747cfd01c7f5d2adcb78cdb2ed0e23f0ce7fa987d83fe7d",
        "address": "0x3539FB70DA92877e7977E2bEE1c52AA9dDA3112d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008daeba8cdfe06b0ddfb3c43473f11144b15a4075"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x60c5cee6a11ab46ce6a308e1cae176d74bf5ff888aa47287d2530b6a007812e0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 43292804,
        "transactionHash": "0x002cbb92e02575515747cfd01c7f5d2adcb78cdb2ed0e23f0ce7fa987d83fe7d",
        "address": "0x3539FB70DA92877e7977E2bEE1c52AA9dDA3112d",
        "topics": [
          "0x94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018d0420a40ce8ba8dd2dd920e2c0d472e494c181",
        "logIndex": 26,
        "blockHash": "0x60c5cee6a11ab46ce6a308e1cae176d74bf5ff888aa47287d2530b6a007812e0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 43292804,
        "transactionHash": "0x002cbb92e02575515747cfd01c7f5d2adcb78cdb2ed0e23f0ce7fa987d83fe7d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008daeba8cdfe06b0ddfb3c43473f11144b15a4075",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000290ae6bf74de00000000000000000000000000000000000000000000000004350cc8bcac398880000000000000000000000000000000000000000000022d439cf4506367d56a5000000000000000000000000000000000000000000000000434e3bdd5ecc4aa80000000000000000000000000000000000000000000022d439d1d5b4a274a485",
        "logIndex": 27,
        "blockHash": "0x60c5cee6a11ab46ce6a308e1cae176d74bf5ff888aa47287d2530b6a007812e0"
      }
    ],
    "blockNumber": 43292804,
    "cumulativeGasUsed": "1361577",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18d0420A40cE8ba8dD2dd920e2C0D472e494c181"
  ],
  "numDeployments": 1,
  "solcInputHash": "f3733923b7d895bfbe91b50838bc9ef3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSendEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remoteChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"ApproveAndDepositGasCostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BurnRateInMillSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeEthEquivalentZbyteInGwei\",\"type\":\"uint256\"}],\"name\":\"NativeEthEquivalentZbyteSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zbytePriceInGwei\",\"type\":\"uint256\"}],\"name\":\"ZbytePriceInGweiSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"}],\"name\":\"convertEthToEquivalentZbyte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInMill_\",\"type\":\"uint256\"}],\"name\":\"convertMillToZbyte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remoteChainId_\",\"type\":\"uint256\"}],\"name\":\"getApproveAndDepositGasCostInZbyte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAmountInZbyte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remoteChainId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasCostInZbyte_\",\"type\":\"uint256\"}],\"name\":\"setApproveAndDepositGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnRate_\",\"type\":\"uint256\"}],\"name\":\"setBurnRateInMill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeEthEquivalentZbyteInGwei_\",\"type\":\"uint256\"}],\"name\":\"setNativeEthEquivalentZbyteInGwei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zbytePriceInGwei_\",\"type\":\"uint256\"}],\"name\":\"setZbytePriceInGwei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertEthToEquivalentZbyte(uint256)\":{\"params\":{\"ethAmount_\":\"Amount of eth.\"},\"returns\":{\"_0\":\"Equivalent Amount of zbyte.\"}},\"convertMillToZbyte(uint256)\":{\"params\":{\"priceInMill_\":\"Price in millionths.\"},\"returns\":{\"_0\":\"Equivalent Zbyte amount.\"}},\"getApproveAndDepositGasCostInZbyte(uint256,uint256)\":{\"params\":{\"relay_\":\"The relay identifier.\",\"remoteChainId_\":\"The remote chain identifier.\"},\"returns\":{\"_0\":\"Equivalent Zbyte gas cost.\"}},\"getBurnAmountInZbyte()\":{\"returns\":{\"_0\":\"Equivalent amount of Zbyte to burn.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder_\":\"Address to check\"},\"returns\":{\"_0\":\"true if forwarder_ is trusted forwarder\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setApproveAndDepositGasCost(uint256,uint256,uint256)\":{\"params\":{\"gasCostInZbyte_\":\"Gas cost in Zbyte.\",\"relay_\":\"The relay identifier.\",\"remoteChainId_\":\"The remote chain identifier.\"}},\"setBurnRateInMill(uint256)\":{\"params\":{\"burnRate_\":\"burn rate in mill\"}},\"setNativeEthEquivalentZbyteInGwei(uint256)\":{\"params\":{\"nativeEthEquivalentZbyteInGwei_\":\"The equivalent Zbyte price in Gwei for native ETH.\"}},\"setTrustedForwarder(address)\":{\"details\":\"onlyOwner can call\",\"params\":{\"forwarder_\":\"Frwarder conract address\"}},\"setZbytePriceInGwei(uint256)\":{\"params\":{\"zbytePriceInGwei_\":\"The Zbyte price in Gwei.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ZbytePriceFeeder\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotSendEther()\":[{\"notice\":\"error (0xbf064619): Contract cannot receive ether\"}],\"ZeroAddress()\":[{\"notice\":\"error (0xd92e233d): Address is address(0)\"}],\"ZeroValue()\":[{\"notice\":\"error(): Value sent is 0\"}]},\"events\":{\"ApproveAndDepositGasCostSet(uint256,uint256,uint256)\":{\"notice\":\"Event emitted when the gas cost for approve and deposit operation is set.\"},\"BurnRateInMillSet(uint256)\":{\"notice\":\"Event emitted when the burn rate is set.\"},\"ForwarderSet(address,address)\":{\"notice\":\"event (0x94aed472): Forwarder address is changed\"},\"NativeEthEquivalentZbyteSet(uint256)\":{\"notice\":\"Event emitted when the equivalent Zbyte price for native ETH is set.\"},\"ZbytePriceInGweiSet(uint256)\":{\"notice\":\"Event emitted when the Zbyte price in Gwei is set.\"}},\"kind\":\"user\",\"methods\":{\"convertEthToEquivalentZbyte(uint256)\":{\"notice\":\"Converts eth to equivalent Zbyte amount.\"},\"convertMillToZbyte(uint256)\":{\"notice\":\"Converts price in millionths to Zbyte amount.\"},\"getApproveAndDepositGasCostInZbyte(uint256,uint256)\":{\"notice\":\"Retrieves the gas cost for approve and deposit operation converted to Zbyte.\"},\"getBurnAmountInZbyte()\":{\"notice\":\"Returns equivalent amount of Zbyte to burn.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Check if the given address is the trusted forwarder\"},\"setApproveAndDepositGasCost(uint256,uint256,uint256)\":{\"notice\":\"Sets the gas cost for approve and deposit operation.\"},\"setBurnRateInMill(uint256)\":{\"notice\":\"Sets burn rate for invoke calls in mill\"},\"setNativeEthEquivalentZbyteInGwei(uint256)\":{\"notice\":\"Sets the equivalent Zbyte price in Gwei for native ETH.\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set the forwarder contract address\"},\"setZbytePriceInGwei(uint256)\":{\"notice\":\"Sets the Zbyte price in Gwei.\"}},\"notice\":\"Implements the IZbytePriceFeeder interface and provides functionality to manage gas costs and price conversions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dplat/ZbytePriceFeeder.sol\":\"ZbytePriceFeeder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dplat/ZbytePriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\nimport \\\"../interface/dplat/IZbytePriceFeeder.sol\\\";\\nimport \\\"../utils/ZbyteContext.sol\\\";\\n\\n\\n/// @title ZbytePriceFeeder\\n/// @notice Implements the IZbytePriceFeeder interface and provides functionality to manage gas costs and price conversions.\\ncontract ZbytePriceFeeder is IZbytePriceFeeder, ZbyteContext {\\n    // Gas cost data storage\\n    mapping(uint256 => mapping(uint256 => uint256)) approveAndDepositGasCostInZbyte;\\n    // Conversion factors\\n    uint256 nativeEthEquivalentZbyteInGwei;\\n    uint256 zbytePriceEquivalentInGwei;\\n    uint256 burnRateInMill;\\n\\n    constructor(address forwarder_) {\\n        _setTrustedForwarder(forwarder_);\\n    }\\n\\n    /// @notice Sets the equivalent Zbyte price in Gwei for native ETH.\\n    /// @param nativeEthEquivalentZbyteInGwei_ The equivalent Zbyte price in Gwei for native ETH.\\n    function setNativeEthEquivalentZbyteInGwei(uint256 nativeEthEquivalentZbyteInGwei_) public onlyOwner {\\n        nativeEthEquivalentZbyteInGwei = nativeEthEquivalentZbyteInGwei_;\\n        emit NativeEthEquivalentZbyteSet(nativeEthEquivalentZbyteInGwei_);\\n    }\\n\\n    /// @notice Sets the Zbyte price in Gwei.\\n    /// @param zbytePriceInGwei_ The Zbyte price in Gwei.\\n    function setZbytePriceInGwei(uint256 zbytePriceInGwei_) public onlyOwner {\\n        zbytePriceEquivalentInGwei = zbytePriceInGwei_;\\n        emit ZbytePriceInGweiSet(zbytePriceInGwei_);\\n    }\\n\\n    /// @notice Converts eth to equivalent Zbyte amount.\\n    /// @param ethAmount_ Amount of eth.\\n    /// @return Equivalent Amount of zbyte.\\n    function convertEthToEquivalentZbyte(uint256 ethAmount_) public view returns (uint256) {\\n        uint256 _zbyteAmount = (ethAmount_ * nativeEthEquivalentZbyteInGwei) / 10**9;\\n        return _zbyteAmount;\\n    }\\n\\n    /// @notice Converts price in millionths to Zbyte amount.\\n    /// @param priceInMill_ Price in millionths.\\n    /// @return Equivalent Zbyte amount.\\n    function convertMillToZbyte(uint256 priceInMill_) public view returns (uint256) {\\n        return (priceInMill_ * zbytePriceEquivalentInGwei * 10**9) / 1000;\\n    }\\n\\n    /// @notice Returns equivalent amount of Zbyte to burn.\\n    /// @return Equivalent amount of Zbyte to burn.\\n    function getBurnAmountInZbyte() public view returns(uint256) {\\n        return convertMillToZbyte(burnRateInMill);\\n    }\\n\\n    /// @notice Sets the gas cost for approve and deposit operation.\\n    /// @param relay_ The relay identifier.\\n    /// @param remoteChainId_ The remote chain identifier.\\n    /// @param gasCostInZbyte_ Gas cost in Zbyte.\\n    function setApproveAndDepositGasCost(uint256 relay_, uint256 remoteChainId_, uint256 gasCostInZbyte_) public onlyOwner {\\n        approveAndDepositGasCostInZbyte[relay_][remoteChainId_] = gasCostInZbyte_;\\n        emit ApproveAndDepositGasCostSet(relay_, remoteChainId_, gasCostInZbyte_);\\n    }\\n\\n    /// @notice Retrieves the gas cost for approve and deposit operation converted to Zbyte.\\n    /// @param relay_ The relay identifier.\\n    /// @param remoteChainId_ The remote chain identifier.\\n    /// @return Equivalent Zbyte gas cost.\\n    function getApproveAndDepositGasCostInZbyte(uint256 relay_, uint256 remoteChainId_) public view returns (uint256) {\\n        return approveAndDepositGasCostInZbyte[relay_][remoteChainId_];\\n    }\\n\\n    /// @notice Sets burn rate for invoke calls in mill\\n    /// @param burnRate_ burn rate in mill\\n    function setBurnRateInMill(uint256 burnRate_) public onlyOwner {\\n        burnRateInMill = burnRate_;\\n        emit BurnRateInMillSet(burnRate_);\\n    } \\n}\",\"keccak256\":\"0x91d6e4bfc010329c03fc01b095f1e1db2046eb0baec28641cc25b6eb2ba17c30\",\"license\":\"MIT\"},\"contracts/interface/dplat/IZbytePriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title IZbytePriceFeeder\\n/// @notice Interface for Zbyte price feeder, defining functions for gas cost conversion and retrieval.\\ninterface IZbytePriceFeeder {\\n    /// @notice Event emitted when the equivalent Zbyte price for native ETH is set.\\n    event NativeEthEquivalentZbyteSet(uint256 nativeEthEquivalentZbyteInGwei);\\n\\n    /// @notice Event emitted when the Zbyte price in Gwei is set.\\n    event ZbytePriceInGweiSet(uint256 zbytePriceInGwei);\\n\\n    /// @notice Event emitted when the gas cost for approve and deposit operation is set.\\n    event ApproveAndDepositGasCostSet(uint256 relay, uint256 remoteChainId, uint256 gasCost);\\n\\n    /// @notice Event emitted when the burn rate is set.\\n    event BurnRateInMillSet(uint256);\\n\\n    /// @notice Converts eth to equivalent Zbyte amount.\\n    /// @param ethAmount_ Amount of eth.\\n    /// @return Equivalent Amount of zbyte.\\n    function convertEthToEquivalentZbyte(uint256 ethAmount_) external view returns (uint256);\\n\\n    /// @notice Converts price in millionths to Zbyte amount.\\n    /// @param priceInMill_ Price in millionths.\\n    /// @return Equivalent Zbyte amount.\\n    function convertMillToZbyte(uint256 priceInMill_) external view returns (uint256);\\n\\n    /// @notice Retrieves the gas cost for approve and deposit operation converted to Zbyte.\\n    /// @param relay_ The relay identifier.\\n    /// @param remoteChainId_ The remote chain identifier.\\n    /// @return Equivalent Zbyte gas cost.\\n    function getApproveAndDepositGasCostInZbyte(uint256 relay_, uint256 remoteChainId_) external view returns (uint256);\\n\\n    /// @notice Returns equivalent amount of Zbyte to burn.\\n    /// @return Equivalent amount of Zbyte to burn.\\n    function getBurnAmountInZbyte() external view returns(uint256);\\n}\",\"keccak256\":\"0xc8c8d652e4e1c5d873f4a4976f9f31b1417161458476fc3249c1f18a8c1e5d7b\",\"license\":\"MIT\"},\"contracts/utils/ZbyteContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title The ZBYT ERC20 contract\\n/// @dev ERC2771Context with a function to set forwarder\\nabstract contract ZbyteContext is Context, Ownable {\\n    // errors\\n    /// @notice error (0xbf064619): Contract cannot receive ether\\n    error CannotSendEther();\\n    /// @notice error (0xd92e233d): Address is address(0)\\n    error ZeroAddress();\\n    /// @notice error(): Value sent is 0\\n    error ZeroValue();\\n\\n    // events\\n    /// @notice event (0x94aed472): Forwarder address is changed\\n    event ForwarderSet(address,address);\\n\\n    // Trusted forwarder address\\n    address private trustedForwarder;\\n\\n    // /// @notice ZbyteContext constructor\\n    // /// @param forwarder_ Forwarder contact address\\n    // constructor(address forwarder_) {\\n    //     _setTrustedForwarder(forwarder_);\\n    // }\\n\\n    /// @notice Check if the given address is the trusted forwarder\\n    /// @param forwarder_ Address to check\\n    /// @return true if forwarder_ is trusted forwarder\\n    function isTrustedForwarder(address forwarder_) public view virtual returns (bool) {\\n        return forwarder_ == trustedForwarder;\\n    }\\n\\n    /// @notice Set a trusted forwarder address\\n    /// @param forwarder_ Trusted forwarder address\\n    /// @dev emits ForwarderSet on success\\n    function _setTrustedForwarder(address forwarder_) internal {\\n        if (forwarder_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        address oldForwarder = trustedForwarder;\\n        trustedForwarder = forwarder_;\\n\\n        emit ForwarderSet(oldForwarder,forwarder_);\\n    }\\n\\n    /// @notice Set the forwarder contract address\\n    /// @param forwarder_ Frwarder conract address\\n    /// @dev onlyOwner can call\\n    function setTrustedForwarder(address forwarder_) public onlyOwner {\\n        _setTrustedForwarder(forwarder_);\\n    }\\n\\n    /// @notice Get the trusted forwarder address\\n    function _getTrustedForwarder() internal view returns(address){\\n        return trustedForwarder;\\n    }\\n\\n    /// @notice Extract true caller if called via trusted forwarder\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /// @notice Extract data if called via trusted forwarder\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c27022a50e80284df94f275bd72bc0c08af33480ab79d00e7ab6eb6741fce4f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461010057601f61077d38819003918201601f19168301916001600160401b038311848410176101055780849260209460405283398101031261010057516001600160a01b0390818116908190036101005761005b61011b565b918060005493169260018060a01b03199380858316176000558260405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a382156100f1577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30604085858581600154938416176001558351921682526020820152a160405161063d90816101408239f35b63d92e233d60e01b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b600154336001600160a01b039091160361013b5736601319013560601c90565b339056fe6040608081526004908136101561001557600080fd5b600091823560e01c8063045dce741461052557806325e79beb146104fe578063572b6c05146104c85780635b8823df14610469578063715018a61461040057806372b1853c1461037d5780638da5cb5b14610355578063a7a4b6c014610325578063c7a4c738146102f1578063da7422281461024c578063dd969b6f146101ed578063e2a8ad5b1461018a5763f2fde38b146100b057600080fd5b34610186576020366003190112610186576001600160a01b03813581811693919290849003610182578454916100f3848416946100eb6105e3565b168514610545565b84156101305750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461018657602036600319011261018657816020917fd12b5bd74f3cbc37a15f5eb80b256a93fe26d81fe80649e423d37d3bd6c57517933580926101e460018060a01b0380895416906101dd6105e3565b1614610545565b5551908152a180f35b50346101865760203660031901126101865782547fabd3562e495ac1ee140c5899785f42d94e889c6c4f9af14237cd5718f428f11e926020923591610240906001600160a01b03908116906101dd6105e3565b8160055551908152a180f35b509190346102ed5760203660031901126102ed576001600160a01b038335818116908190036102e95761028582855416836101dd6105e3565b80156102d9577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd3093945060015491816bffffffffffffffffffffffff60a01b8416176001558351921682526020820152a180f35b825163d92e233d60e01b81528590fd5b8380fd5b5080fd5b5091346103225760203660031901126103225750633b9aca0061031a6020936003549035610590565b049051908152f35b80fd5b50346101865781600319360112610186576020928291358152600284528181206024358252845220549051908152f35b5050346102ed57816003193601126102ed57905490516001600160a01b039091168152602090f35b50346101865760603660031901126101865782547fa21b8023eacf0a22d0a25739b3cc3c2d2cacd0c011a2e1bb1102303f35a31cba9260609235916044359190602435906103d9906001600160a01b03908116906101dd6105e3565b8387526002602052818720818852602052828288205581519384526020840152820152a180f35b8334610322578060031936011261032257805481906001600160a01b0380821691906104369061042e6105e3565b168314610545565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101865760203660031901126101865782547fec97c1458e15c7dc478afe0c76d62c57a8ec861d40784d4caf302e82633d40429260209235916104bc906001600160a01b03908116906101dd6105e3565b8160035551908152a180f35b503461018657602036600319011261018657356001600160a01b03818116918290036102e9576020935060015416149051908152f35b509134610322576020366003190112610322575061051e602092356105b9565b9051908152f35b5050346102ed57816003193601126102ed5760209061051e6005546105b9565b1561054c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b818102929181159184041417156105a357565b634e487b7160e01b600052601160045260246000fd5b6004546105c591610590565b633b9aca00908181029181830414901517156105a3576103e8900490565b600154336001600160a01b03909116036106035736601319013560601c90565b339056fea2646970667358221220f2cd37e9b1dd9df6bb42455f3c4c750e28497f40ac1acb07f571e233a6ca901964736f6c63430008110033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c8063045dce741461052557806325e79beb146104fe578063572b6c05146104c85780635b8823df14610469578063715018a61461040057806372b1853c1461037d5780638da5cb5b14610355578063a7a4b6c014610325578063c7a4c738146102f1578063da7422281461024c578063dd969b6f146101ed578063e2a8ad5b1461018a5763f2fde38b146100b057600080fd5b34610186576020366003190112610186576001600160a01b03813581811693919290849003610182578454916100f3848416946100eb6105e3565b168514610545565b84156101305750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461018657602036600319011261018657816020917fd12b5bd74f3cbc37a15f5eb80b256a93fe26d81fe80649e423d37d3bd6c57517933580926101e460018060a01b0380895416906101dd6105e3565b1614610545565b5551908152a180f35b50346101865760203660031901126101865782547fabd3562e495ac1ee140c5899785f42d94e889c6c4f9af14237cd5718f428f11e926020923591610240906001600160a01b03908116906101dd6105e3565b8160055551908152a180f35b509190346102ed5760203660031901126102ed576001600160a01b038335818116908190036102e95761028582855416836101dd6105e3565b80156102d9577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd3093945060015491816bffffffffffffffffffffffff60a01b8416176001558351921682526020820152a180f35b825163d92e233d60e01b81528590fd5b8380fd5b5080fd5b5091346103225760203660031901126103225750633b9aca0061031a6020936003549035610590565b049051908152f35b80fd5b50346101865781600319360112610186576020928291358152600284528181206024358252845220549051908152f35b5050346102ed57816003193601126102ed57905490516001600160a01b039091168152602090f35b50346101865760603660031901126101865782547fa21b8023eacf0a22d0a25739b3cc3c2d2cacd0c011a2e1bb1102303f35a31cba9260609235916044359190602435906103d9906001600160a01b03908116906101dd6105e3565b8387526002602052818720818852602052828288205581519384526020840152820152a180f35b8334610322578060031936011261032257805481906001600160a01b0380821691906104369061042e6105e3565b168314610545565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101865760203660031901126101865782547fec97c1458e15c7dc478afe0c76d62c57a8ec861d40784d4caf302e82633d40429260209235916104bc906001600160a01b03908116906101dd6105e3565b8160035551908152a180f35b503461018657602036600319011261018657356001600160a01b03818116918290036102e9576020935060015416149051908152f35b509134610322576020366003190112610322575061051e602092356105b9565b9051908152f35b5050346102ed57816003193601126102ed5760209061051e6005546105b9565b1561054c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b818102929181159184041417156105a357565b634e487b7160e01b600052601160045260246000fd5b6004546105c591610590565b633b9aca00908181029181830414901517156105a3576103e8900490565b600154336001600160a01b03909116036106035736601319013560601c90565b339056fea2646970667358221220f2cd37e9b1dd9df6bb42455f3c4c750e28497f40ac1acb07f571e233a6ca901964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertEthToEquivalentZbyte(uint256)": {
        "params": {
          "ethAmount_": "Amount of eth."
        },
        "returns": {
          "_0": "Equivalent Amount of zbyte."
        }
      },
      "convertMillToZbyte(uint256)": {
        "params": {
          "priceInMill_": "Price in millionths."
        },
        "returns": {
          "_0": "Equivalent Zbyte amount."
        }
      },
      "getApproveAndDepositGasCostInZbyte(uint256,uint256)": {
        "params": {
          "relay_": "The relay identifier.",
          "remoteChainId_": "The remote chain identifier."
        },
        "returns": {
          "_0": "Equivalent Zbyte gas cost."
        }
      },
      "getBurnAmountInZbyte()": {
        "returns": {
          "_0": "Equivalent amount of Zbyte to burn."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder_": "Address to check"
        },
        "returns": {
          "_0": "true if forwarder_ is trusted forwarder"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setApproveAndDepositGasCost(uint256,uint256,uint256)": {
        "params": {
          "gasCostInZbyte_": "Gas cost in Zbyte.",
          "relay_": "The relay identifier.",
          "remoteChainId_": "The remote chain identifier."
        }
      },
      "setBurnRateInMill(uint256)": {
        "params": {
          "burnRate_": "burn rate in mill"
        }
      },
      "setNativeEthEquivalentZbyteInGwei(uint256)": {
        "params": {
          "nativeEthEquivalentZbyteInGwei_": "The equivalent Zbyte price in Gwei for native ETH."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "onlyOwner can call",
        "params": {
          "forwarder_": "Frwarder conract address"
        }
      },
      "setZbytePriceInGwei(uint256)": {
        "params": {
          "zbytePriceInGwei_": "The Zbyte price in Gwei."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ZbytePriceFeeder",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotSendEther()": [
        {
          "notice": "error (0xbf064619): Contract cannot receive ether"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "error (0xd92e233d): Address is address(0)"
        }
      ],
      "ZeroValue()": [
        {
          "notice": "error(): Value sent is 0"
        }
      ]
    },
    "events": {
      "ApproveAndDepositGasCostSet(uint256,uint256,uint256)": {
        "notice": "Event emitted when the gas cost for approve and deposit operation is set."
      },
      "BurnRateInMillSet(uint256)": {
        "notice": "Event emitted when the burn rate is set."
      },
      "ForwarderSet(address,address)": {
        "notice": "event (0x94aed472): Forwarder address is changed"
      },
      "NativeEthEquivalentZbyteSet(uint256)": {
        "notice": "Event emitted when the equivalent Zbyte price for native ETH is set."
      },
      "ZbytePriceInGweiSet(uint256)": {
        "notice": "Event emitted when the Zbyte price in Gwei is set."
      }
    },
    "kind": "user",
    "methods": {
      "convertEthToEquivalentZbyte(uint256)": {
        "notice": "Converts eth to equivalent Zbyte amount."
      },
      "convertMillToZbyte(uint256)": {
        "notice": "Converts price in millionths to Zbyte amount."
      },
      "getApproveAndDepositGasCostInZbyte(uint256,uint256)": {
        "notice": "Retrieves the gas cost for approve and deposit operation converted to Zbyte."
      },
      "getBurnAmountInZbyte()": {
        "notice": "Returns equivalent amount of Zbyte to burn."
      },
      "isTrustedForwarder(address)": {
        "notice": "Check if the given address is the trusted forwarder"
      },
      "setApproveAndDepositGasCost(uint256,uint256,uint256)": {
        "notice": "Sets the gas cost for approve and deposit operation."
      },
      "setBurnRateInMill(uint256)": {
        "notice": "Sets burn rate for invoke calls in mill"
      },
      "setNativeEthEquivalentZbyteInGwei(uint256)": {
        "notice": "Sets the equivalent Zbyte price in Gwei for native ETH."
      },
      "setTrustedForwarder(address)": {
        "notice": "Set the forwarder contract address"
      },
      "setZbytePriceInGwei(uint256)": {
        "notice": "Sets the Zbyte price in Gwei."
      }
    },
    "notice": "Implements the IZbytePriceFeeder interface and provides functionality to manage gas costs and price conversions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4623,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3291,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "approveAndDepositGasCostInZbyte",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3293,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "nativeEthEquivalentZbyteInGwei",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3295,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "zbytePriceEquivalentInGwei",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3297,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "burnRateInMill",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}