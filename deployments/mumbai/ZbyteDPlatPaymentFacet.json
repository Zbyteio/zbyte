{
  "address": "0x20bCeD3B0255BFfDcb86720D935505fbADA8CBAD",
  "abi": [
    {
      "inputs": [],
      "name": "NotAForwarder",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RefundEthToPayer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dapp_",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "functionSig_",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "getPayer",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payer_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "executeResult_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "reqValue_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasConsumedEth_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "preChargeEth_",
          "type": "uint256"
        }
      ],
      "name": "postExecute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dapp_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "functionSig_",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "ethChargeAmount_",
          "type": "uint256"
        }
      ],
      "name": "preExecute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x287c466f901e74f47bcac6e564e868fad082bacd31e6473da6cd3ee55d86fe80",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x8DAEBA8cdfe06B0ddFb3c43473F11144B15A4075",
    "contractAddress": null,
    "transactionIndex": 22,
    "gasUsed": "725605",
    "logsBloom": "0x
    "blockHash": "0xfa7bbe5c5e24db4f427e277be31c38811ad90d25ce11814d1291697b82afecf4",
    "transactionHash": "0x287c466f901e74f47bcac6e564e868fad082bacd31e6473da6cd3ee55d86fe80",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 43600428,
        "transactionHash": "0x287c466f901e74f47bcac6e564e868fad082bacd31e6473da6cd3ee55d86fe80",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008daeba8cdfe06b0ddfb3c43473f11144b15a4075",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005337b8dca43b000000000000000000000000000000000000000000000000040eaa89e6e8624e600000000000000000000000000000000000000000000045fd9af00e228cfd57600000000000000000000000000000000000000000000000040e57522e0bbe13600000000000000000000000000000000000000000000045fd9b4345db69a1926",
        "logIndex": 65,
        "blockHash": "0xfa7bbe5c5e24db4f427e277be31c38811ad90d25ce11814d1291697b82afecf4"
      }
    ],
    "blockNumber": 43600428,
    "cumulativeGasUsed": "2718196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9ee104fcfcd04d9b2bb234e9d21b3747",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotAForwarder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RefundEthToPayer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dapp_\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig_\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"getPayer\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executeResult_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reqValue_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasConsumedEth_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preChargeEth_\",\"type\":\"uint256\"}],\"name\":\"postExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dapp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig_\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"ethChargeAmount_\",\"type\":\"uint256\"}],\"name\":\"preExecute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPayer(address,address,bytes4,uint256)\":{\"params\":{\"amount_\":\"The transaction amount.\",\"dapp_\":\"The Dapp's address.\",\"functionSig_\":\"The function signature (bytes4).\",\"user_\":\"The user's address.\"},\"returns\":{\"_0\":\"The payer's address.\"}},\"postExecute(address,bool,uint256,uint256,uint256)\":{\"details\":\"Executes a transaction and handles Zbyte-related operations.\",\"params\":{\"executeResult_\":\"A boolean indicating the success of the execution.\",\"gasConsumedEth_\":\"The amount of Ether consumed for gas during execution.\",\"payer_\":\"The address of the payer initiating the execution.\",\"preChargeEth_\":\"The amount of Ether charged before execution. This function can only be called by the `onlyForwarder` modifier.\",\"reqValue_\":\"The amount of Ether sent with the execution request.\"}},\"preExecute(address,address,bytes4,uint256)\":{\"params\":{\"dapp_\":\"The Dapp's address.\",\"ethChargeAmount_\":\"The Ether amount to charge.\",\"functionSig_\":\"The function signature (bytes4).\",\"user_\":\"The user's address.\"}}},\"title\":\"Zbyte DPlat Payment Facet\",\"version\":1},\"userdoc\":{\"errors\":{\"NotAForwarder()\":[{\"notice\":\"error (0x5ac85bab): Caller is not a forwarder\"}]},\"events\":{\"RefundEthToPayer(address,uint256)\":{\"notice\":\"eventsError(0x187e1a0c) Amount to be refund in terms of Eth to Payer.\"}},\"kind\":\"user\",\"methods\":{\"getPayer(address,address,bytes4,uint256)\":{\"notice\":\"Determines the payer for a transaction.\"},\"preExecute(address,address,bytes4,uint256)\":{\"notice\":\"Pre Execution (Finds the payer and charges in ZbyteVToken)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dplat/ZbyteDPlatDiamond/ZbyteDPlatPaymentFacet.sol\":\"ZbyteDPlatPaymentFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dplat/ZbyteDPlatDiamond/LibDPlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @notice Library for DPlat base storage and functions\\n/// @dev Library for DPlat base storage and functions\\nlibrary LibDPlatBase {\\n\\n    /// @notice Diamond storage for DPlat Base struct\\n    struct DiamondStorage {\\n        address zbyteVToken; \\n        address zbytePriceFeeder;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev zbyteVToken: The address of the ZbyteVToken\\\\\\n    ///  zbyteValueInNativeEthGwei: The value of Zbyte in native Ether (in Gwei)\\\\\\n    ///  zbyteBurnFactor: Burn factor, represents the percent of gas used that will be 'burnt'\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibDPlatBase.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    /// @notice Gets the ZbyteVToken address.\\n    /// @return The address of the ZbyteVToken.\\n    function _getZbyteVToken() internal view returns (address) {\\n        DiamondStorage storage _dsb = diamondStorage();\\n        return _dsb.zbyteVToken;\\n    }\\n\\n    function _getZbytePriceFeeder() internal view returns (address) {\\n        DiamondStorage storage _dsb = diamondStorage();\\n        return _dsb.zbytePriceFeeder;\\n    }\\n}\\n\\n/// @notice Library for DPlat registration storage and functions\\n/// @dev Library for DPlat registration storage and functions\\nlibrary LibDPlatRegistration {\\n\\n    /// @notice Diamond storage for DPlat registration struct\\n    struct DiamondStorage {\\n        mapping(bytes4 => address) registeredEnterprises;\\n        mapping(bytes4 => address) registeredEnterprisePolicy;\\n        mapping(address => bytes4) registeredDapps;\\n        mapping(address => bytes4) registeredEnterpriseUsers;\\n        mapping(bytes4 => uint256) enterpriseLimit;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev registeredEnterprises: Mapping of registered enterprises by bytes4 ID\\\\\\n    ///  registeredEnterprisePolicy: Mapping of enterprise policies by bytes4 ID\\\\\\n    ///  registeredDapps: Mapping of registered Dapps by address\\\\\\n    ///  registeredEnterpriseUsers: Mapping of registered enterprise users by address\\\\\\n    ///  enterpriseLimit: Mapping of enterprise limits by bytes4 ID\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibDPlatRegistration.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    /// @notice Gets the enterprise limit for a given enterprise ID.\\n    /// @param enterprise_ The enterprise ID.\\n    /// @return The enterprise limit.\\n    function _getEnterpriseLimit(bytes4 enterprise_) internal view returns (uint256) {\\n        DiamondStorage storage _dsp = diamondStorage();\\n        return _dsp.enterpriseLimit[enterprise_];\\n    }\\n\\n    /// @notice Sets the enterprise limit for a given enterprise ID.\\n    /// @param enterprise_ The enterprise ID.\\n    /// @param amount_ The limit amount to set.\\n    function _setEntepriseLimit(bytes4 enterprise_, uint256 amount_) internal {\\n        DiamondStorage storage _dsp = diamondStorage();\\n        _dsp.enterpriseLimit[enterprise_] = amount_;\\n    }\\n\\n    /// @notice Checks if an enterprise has a registered policy and retrieves the policy address.\\n    /// @param enterprise_ The enterprise ID.\\n    /// @return Enterprise payment policy address.\\n    function _doesEnterpriseHavePolicy(bytes4 enterprise_) internal view returns (address) {\\n        DiamondStorage storage _dsp = diamondStorage();\\n        return _dsp.registeredEnterprisePolicy[enterprise_];\\n    }\\n\\n    /// @notice Checks if the given provider is registered\\n    /// @param provider_ The provider address\\n    /// @return bool indicating if the provider is registered\\n    function isProviderRegistered(address provider_) internal view returns(bool) {\\n        LibDPlatProvider.DiamondStorage storage _dsp = LibDPlatProvider.diamondStorage();\\n        return _dsp.registeredProviders[provider_];\\n    }\\n\\n    /// @notice Checks if the given agent is registered\\n    /// @param agent_ The agent address\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isProviderAgentRegistered(address agent_) internal view returns(address) {\\n        LibDPlatProvider.DiamondStorage storage _dsp = LibDPlatProvider.diamondStorage();\\n        return _dsp.registeredProviderAgent[agent_];\\n    }\\n\\n    /// @notice Checks if the given enterprise is registered\\n    /// @param enterprise_ The enterprise bytes4 ID\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isEnterpriseRegistered(bytes4 enterprise_) internal view returns(address) {\\n        LibDPlatRegistration.DiamondStorage storage _dsr = LibDPlatRegistration.diamondStorage();\\n        return _dsr.registeredEnterprises[enterprise_];\\n    }\\n\\n    /// @notice Checks if the given user is registered with an enterprise\\n    /// @param user_ The user address\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isEnterpriseUserRegistered(address user_) internal view returns(bytes4) {\\n        LibDPlatRegistration.DiamondStorage storage _dsr = LibDPlatRegistration.diamondStorage();\\n        return _dsr.registeredEnterpriseUsers[user_];\\n    }\\n\\n    /// @notice Checks if the given dapp (contract) is registered with an enterprise\\n    /// @param dapp_ The contract address\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isEnterpriseDappRegistered(address dapp_) internal view returns(bytes4) {\\n        LibDPlatRegistration.DiamondStorage storage _dsr = LibDPlatRegistration.diamondStorage();\\n        return _dsr.registeredDapps[dapp_];\\n    }\\n}\\n\\n/// @notice Library for DPlat provider storage and functions\\n/// @dev Library for DPlat provider storage and functions\\nlibrary LibDPlatProvider {\\n\\n    /// @notice Diamond storage for DPlat provider struct\\n    struct DiamondStorage {\\n        mapping(address => bool) registeredProviders;\\n        mapping(address => address) registeredProviderAgent;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev registeredProviders: Mapping of registered providers by address\\\\\\n    ///  registeredProviderAgent: Mapping of registered provider agents by address\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibDPlatProvider.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb7db270a0cda23d4341a2a3f15c46c939a1d009cb297097fb554d526308164f6\",\"license\":\"MIT\"},\"contracts/dplat/ZbyteDPlatDiamond/ZbyteDPlatPaymentFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibDPlat.sol\\\";\\nimport \\\"../../utils/ZbyteContextDiamond.sol\\\";\\nimport \\\"../../interface/dplat/IEnterprisePaymentPolicy.sol\\\";\\nimport \\\"../../interface/dplat/IZbytePriceFeeder.sol\\\";\\nimport \\\"../ZbyteVToken.sol\\\";\\n\\n/// @title Zbyte DPlat Payment Facet\\ncontract ZbyteDPlatPaymentFacet is ZbyteContextDiamond {\\n\\n    /// events\\n    /// @notice Error(0x187e1a0c) Amount to be refund in terms of Eth to Payer.\\n    event RefundEthToPayer(address,uint256);\\n\\n    /// @notice Determines the payer for a transaction.\\n    /// @param user_ The user's address.\\n    /// @param dapp_ The Dapp's address.\\n    /// @param functionSig_ The function signature (bytes4).\\n    /// @param amount_ The transaction amount.\\n    /// @return The payer's address.\\n    function getPayer(address user_, address dapp_, bytes4 functionSig_, uint256 amount_) public view returns (bytes4, uint256, address) {\\n        bytes4 _dappEnterprise = LibDPlatRegistration.isEnterpriseDappRegistered(dapp_);\\n\\n        if (_dappEnterprise != bytes4(0)) {\\n            address _enterpriseProvider = LibDPlatRegistration.isEnterpriseRegistered(_dappEnterprise);\\n            if (_enterpriseProvider != address(0) && LibDPlatRegistration.isProviderRegistered(_enterpriseProvider)) {\\n                uint256 _enterpriseLimit = LibDPlatRegistration._getEnterpriseLimit(_dappEnterprise);\\n                address _enterprisePolicy = LibDPlatRegistration._doesEnterpriseHavePolicy(_dappEnterprise);\\n\\n                if (_enterpriseLimit > amount_) {\\n                    if (_enterprisePolicy != address(0)) {\\n                        bool _willEnterprisePay = IEnterprisePaymentPolicy(_enterprisePolicy).isUserOrDappEligibleForPayment(user_, dapp_, functionSig_, amount_);\\n                        if (_willEnterprisePay) {\\n                            return (_dappEnterprise, _enterpriseLimit, _enterpriseProvider);\\n                        }\\n                    } else {\\n                        return (_dappEnterprise, _enterpriseLimit, _enterpriseProvider);\\n\\n                    }\\n                }\\n            }\\n        }\\n\\n        bytes4 _userEnterprise = LibDPlatRegistration.isEnterpriseUserRegistered(user_);\\n        if (_userEnterprise != bytes4(0) && _userEnterprise != _dappEnterprise) {\\n\\n            address _enterpriseProvider = LibDPlatRegistration.isEnterpriseRegistered(_userEnterprise); \\n            if (_enterpriseProvider != address(0) && LibDPlatRegistration.isProviderRegistered(_enterpriseProvider)) {\\n\\n                uint256 _enterpriseLimit = LibDPlatRegistration._getEnterpriseLimit(_userEnterprise);\\n                address _enterprisePolicy = LibDPlatRegistration._doesEnterpriseHavePolicy(_userEnterprise);\\n\\n                if (_enterpriseLimit > amount_) {\\n                    if (_enterprisePolicy != address(0)) {\\n                        bool _willEnterprisePay = IEnterprisePaymentPolicy(_enterprisePolicy).isUserOrDappEligibleForPayment(user_, dapp_, functionSig_, amount_);\\n                        if (_willEnterprisePay) {\\n                            return (_userEnterprise, _enterpriseLimit, _enterpriseProvider);\\n                        }\\n                    } else {\\n                        return (_userEnterprise, _enterpriseLimit, _enterpriseProvider);\\n                    }\\n                }\\n            }\\n        }\\n        return (bytes4(0), uint256(0), user_);\\n    }\\n\\n    /// @notice Pre Execution (Finds the payer and charges in ZbyteVToken)\\n    /// @param dapp_ The Dapp's address.\\n    /// @param user_ The user's address.\\n    /// @param functionSig_ The function signature (bytes4).\\n    /// @param ethChargeAmount_ The Ether amount to charge.\\n    function preExecute(\\n        address dapp_,\\n        address user_,\\n        bytes4 functionSig_,\\n        uint256 ethChargeAmount_\\n    ) public onlyForwarder returns(address) {\\n        bytes4 _payerEnterprise;\\n        uint256 _currentEnterpriseLimit;\\n        address _payer;\\n        LibDPlatBase.DiamondStorage storage _dsb = LibDPlatBase.diamondStorage();\\n        uint256 _zbyteCharge = IZbytePriceFeeder(_dsb.zbytePriceFeeder).convertEthToEquivalentZbyte(ethChargeAmount_);\\n        (_payerEnterprise, _currentEnterpriseLimit, _payer) = getPayer(user_, dapp_, functionSig_, _zbyteCharge);\\n\\n        if(_payerEnterprise != bytes4(0)) {\\n            address _enterprisePolicy = LibDPlatRegistration._doesEnterpriseHavePolicy(_payerEnterprise);\\n            if(_enterprisePolicy != address(0)) {\\n                IEnterprisePaymentPolicy(_enterprisePolicy).updateEnterpriseEligibility(user_, dapp_, functionSig_, _zbyteCharge);\\n            }\\n            LibDPlatRegistration._setEntepriseLimit(_payerEnterprise, _currentEnterpriseLimit - _zbyteCharge);\\n        }\\n        if(_zbyteCharge != 0)\\n            ZbyteVToken(payable(_dsb.zbyteVToken)).transferFrom(_payer, msg.sender, _zbyteCharge);\\n        return _payer;\\n    }\\n\\n\\n    /// @dev Executes a transaction and handles Zbyte-related operations.\\n    ///\\n    /// @param payer_ The address of the payer initiating the execution.\\n    /// @param executeResult_ A boolean indicating the success of the execution.\\n    /// @param reqValue_ The amount of Ether sent with the execution request.\\n    /// @param gasConsumedEth_ The amount of Ether consumed for gas during execution.\\n    /// @param preChargeEth_ The amount of Ether charged before execution.\\n    ///\\n    /// This function can only be called by the `onlyForwarder` modifier.\\n    function postExecute(address payer_,\\n                         bool executeResult_,\\n                         uint256 reqValue_,\\n                         uint256 gasConsumedEth_,\\n                         uint256 preChargeEth_) public onlyForwarder {\\n        LibDPlatBase.DiamondStorage storage _dsb = LibDPlatBase.diamondStorage();\\n        uint256 _zbyteBurn = IZbytePriceFeeder(_dsb.zbytePriceFeeder).getBurnAmountInZbyte();\\n\\n        // Execute was successfull, also consider eth sent to execute request\\n        if (executeResult_) {\\n            gasConsumedEth_ += reqValue_;\\n        }       \\n        uint256 _chargeEth = gasConsumedEth_ > preChargeEth_ ? gasConsumedEth_ - preChargeEth_ : 0;\\n        uint256 _refundEth = gasConsumedEth_ > preChargeEth_ ? 0 : preChargeEth_ - gasConsumedEth_;\\n\\n        uint256 _zbyteCharge = IZbytePriceFeeder(_dsb.zbytePriceFeeder).convertEthToEquivalentZbyte(_chargeEth);\\n\\n        if(_zbyteCharge != 0)\\n            ZbyteVToken(payable(_dsb.zbyteVToken)).transferFrom(payer_, msg.sender, _zbyteCharge);\\n        if(_zbyteBurn != 0)\\n            ZbyteVToken(payable(_dsb.zbyteVToken)).burn(payer_, _zbyteBurn);\\n\\n        emit RefundEthToPayer(payer_, _refundEth);\\n    }\\n}\\n\",\"keccak256\":\"0x47d841159310f85430bd029920f775772217a014145efbf44151a5eef63356f8\",\"license\":\"MIT\"},\"contracts/dplat/ZbyteVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../interface/dplat/IvERC20.sol\\\";\\nimport \\\"../utils/Auth.sol\\\";\\n\\n/// @title The ZBYT vERC20 contract\\n/// @dev The ZBYT vERC20 contract\\ncontract ZbyteVToken is Ownable, Pausable, ERC20, AuthSimple, IvERC20 {\\n    // errors\\n    /// @notice error (0xd92e233d): Address is address(0)\\n    error ZeroAddress();\\n    /// @notice error (0xbf064619): Contract cannot receive ether\\n    error CannotSendEther();\\n    /// @notice error (b034fa06): The address sent for destroy is not valid\\n    error InvalidDestroyAddress(address,address,address);\\n\\n    // events\\n    /// @notice event (0xa16990bf) Paymaster address is set\\n    event PaymasterAddressSet(address);\\n    /// @notice event (0xcdb1d336) ZbyteDPlat address is set\\n    event ZbyteDPlatAddressSet(address);\\n\\n    // Address to transfer 'burnt' tokens\\n    address private burner;\\n    // Address of the paymaster (forwarder) address\\n    address private paymaster;\\n    // Address of the DPlat contract\\n    address private dplat;\\n\\n    /// @notice ZBYT ERC20 constructor\\n    /// @param burner_ Burn account address (Tokens are locked here, not destroyed)\\n    constructor(address burner_) ERC20(\\\"vZbyte\\\", \\\"vZBYT\\\") {\\n        burner = burner_;\\n    }\\n\\n    /// @notice Pauses the contract (mint, transfer and burn operations are paused)\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the paused contract\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @notice Set the paymaster (forwarder) address\\n    /// @param paymaster_ Paymaster contract address\\n    function setPaymasterAddress(address paymaster_) public onlyOwner {\\n        if(paymaster_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        paymaster = paymaster_;\\n\\n        emit PaymasterAddressSet(paymaster_);\\n    }\\n\\n    /// @notice Set the DPlat address\\n    /// @param dplat_ DPlat contract address\\n    function setZbyteDPlatAddress(address dplat_) public onlyOwner {\\n        if(dplat_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        dplat = dplat_;\\n\\n        emit ZbyteDPlatAddressSet(dplat_);\\n    }\\n\\n    /// @notice Transfer vERC20 from caller's account to receiver's account\\n    /// @param to_ Receiver account address\\n    /// @param value_ Amount of tokens to be transferred\\n    /// @dev requiresAuth ensures that this call can be complely disabled, or only specific accounts can call\\n    function transfer(address to_, uint256 value_)\\n        public override(IERC20, ERC20)\\n        requiresAuth whenNotPaused\\n        returns (bool) {\\n        ERC20.transfer(to_, value_);\\n        return true;\\n    }\\n\\n    /// @notice Transfers tokens from a specified address to another address.\\n    /// @param from_ The address to transfer tokens from\\n    /// @param to_ The address to transfer tokens to\\n    /// @param value_ The amount of tokens to transfer\\n    /// @dev requiresAuth ensures that this call can be complely disabled, or only specific accounts can call\\n    ///  Allowing only specific accounts to perform transferFrom allows controlled transfer of vERC20 in future\\n    function transferFrom(address from_, address to_, uint256 value_)\\n        public override(IERC20, ERC20)\\n        requiresAuth whenNotPaused\\n        returns (bool) {\\n        ERC20.transferFrom(from_, to_, value_);\\n        return true;\\n    }\\n\\n    /// @notice mint vZBYT ERC20\\n    /// @param to_ Receiver address\\n    /// @param amount_ Amount to mint to the address(to_) and approve to dplat\\n    /// @dev The forwarder charges user in this ERC20 token for the contract call.  Approve the tokens to dplat at mint itself.\\n    function mint(address to_, uint256 amount_)\\n        external\\n        requiresAuth whenNotPaused\\n        returns(uint256) {\\n        if(dplat == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        ERC20._mint(to_, amount_);\\n        uint256 _allowance = ERC20.allowance(to_, dplat);\\n        ERC20._approve(to_, dplat, _allowance + amount_);\\n        return amount_;\\n    }\\n\\n    /// @notice Transfer vERC20 to 'burner' address\\n    /// @param from_ Sender address to burn tokens from\\n    /// @param amount_ Amount to burn\\n    /// @dev requiresAuth ensures that this call can be complely disabled, or only specific accounts can call\\n    function burn(address from_, uint256 amount_) external\\n        requiresAuth whenNotPaused\\n        returns(uint256) {\\n        _transfer(from_, burner, amount_);\\n        return amount_;\\n    }\\n\\n    /// @notice Destroy vERC20\\n    /// @param from_ Paymaster/burner address from which tokens are destroyed\\n    /// @dev This is called during withdraw / reconciliation only.  Withdraw is allowed only from the paymaster or burner address\\n    function destroy(address from_)\\n        external\\n        requiresAuth whenNotPaused\\n        returns(uint256) {\\n        uint256 _amount = this.balanceOf(from_);\\n        _burn(from_, _amount);\\n        return _amount;\\n    }\\n\\n    /// @notice receive function (reverts)\\n    receive() external payable {\\n       revert CannotSendEther();\\n    }\\n}\\n\",\"keccak256\":\"0x455fecab03547bed1e7277f9facab4095ca96346cf0872b65a24f4489ba21a0c\",\"license\":\"MIT\"},\"contracts/interface/dplat/IEnterprisePaymentPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\ninterface IEnterprisePaymentPolicy {\\n    function isUserOrDappEligibleForPayment(address user_, address dapp_, bytes4 functionSig_, uint256 amount_) external view returns(bool);\\n    function updateEnterpriseEligibility(address user_, address dapp_, bytes4 functionSig_, uint256 amount_) external returns(bool);}\",\"keccak256\":\"0x03a6641337503a16ba901afaf12b3f4dec85846baff7d4d1d143125da6d4e89b\",\"license\":\"MIT\"},\"contracts/interface/dplat/IZbytePriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title IZbytePriceFeeder\\n/// @notice Interface for Zbyte price feeder, defining functions for gas cost conversion and retrieval.\\ninterface IZbytePriceFeeder {\\n    /// @notice Event emitted when the equivalent Zbyte price for native ETH is set.\\n    event NativeEthEquivalentZbyteSet(uint256 nativeEthEquivalentZbyteInGwei);\\n\\n    /// @notice Event emitted when the Zbyte price in Gwei is set.\\n    event ZbytePriceInGweiSet(uint256 zbytePriceInGwei);\\n\\n    /// @notice Event emitted when the gas cost for approve and deposit operation is set.\\n    event ApproveAndDepositGasCostSet(uint256 relay, uint256 remoteChainId, uint256 gasCost);\\n\\n    /// @notice Event emitted when the burn rate is set.\\n    event BurnRateInMillSet(uint256);\\n\\n    /// @notice Converts eth to equivalent Zbyte amount.\\n    /// @param ethAmount_ Amount of eth.\\n    /// @return Equivalent Amount of zbyte.\\n    function convertEthToEquivalentZbyte(uint256 ethAmount_) external view returns (uint256);\\n\\n    /// @notice Converts price in millionths to Zbyte amount.\\n    /// @param priceInMill_ Price in millionths.\\n    /// @return Equivalent Zbyte amount.\\n    function convertMillToZbyte(uint256 priceInMill_) external view returns (uint256);\\n\\n    /// @notice Retrieves the gas cost for approve and deposit operation converted to Zbyte.\\n    /// @param relay_ The relay identifier.\\n    /// @param remoteChainId_ The remote chain identifier.\\n    /// @return Equivalent Zbyte gas cost.\\n    function getApproveAndDepositGasCostInZbyte(uint256 relay_, uint256 remoteChainId_) external view returns (uint256);\\n\\n    /// @notice Returns equivalent amount of Zbyte to burn.\\n    /// @return Equivalent amount of Zbyte to burn.\\n    function getBurnAmountInZbyte() external view returns(uint256);\\n}\",\"keccak256\":\"0xc8c8d652e4e1c5d873f4a4976f9f31b1417161458476fc3249c1f18a8c1e5d7b\",\"license\":\"MIT\"},\"contracts/interface/dplat/IvERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IvERC20\\n * @dev Interface for a contract representing a variation of the ERC20 token.\\n */\\ninterface IvERC20 is IERC20 {\\n    \\n    /**\\n     * @dev Burns a specified amount of tokens by transferring them to the specified address.\\n     * @param to The address to which the tokens will be burned.\\n     * @param amount The amount of tokens to be burned.\\n     */\\n    function burn(address to, uint256 amount) external returns(uint256);\\n    \\n    /**\\n     * @dev Mints a specified amount of tokens and transfers them to the specified address.\\n     * @param to The address to which the tokens will be minted and transferred.\\n     * @param amount The amount of tokens to be minted.\\n     */\\n    function mint(address to, uint256 amount) external returns(uint256);\\n}\",\"keccak256\":\"0x700349f95f2ec93a4d6d2407cddbe044893c10a078a239eb969a2ec41390c732\",\"license\":\"MIT\"},\"contracts/utils/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n// Ref: https://github.com/transmissions11/solmate/tree/main/src/auth\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Auth controls\\nabstract contract Auth {\\n    /* \\n        //in the contract that imports LibAuth\\n        modifier requiresAuth {\\n            require(LibAuth.isAuthorized(user,fnSig) == true)\\n            _;\\n        }\\n        modifier requiresAuthOrOwner {\\n            require(msg.sender == owner || LibAuth.isAuthorized(user,fnSig))\\n            _;\\n        }\\n\\n        transferOwnership() {\\n            should call LibAuth.setOwner(newOwner);\\n        }\\n    */\\n\\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\\n    event PublicCapabilityUpdated(bytes4 indexed functionSig, bool enabled);\\n    event RoleCapabilityUpdated(uint8 indexed role, bytes4 indexed functionSig, bool enabled);\\n\\n    struct DiamondStorage {\\n        mapping(address => bytes32) getUserRoles;\\n        mapping(bytes4 => bool) isCapabilityPublic;\\n        mapping(bytes4 => bytes32) getRolesWithCapability;\\n    }\\n\\n    function diamondStorage() internal pure returns(DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibAuth.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    function getOwner() public virtual returns(address) {\\n    }\\n\\n    function doesUserHaveRole(address user, uint8 role) public view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return (uint256(ds.getUserRoles[user]) >> role) & 1 != 0;\\n    }\\n\\n    function doesRoleHaveCapability(\\n        uint8 role,\\n        bytes4 functionSig\\n    ) public view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return (uint256(ds.getRolesWithCapability[functionSig]) >> role) & 1 != 0;\\n    }\\n\\n    function canCall(\\n        address user,\\n        bytes4 functionSig\\n    ) public view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return\\n            ds.isCapabilityPublic[functionSig] ||\\n            bytes32(0) != ds.getUserRoles[user] & ds.getRolesWithCapability[functionSig];\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view returns (bool) {\\n        return canCall(user, functionSig);\\n    }\\n\\n    function isAuthorizedOrOwner(address user, bytes4 functionSig) internal returns (bool) {\\n        return canCall(user, functionSig) || user == getOwner();\\n    }\\n\\n    modifier requiresAuth {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    modifier requiresAuthOrOwner {\\n        require(isAuthorizedOrOwner(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setPublicCapability(\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public requiresAuthOrOwner {\\n        DiamondStorage storage ds = diamondStorage();\\n        ds.isCapabilityPublic[functionSig] = enabled;\\n\\n        emit PublicCapabilityUpdated(functionSig, enabled);\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public requiresAuthOrOwner {\\n        DiamondStorage storage ds = diamondStorage();\\n        if (enabled) {\\n            ds.getRolesWithCapability[functionSig] |= bytes32(1 << role);\\n        } else {\\n            ds.getRolesWithCapability[functionSig] &= ~bytes32(1 << role);\\n        }\\n\\n        emit RoleCapabilityUpdated(role, functionSig, enabled);\\n    }\\n\\n    function setUserRole(\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) public requiresAuthOrOwner {\\n        DiamondStorage storage ds = diamondStorage();\\n        if (enabled) {\\n            ds.getUserRoles[user] |= bytes32(1 << role);\\n        } else {\\n            ds.getUserRoles[user] &= ~bytes32(1 << role);\\n        }\\n\\n        emit UserRoleUpdated(user, role, enabled);\\n    }\\n}\\n\\nabstract contract AuthDiamond is Auth {\\n    function getOwner() public virtual override returns(address) {\\n        return LibDiamond.diamondStorage().contractOwner;\\n    }\\n}\\n\\nabstract contract AuthSimple is Auth, Ownable {\\n    function getOwner() public virtual override returns(address) {\\n        return owner();\\n    }\\n}\",\"keccak256\":\"0xed01364cd092823be3a2cf6ccf871035b62290e6d7a3cd85ce40f7ee3b69fcab\",\"license\":\"MIT\"},\"contracts/utils/LibZbyteForwarderFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\n\\n/// @notice The Zbyte Forwarder Facet\\n/// @dev The Zbyte Forwarder Facet\\nlibrary LibZbyteForwarderFacet {\\n\\n    /// @notice Diamond storage for DPlat registration struct\\n    struct DiamondStorage {\\n        address trustedForwarder;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev trustedForwarder: Address of the trusted forwarder\\n    function diamondStorage() internal pure returns(DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibZbyteForwarderFacet.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    /// @notice Sets the address of trusted forwarder\\n    /// @param forwarder_: Address of the trusted forwarder\\n    function _setTrustedForwarder(address forwarder_) internal {\\n        LibDiamond.enforceIsContractOwner();\\n        DiamondStorage storage dsc = diamondStorage();\\n        dsc.trustedForwarder = forwarder_;\\n    }\\n\\n    /// @notice Gets the address of trusted forwarder\\n    function _getTrustedForwarder() internal view returns(address) {\\n        DiamondStorage storage dsc = diamondStorage();\\n        return dsc.trustedForwarder;\\n    }\\n\\n    /// @notice Checks if the given forwarder is the trusted forwarder\\n    /// @param forwarder_: Address of the forwarder to check\\n    function isTrustedForwarder(address forwarder_) internal view returns(bool) {\\n        DiamondStorage storage dsc = diamondStorage();\\n        return forwarder_ == dsc.trustedForwarder;\\n    }\\n}\",\"keccak256\":\"0x046f66cd93dfb0106178dea0021caab2112b4fe405634753c433ef0b2d4722e4\",\"license\":\"MIT\"},\"contracts/utils/ZbyteContextDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./LibZbyteForwarderFacet.sol\\\";\\n\\ncontract ZbyteContextDiamond {\\n    /// @notice error (0x5ac85bab): Caller is not a forwarder\\n    error NotAForwarder();\\n\\n    /// @notice modifier to enforce that the caller is the owner\\n    modifier onlyOwner {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    /// @notice modifier to enforce that the caller is the forwarder\\n    modifier onlyForwarder {\\n        if(LibZbyteForwarderFacet.isTrustedForwarder(_msgSender())) revert NotAForwarder();\\n        _;\\n    }\\n\\n    /// @notice Extract true caller if called via trusted forwarder\\n    function _msgSender() internal view returns (address ret) {\\n        if (msg.data.length >= 20 && LibZbyteForwarderFacet.isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @notice Extract data if called via trusted forwarder\\n    function _msgData() internal view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && LibZbyteForwarderFacet.isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\",\"keccak256\":\"0x75604132530d5762cb3372036cef4627656a690690da7eb7d9628a3cd244ab5f\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610c1f908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b6000803560e01c80630b9c414a146106935780636fab9c02146103385763b8e615281461004057600080fd5b346103355761004e366106e0565b61005e9693969592949195610b96565b7f580a56aff4c8445faf8644f12c3b0f5d37fcb3a8e0a0f9b1b360da94678271dd546001600160a01b03969187169087161461032557857f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc308354169785519889936318f498e760e31b85528685015283602460209b8c935afa92831561031b57908993929185936102e3575b506100f6838a838561077f565b9a6001600160e01b031990921693909290846101d0575b505050505080610123575b505050505191168152f35b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30825485516323b872dd60e01b81526001600160a01b03891695810195865233602087015260408601929092529093849187169082908590829060600103925af19081156101c55750610198575b808581610118565b6101b790853d87116101be575b6101af818361072f565b810190610767565b5038610190565b503d6101a5565b8351903d90823e3d90fd5b8488527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c687528a8a8920541690888a8c8461024b575b505050505050508261021791610b73565b9084527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c9835285842055388080808061010d565b516308e7530360e31b81526001600160a01b039384169181019182529290941660208501526001600160e01b0319909416604084015260608301879052959694959394928492839190829060800103925af180156102d95793809392610217928c966102bc575b8193888a8c610206565b6102d290873d89116101be576101af818361072f565b50386102b2565b87513d87823e3d90fd5b809293508491943d8311610314575b6102fc818361072f565b8101031261031057908892915191386100e9565b8380fd5b503d6102f2565b86513d86823e3d90fd5b8451635ac85bab60e01b81528490fd5b80fd5b509190346105f25760a03660031901126105f2576001600160a01b0390803590828216820361068f5760243590811515820361066b57606435906084359461037e610b96565b81807f580a56aff4c8445faf8644f12c3b0f5d37fcb3a8e0a0f9b1b360da94678271dd54169116146106805787908396817f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3083541690895195630117739d60e21b875260209788888881875afa978815610676578698610643575b50610613575b508087918a11998a60001461060c576104178282610b73565b9a5b156105fd57505083985b60248b51809481936318f498e760e31b8352898301525afa9081156105c25783916105cc575b508581610535575b505083610498575b5086516001600160a01b0386168152602081018790527f187e1a0cf55d4b70d797cc588600ee4a45aa05f13b7eda5c690187c8d209367190604090a180f35b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3082548851632770a7eb60e21b81526001600160a01b03881694810194855260208501959095528593859390849003604001928492165af1801561052b57610502575b808681610459565b813d8311610524575b610515818361072f565b810103126103105738806104fa565b503d61050b565b85513d88823e3d90fd5b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3082548a516323b872dd60e01b81526001600160a01b038a16878201908152336020820152604081019490945292839185169082908790829060600103925af180156105c2576105a5575b85610451565b6105bb90863d88116101be576101af818361072f565b503861059f565b89513d85823e3d90fd5b90508581813d83116105f6575b6105e3818361072f565b810103126105f2575138610449565b8280fd5b503d6105d9565b61060691610b73565b98610423565b859a610419565b9192935097506044358101809111610630579689929190866103fe565b634e487b7160e01b8a526011845260248afd5b9097508881813d831161066f575b61065b818361072f565b8101031261066b575196386103f8565b8580fd5b503d610651565b8c513d88823e3d90fd5b508551635ac85bab60e01b8152fd5b8480fd5b5082346106dc576060906106b26106a9366106e0565b9291909161077f565b83516001600160e01b0319909316835260208301919091526001600160a01b031691810191909152f35b5080fd5b608090600319011261072a576001600160a01b0390600435828116810361072a5791602435908116810361072a57906044356001600160e01b03198116810361072a579060643590565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761075157604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261072a5751801515810361072a5790565b92939160018060a01b039160009583821687526020907fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c782526040918289205460e01b9463ffffffff60e01b948a86881697886109c6575b5050878a168b527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c88352848b205460e01b9586169687151590816109bb575b50610829575b5050505050505050829190565b868b527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c5835287858c205416968715158061097a575b61086a575b5061081c565b8b527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c98352848b2054977fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c68452858c205416908489111561086457811561096a578551630b4c676760e11b81526001600160a01b038c811660048301529190911660248201526001600160e01b03199290921660448301526064820193909352918190839060849082905afa92831561096157508892610944575b505061093c57505050388080808080808080610864565b945090925090565b61095a9250803d106101be576101af818361072f565b3880610925565b513d8a823e3d90fd5b5050505050509194509250929190565b506001600160a01b03881660009081527f96806dd98d766f67e82444fc94615c2d202c6291c29cb3f12d9f396f091d960a602052604090205460ff1661085f565b905087141538610816565b8882527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c585528987832054169081151580610b32575b610a07575b506107d7565b8983527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c986528a8880852054947fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c68952205416878411610a6b575b508d9250610a01565b8015610b2057878f918f8991888a92610ac58f5196879586948594630b4c676760e11b8652600486019092606092959493608083019660018060a01b03809216845216602083015263ffffffff60e01b1660408201520152565b03915afa918215610b155791610af8575b50610ae75750505038808080610a62565b9c50909a5098975050505050505050565b610b0f9150873d89116101be576101af818361072f565b38610ad6565b8a51903d90823e3d90fd5b509c50909a5098975050505050505050565b506001600160a01b03821660009081527f96806dd98d766f67e82444fc94615c2d202c6291c29cb3f12d9f396f091d960a602052604090205460ff166109fc565b91908203918211610b8057565b634e487b7160e01b600052601160045260246000fd5b601436101580610bb6575b15610bb25736601319013560601c90565b3390565b507f580a56aff4c8445faf8644f12c3b0f5d37fcb3a8e0a0f9b1b360da94678271dd546001600160a01b03163314610ba156fea2646970667358221220711a4dbc57d3f074ba3766a12ce7462d0e1c32b1e8eaafb261ae0b055bd70efc64736f6c63430008110033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b6000803560e01c80630b9c414a146106935780636fab9c02146103385763b8e615281461004057600080fd5b346103355761004e366106e0565b61005e9693969592949195610b96565b7f580a56aff4c8445faf8644f12c3b0f5d37fcb3a8e0a0f9b1b360da94678271dd546001600160a01b03969187169087161461032557857f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc308354169785519889936318f498e760e31b85528685015283602460209b8c935afa92831561031b57908993929185936102e3575b506100f6838a838561077f565b9a6001600160e01b031990921693909290846101d0575b505050505080610123575b505050505191168152f35b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30825485516323b872dd60e01b81526001600160a01b03891695810195865233602087015260408601929092529093849187169082908590829060600103925af19081156101c55750610198575b808581610118565b6101b790853d87116101be575b6101af818361072f565b810190610767565b5038610190565b503d6101a5565b8351903d90823e3d90fd5b8488527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c687528a8a8920541690888a8c8461024b575b505050505050508261021791610b73565b9084527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c9835285842055388080808061010d565b516308e7530360e31b81526001600160a01b039384169181019182529290941660208501526001600160e01b0319909416604084015260608301879052959694959394928492839190829060800103925af180156102d95793809392610217928c966102bc575b8193888a8c610206565b6102d290873d89116101be576101af818361072f565b50386102b2565b87513d87823e3d90fd5b809293508491943d8311610314575b6102fc818361072f565b8101031261031057908892915191386100e9565b8380fd5b503d6102f2565b86513d86823e3d90fd5b8451635ac85bab60e01b81528490fd5b80fd5b509190346105f25760a03660031901126105f2576001600160a01b0390803590828216820361068f5760243590811515820361066b57606435906084359461037e610b96565b81807f580a56aff4c8445faf8644f12c3b0f5d37fcb3a8e0a0f9b1b360da94678271dd54169116146106805787908396817f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3083541690895195630117739d60e21b875260209788888881875afa978815610676578698610643575b50610613575b508087918a11998a60001461060c576104178282610b73565b9a5b156105fd57505083985b60248b51809481936318f498e760e31b8352898301525afa9081156105c25783916105cc575b508581610535575b505083610498575b5086516001600160a01b0386168152602081018790527f187e1a0cf55d4b70d797cc588600ee4a45aa05f13b7eda5c690187c8d209367190604090a180f35b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3082548851632770a7eb60e21b81526001600160a01b03881694810194855260208501959095528593859390849003604001928492165af1801561052b57610502575b808681610459565b813d8311610524575b610515818361072f565b810103126103105738806104fa565b503d61050b565b85513d88823e3d90fd5b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3082548a516323b872dd60e01b81526001600160a01b038a16878201908152336020820152604081019490945292839185169082908790829060600103925af180156105c2576105a5575b85610451565b6105bb90863d88116101be576101af818361072f565b503861059f565b89513d85823e3d90fd5b90508581813d83116105f6575b6105e3818361072f565b810103126105f2575138610449565b8280fd5b503d6105d9565b61060691610b73565b98610423565b859a610419565b9192935097506044358101809111610630579689929190866103fe565b634e487b7160e01b8a526011845260248afd5b9097508881813d831161066f575b61065b818361072f565b8101031261066b575196386103f8565b8580fd5b503d610651565b8c513d88823e3d90fd5b508551635ac85bab60e01b8152fd5b8480fd5b5082346106dc576060906106b26106a9366106e0565b9291909161077f565b83516001600160e01b0319909316835260208301919091526001600160a01b031691810191909152f35b5080fd5b608090600319011261072a576001600160a01b0390600435828116810361072a5791602435908116810361072a57906044356001600160e01b03198116810361072a579060643590565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761075157604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261072a5751801515810361072a5790565b92939160018060a01b039160009583821687526020907fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c782526040918289205460e01b9463ffffffff60e01b948a86881697886109c6575b5050878a168b527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c88352848b205460e01b9586169687151590816109bb575b50610829575b5050505050505050829190565b868b527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c5835287858c205416968715158061097a575b61086a575b5061081c565b8b527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c98352848b2054977fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c68452858c205416908489111561086457811561096a578551630b4c676760e11b81526001600160a01b038c811660048301529190911660248201526001600160e01b03199290921660448301526064820193909352918190839060849082905afa92831561096157508892610944575b505061093c57505050388080808080808080610864565b945090925090565b61095a9250803d106101be576101af818361072f565b3880610925565b513d8a823e3d90fd5b5050505050509194509250929190565b506001600160a01b03881660009081527f96806dd98d766f67e82444fc94615c2d202c6291c29cb3f12d9f396f091d960a602052604090205460ff1661085f565b905087141538610816565b8882527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c585528987832054169081151580610b32575b610a07575b506107d7565b8983527fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c986528a8880852054947fbd11ea486bc2027fd35886fb74ddac0d047d847fe642609550f64c01bbda08c68952205416878411610a6b575b508d9250610a01565b8015610b2057878f918f8991888a92610ac58f5196879586948594630b4c676760e11b8652600486019092606092959493608083019660018060a01b03809216845216602083015263ffffffff60e01b1660408201520152565b03915afa918215610b155791610af8575b50610ae75750505038808080610a62565b9c50909a5098975050505050505050565b610b0f9150873d89116101be576101af818361072f565b38610ad6565b8a51903d90823e3d90fd5b509c50909a5098975050505050505050565b506001600160a01b03821660009081527f96806dd98d766f67e82444fc94615c2d202c6291c29cb3f12d9f396f091d960a602052604090205460ff166109fc565b91908203918211610b8057565b634e487b7160e01b600052601160045260246000fd5b601436101580610bb6575b15610bb25736601319013560601c90565b3390565b507f580a56aff4c8445faf8644f12c3b0f5d37fcb3a8e0a0f9b1b360da94678271dd546001600160a01b03163314610ba156fea2646970667358221220711a4dbc57d3f074ba3766a12ce7462d0e1c32b1e8eaafb261ae0b055bd70efc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPayer(address,address,bytes4,uint256)": {
        "params": {
          "amount_": "The transaction amount.",
          "dapp_": "The Dapp's address.",
          "functionSig_": "The function signature (bytes4).",
          "user_": "The user's address."
        },
        "returns": {
          "_0": "The payer's address."
        }
      },
      "postExecute(address,bool,uint256,uint256,uint256)": {
        "details": "Executes a transaction and handles Zbyte-related operations.",
        "params": {
          "executeResult_": "A boolean indicating the success of the execution.",
          "gasConsumedEth_": "The amount of Ether consumed for gas during execution.",
          "payer_": "The address of the payer initiating the execution.",
          "preChargeEth_": "The amount of Ether charged before execution. This function can only be called by the `onlyForwarder` modifier.",
          "reqValue_": "The amount of Ether sent with the execution request."
        }
      },
      "preExecute(address,address,bytes4,uint256)": {
        "params": {
          "dapp_": "The Dapp's address.",
          "ethChargeAmount_": "The Ether amount to charge.",
          "functionSig_": "The function signature (bytes4).",
          "user_": "The user's address."
        }
      }
    },
    "title": "Zbyte DPlat Payment Facet",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotAForwarder()": [
        {
          "notice": "error (0x5ac85bab): Caller is not a forwarder"
        }
      ]
    },
    "events": {
      "RefundEthToPayer(address,uint256)": {
        "notice": "eventsError(0x187e1a0c) Amount to be refund in terms of Eth to Payer."
      }
    },
    "kind": "user",
    "methods": {
      "getPayer(address,address,bytes4,uint256)": {
        "notice": "Determines the payer for a transaction."
      },
      "preExecute(address,address,bytes4,uint256)": {
        "notice": "Pre Execution (Finds the payer and charges in ZbyteVToken)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}