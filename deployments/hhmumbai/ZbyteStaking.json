{
  "address": "0x561f52dD6c3f8b612123eff7E8a0e9Bd465dFdC5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotSendEther",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalf",
          "type": "address"
        }
      ],
      "name": "stakeOnBehalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a9f46593e0cadf20cf5bebcc15954841a8fa8c39e76d2c67da0cea8de9d0454",
  "receipt": {
    "to": null,
    "from": "0x8DAEBA8cdfe06B0ddFb3c43473F11144B15A4075",
    "contractAddress": "0x561f52dD6c3f8b612123eff7E8a0e9Bd465dFdC5",
    "transactionIndex": 0,
    "gasUsed": "1353316",
    "logsBloom": "0x
    "blockHash": "0xeae00abe95d048b2a37416499e5c8d26a162d373798d6b6d72cbc385f4b36989",
    "transactionHash": "0x2a9f46593e0cadf20cf5bebcc15954841a8fa8c39e76d2c67da0cea8de9d0454",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 44654613,
        "transactionHash": "0x2a9f46593e0cadf20cf5bebcc15954841a8fa8c39e76d2c67da0cea8de9d0454",
        "address": "0x561f52dD6c3f8b612123eff7E8a0e9Bd465dFdC5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008daeba8cdfe06b0ddfb3c43473f11144b15a4075"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xeae00abe95d048b2a37416499e5c8d26a162d373798d6b6d72cbc385f4b36989"
      }
    ],
    "blockNumber": 44654613,
    "cumulativeGasUsed": "1353316",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeDb606EE3B435d6B2122D90253cbE173938E526b",
    "0x4B264551eD876a822430CB99A9A7a2da723a3078"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f853128543a6a05cfb5677c81af0201",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSendEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"}],\"name\":\"stakeOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Forked from: https://github.com/AngleProtocol/angle-core/blob/main/contracts/staking/StakingRewardsEvents.sol\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Used instead of having a public variable to respect the ERC20 standard\",\"params\":{\"account\":\"Account to query the balance of\"}},\"constructor\":{\"params\":{\"_rewardToken\":\"ERC20 token given as reward\",\"_stakingToken\":\"ERC20 token used for staking\"}},\"earned(address)\":{\"details\":\"It adds to the rewards the amount of reward earned since last time that is the difference in reward per token from now and last time multiplied by the number of tokens staked by the person\",\"params\":{\"account\":\"Address for which the request is made\"},\"returns\":{\"_0\":\"How much a given account earned rewards\"}},\"exit()\":{\"details\":\"This function lets the caller withdraw its staking and claim rewards\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder_\":\"Address to check\"},\"returns\":{\"_0\":\"true if forwarder_ is trusted forwarder\"}},\"lastTimeRewardApplicable()\":{\"details\":\"Returns the current timestamp if a reward is being distributed and the end of the staking period if staking is done\"},\"notifyRewardAmount(uint256)\":{\"details\":\"This reward will be distributed during `rewardsDuration` set previously\",\"params\":{\"reward\":\"Amount of reward tokens to distribute\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverERC20(address,address,uint256)\":{\"details\":\"A use case would be to claim tokens if the staked tokens accumulate rewards\",\"params\":{\"amount\":\"Amount to transfer\",\"to\":\"Address to transfer to\",\"tokenAddress\":\"Address of the ERC20 token to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardPerToken()\":{\"details\":\"It adds to the reward per token: the time elapsed since the `rewardPerTokenStored` was last updated multiplied by the `rewardRate` divided by the number of tokens\"},\"setTrustedForwarder(address)\":{\"details\":\"onlyOwner can call\",\"params\":{\"forwarder_\":\"Frwarder conract address\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount of ERC20 staking token that the `msg.sender` wants to stake\"}},\"stakeOnBehalf(uint256,address)\":{\"params\":{\"amount\":\"Amount to stake\",\"onBehalf\":\"Address to stake onBehalf of\"}},\"totalSupply()\":{\"details\":\"Used instead of having a public variable to respect the ERC20 standard\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of the ERC20 staking token that the `msg.sender` wants to withdraw\"}}},\"title\":\"StakingRewards\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotSendEther()\":[{\"notice\":\"error (0xbf064619): Contract cannot receive ether\"}],\"ZeroAddress()\":[{\"notice\":\"error (0xd92e233d): Address is address(0)\"}],\"ZeroValue()\":[{\"notice\":\"error(): Value sent is 0\"}]},\"events\":{\"ForwarderSet(address,address)\":{\"notice\":\"event (0x94aed472): Forwarder address is changed\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Accesses the number of token staked by an account\"},\"constructor\":{\"notice\":\"Initializes the staking contract with a first set of parameters\"},\"earned(address)\":{\"notice\":\"Returns how much a given account earned rewards\"},\"exit()\":{\"notice\":\"Exits someone\"},\"getReward()\":{\"notice\":\"Triggers a payment of the reward earned to the msg.sender\"},\"isTrustedForwarder(address)\":{\"notice\":\"Check if the given address is the trusted forwarder\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Queries the last timestamp at which a reward was distributed\"},\"lastUpdateTime()\":{\"notice\":\"Last time `rewardPerTokenStored` was updated\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Adds rewards to be distributed\"},\"periodFinish()\":{\"notice\":\"Time at which distribution ends\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens that could accrue on this contract\"},\"rewardPerToken()\":{\"notice\":\"Used to actualize the `rewardPerTokenStored`\"},\"rewardPerTokenStored()\":{\"notice\":\"Helps to compute the amount earned by someone Cumulates rewards accumulated for one token since the beginning. Stored as a uint so it is actually a float times the base of the reward token\"},\"rewardRate()\":{\"notice\":\"Reward per second given to the staking contract, split among the staked tokens\"},\"rewardToken()\":{\"notice\":\"ERC20 token given as reward\"},\"rewards(address)\":{\"notice\":\"Stores for each account the accumulated rewards\"},\"rewardsDuration()\":{\"notice\":\"Duration of the reward distribution\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set the forwarder contract address\"},\"stake(uint256)\":{\"notice\":\"Lets someone stake a given amount of `stakingTokens`\"},\"stakeOnBehalf(uint256,address)\":{\"notice\":\"Allows to stake on behalf of another address\"},\"stakingBase()\":{\"notice\":\"Base of the staked token, it is going to be used in the case of sanTokens which are not in base 10**18\"},\"stakingToken()\":{\"notice\":\"ERC20 token used for staking\"},\"totalSupply()\":{\"notice\":\"Accesses the total supply\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"Stores for each account the `rewardPerToken`: we do the difference between the current and the old value to compute what has been earned by an account\"},\"withdraw(uint256)\":{\"notice\":\"Lets a user withdraw a given amount of collateral from the staking contract\"}},\"notice\":\"The `StakingRewards` contracts allows to stake an ERC20 token to receive as reward another ERC20\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/samples/ZbyteStaking.sol\":\"ZbyteStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/samples/ZbyteStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\nimport \\\"../utils/ZbyteContext.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @title StakingRewards\\n/// @author Forked from:\\n/// https://github.com/AngleProtocol/angle-core/blob/main/contracts/staking/StakingRewardsEvents.sol\\n/// @notice The `StakingRewards` contracts allows to stake an ERC20 token to receive as reward another ERC20\\ncontract ZbyteStaking is ReentrancyGuard, ZbyteContext {\\n    using SafeERC20 for IERC20;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n    event RewardsDurationUpdated(uint256 rewardsDuration);\\n\\n    // ============================ References to contracts ========================\\n\\n    /// @notice ERC20 token given as reward\\n    IERC20 public immutable rewardToken;\\n\\n    /// @notice ERC20 token used for staking\\n    IERC20 public immutable stakingToken;\\n\\n    /// @notice Base of the staked token, it is going to be used in the case of sanTokens\\n    /// which are not in base 10**18\\n    uint256 public immutable stakingBase;\\n\\n    // ============================ Staking parameters =============================\\n\\n    /// @notice Time at which distribution ends\\n    uint256 public periodFinish;\\n\\n    /// @notice Reward per second given to the staking contract, split among the staked tokens\\n    uint256 public rewardRate;\\n\\n    /// @notice Duration of the reward distribution\\n    uint256 public rewardsDuration;\\n\\n    /// @notice Last time `rewardPerTokenStored` was updated\\n    uint256 public lastUpdateTime;\\n\\n    /// @notice Helps to compute the amount earned by someone\\n    /// Cumulates rewards accumulated for one token since the beginning.\\n    /// Stored as a uint so it is actually a float times the base of the reward token\\n    uint256 public rewardPerTokenStored;\\n\\n    /// @notice Stores for each account the `rewardPerToken`: we do the difference\\n    /// between the current and the old value to compute what has been earned by an account\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    /// @notice Stores for each account the accumulated rewards\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @notice Initializes the staking contract with a first set of parameters\\n    /// @param _rewardToken ERC20 token given as reward\\n    /// @param _stakingToken ERC20 token used for staking\\n    constructor(\\n        address _rewardToken,\\n        address _stakingToken\\n    ) {\\n        require(_stakingToken != address(0) && _rewardToken != address(0), \\\"0\\\");\\n\\n        // We are not checking the compatibility of the reward token between the distributor and this contract here\\n        // because it is checked by the `RewardsDistributor` when activating the staking contract\\n        // Parameters\\n        rewardToken = IERC20(_rewardToken);\\n        stakingToken = IERC20(_stakingToken);\\n\\n        stakingBase = 10**IERC20Metadata(_stakingToken).decimals();\\n    }\\n\\n    // ============================ Modifiers ======================================\\n\\n    /// @notice Checks to see if the calling address is the zero address\\n    /// @param account Address to check\\n    modifier zeroCheck(address account) {\\n        require(account != address(0), \\\"0\\\");\\n        _;\\n    }\\n\\n    /// @notice Called frequently to update the staking parameters associated to an address\\n    /// @param account Address of the account to update\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    // ============================ View functions =================================\\n\\n    /// @notice Accesses the total supply\\n    /// @dev Used instead of having a public variable to respect the ERC20 standard\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Accesses the number of token staked by an account\\n    /// @param account Account to query the balance of\\n    /// @dev Used instead of having a public variable to respect the ERC20 standard\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice Queries the last timestamp at which a reward was distributed\\n    /// @dev Returns the current timestamp if a reward is being distributed and the end of the staking\\n    /// period if staking is done\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    /// @notice Used to actualize the `rewardPerTokenStored`\\n    /// @dev It adds to the reward per token: the time elapsed since the `rewardPerTokenStored` was\\n    /// last updated multiplied by the `rewardRate` divided by the number of tokens\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * stakingBase) / _totalSupply);\\n    }\\n\\n    /// @notice Returns how much a given account earned rewards\\n    /// @param account Address for which the request is made\\n    /// @return How much a given account earned rewards\\n    /// @dev It adds to the rewards the amount of reward earned since last time that is the difference\\n    /// in reward per token from now and last time multiplied by the number of tokens staked by the person\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) /\\n            stakingBase +\\n            rewards[account];\\n    }\\n\\n    // ======================== Mutative functions forked ==========================\\n\\n    /// @notice Lets someone stake a given amount of `stakingTokens`\\n    /// @param amount Amount of ERC20 staking token that the `msg.sender` wants to stake\\n    function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {\\n        _stake(amount, msg.sender);\\n    }\\n\\n    /// @notice Lets a user withdraw a given amount of collateral from the staking contract\\n    /// @param amount Amount of the ERC20 staking token that the `msg.sender` wants to withdraw\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"89\\\");\\n        _totalSupply = _totalSupply - amount;\\n        _balances[msg.sender] = _balances[msg.sender] - amount;\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    /// @notice Triggers a payment of the reward earned to the msg.sender\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    /// @notice Exits someone\\n    /// @dev This function lets the caller withdraw its staking and claim rewards\\n    // Attention here, there may be reentrancy attacks because of the following call\\n    // to an external contract done before other things are modified, yet since the `rewardToken`\\n    // is mostly going to be a trusted contract controlled by governance (namely the ANGLE token),\\n    // this is not an issue. If the `rewardToken` changes to an untrusted contract, this need to be updated.\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    // ====================== Functions added by Angle Core Team ===================\\n\\n    /// @notice Allows to stake on behalf of another address\\n    /// @param amount Amount to stake\\n    /// @param onBehalf Address to stake onBehalf of\\n    function stakeOnBehalf(uint256 amount, address onBehalf)\\n        external\\n        nonReentrant\\n        zeroCheck(onBehalf)\\n        updateReward(onBehalf)\\n    {\\n        _stake(amount, onBehalf);\\n    }\\n\\n    /// @notice Internal function to stake called by `stake` and `stakeOnBehalf`\\n    /// @param amount Amount to stake\\n    /// @param onBehalf Address to stake on behalf of\\n    /// @dev Before calling this function, it has already been verified whether this address was a zero address or not\\n    function _stake(uint256 amount, address onBehalf) internal {\\n        require(amount > 0, \\\"90\\\");\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        _totalSupply = _totalSupply + amount;\\n        _balances[onBehalf] = _balances[onBehalf] + amount;\\n        emit Staked(onBehalf, amount);\\n    }\\n\\n    // ====================== Restricted Functions =================================\\n\\n    /// @notice Adds rewards to be distributed\\n    /// @param reward Amount of reward tokens to distribute\\n    /// @dev This reward will be distributed during `rewardsDuration` set previously\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyOwner\\n        nonReentrant\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            // If no reward is currently being distributed, the new rate is just `reward / duration`\\n            rewardRate = reward / rewardsDuration;\\n        } else {\\n            // Otherwise, cancel the future reward and add the amount left to distribute to reward\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (reward + leftover) / rewardsDuration;\\n        }\\n\\n        // Ensures the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of `rewardRate` in the earned and `rewardsPerToken` functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        require(rewardRate <= balance / rewardsDuration, \\\"91\\\");\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + rewardsDuration; // Change the duration\\n        emit RewardAdded(reward);\\n    }\\n\\n    /// @notice Withdraws ERC20 tokens that could accrue on this contract\\n    /// @param tokenAddress Address of the ERC20 token to withdraw\\n    /// @param to Address to transfer to\\n    /// @param amount Amount to transfer\\n    /// @dev A use case would be to claim tokens if the staked tokens accumulate rewards\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        require(tokenAddress != address(stakingToken) && tokenAddress != address(rewardToken), \\\"20\\\");\\n\\n        IERC20(tokenAddress).safeTransfer(to, amount);\\n        emit Recovered(tokenAddress, to, amount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n}\",\"keccak256\":\"0xa0e2bbf9083ce786102d069bee660a2722f36ba4ada8c3dc4e7cbb1ad24ef154\",\"license\":\"GPL-3.0\"},\"contracts/utils/ZbyteContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title The ZBYT ERC20 contract\\n/// @dev ERC2771Context with a function to set forwarder\\nabstract contract ZbyteContext is Context, Ownable {\\n    // errors\\n    /// @notice error (0xbf064619): Contract cannot receive ether\\n    error CannotSendEther();\\n    /// @notice error (0xd92e233d): Address is address(0)\\n    error ZeroAddress();\\n    /// @notice error(): Value sent is 0\\n    error ZeroValue();\\n\\n    // events\\n    /// @notice event (0x94aed472): Forwarder address is changed\\n    event ForwarderSet(address,address);\\n\\n    // Trusted forwarder address\\n    address private trustedForwarder;\\n\\n    // /// @notice ZbyteContext constructor\\n    // /// @param forwarder_ Forwarder contact address\\n    // constructor(address forwarder_) {\\n    //     _setTrustedForwarder(forwarder_);\\n    // }\\n\\n    /// @notice Check if the given address is the trusted forwarder\\n    /// @param forwarder_ Address to check\\n    /// @return true if forwarder_ is trusted forwarder\\n    function isTrustedForwarder(address forwarder_) public view virtual returns (bool) {\\n        return forwarder_ == trustedForwarder;\\n    }\\n\\n    /// @notice Set a trusted forwarder address\\n    /// @param forwarder_ Trusted forwarder address\\n    /// @dev emits ForwarderSet on success\\n    function _setTrustedForwarder(address forwarder_) internal {\\n        if (forwarder_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        address oldForwarder = trustedForwarder;\\n        trustedForwarder = forwarder_;\\n\\n        emit ForwarderSet(oldForwarder,forwarder_);\\n    }\\n\\n    /// @notice Set the forwarder contract address\\n    /// @param forwarder_ Frwarder conract address\\n    /// @dev onlyOwner can call\\n    function setTrustedForwarder(address forwarder_) public onlyOwner {\\n        _setTrustedForwarder(forwarder_);\\n    }\\n\\n    /// @notice Get the trusted forwarder address\\n    function _getTrustedForwarder() internal view returns(address){\\n        return trustedForwarder;\\n    }\\n\\n    /// @notice Extract true caller if called via trusted forwarder\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /// @notice Extract data if called via trusted forwarder\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c27022a50e80284df94f275bd72bc0c08af33480ab79d00e7ab6eb6741fce4f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060409080825234620001fb578181620018ee803803809162000024828562000200565b833981010312620001fb576200003a816200023a565b906200004a60208092016200023a565b91600092600184556200005c6200024f565b600180546001600160a01b039283166001600160a01b03198216811790925587519492938492909183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a3169283151580620001ef575b15620001c957501660805260a0819052835163313ce56760e01b815291908190839060049082905afa908115620001bf5783916200017b575b5060ff91501690604d8211620001675750600a0a60c0525161167990816200027582396080518181816103c60152818161056b01528181610d580152611467015260a05181818161032f0152818161080c015281816110500152611519015260c05181818161072a01528181610ed30152610f680152f35b634e487b7160e01b81526011600452602490fd5b905081813d8311620001b7575b62000194818362000200565b81010312620001b3575160ff81168103620001b35760ff9038620000ef565b5080fd5b503d62000188565b84513d85823e3d90fd5b62461bcd60e51b81526004810185905260016024820152600360fc1b6044820152606490fd5b508282161515620000b6565b600080fd5b601f909101601f19168101906001600160401b038211908210176200022457604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001fb57565b600254336001600160a01b0390911603620002705736601319013560601c90565b339056fe60806040526004361015610013575b600080fd5b60003560e01c80628cc262146102425780630700037d146102395780631171bda91461023057806318160ddd146102275780632e1a7d4d1461021e578063386a9525146102155780633c6b16ab1461020c5780633d18b91214610203578063572b6c05146101fa5780636041c34f146101f157806370a08231146101e8578063715018a6146101df57806372f702f3146101d65780637b0a47ee146101cd57806380faa57d146101c45780638b876347146101bb5780638da5cb5b146101b2578063a694fc3a146101a9578063aceccf8f146101a0578063c8f33c9114610197578063cc1a378f1461018e578063cd3daf9d14610185578063da7422281461017c578063df136d6514610173578063e9fad8ee1461016a578063ebe2b12b14610161578063f2fde38b146101585763f7c618c11461015057600080fd5b61000e610d41565b5061000e610ca8565b5061000e610c89565b5061000e610bfa565b5061000e610bdb565b5061000e610b3d565b5061000e610b21565b5061000e610a1d565b5061000e6109fe565b5061000e610950565b5061000e6108db565b5061000e6108b1565b5061000e610876565b5061000e61085a565b5061000e61083b565b5061000e6107f5565b5061000e610788565b5061000e61074d565b5061000e610711565b5061000e6106db565b5061000e610660565b5061000e6104ae565b5061000e61048f565b5061000e61040d565b5061000e6103ee565b5061000e6102de565b5061000e6102a3565b5061000e610277565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602036600319011261000e57602061029b61029661024b565b610f25565b604051908152f35b503461000e57602036600319011261000e576001600160a01b036102c561024b565b1660005260096020526020604060002054604051908152f35b503461000e57606036600319011261000e576102f861024b565b610300610261565b600154604435926001600160a01b03929183919061032a9083168361032361161f565b1614610d87565b1691807f000000000000000000000000000000000000000000000000000000000000000016831415806103c2575b15610398578161038a857ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648948661116b565b6040519485521692602090a3005b60405162461bcd60e51b8152602060048201526002602482015261032360f41b6044820152606490fd5b50807f000000000000000000000000000000000000000000000000000000000000000016831415610358565b503461000e57600036600319011261000e576020600a54604051908152f35b503461000e57602036600319011261000e57600061042f600282541415610fb0565b6002815561043b610e9e565b600755610446610e1b565b60065533610467575b61045a600435611007565b6104646001600055565b80f35b61047033610f25565b338252600960205260408220556007546008602052604082205561044f565b503461000e57600036600319011261000e576020600554604051908152f35b503461000e57602036600319011261000e577fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d6105e26004356105b560018060a01b0361050281600154168261032361161f565b61051160026000541415610fb0565b600260005561051e610e9e565b600755610529610e1b565b60065560035442811161062c575061054b61054660055485610e71565b600455565b6040516370a0823160e01b815230600482015290602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa90811561061f575b6000916105f1575b506105ae6004549160055490610e71565b10156115ee565b6105be42600655565b6105d26105cd60055442610e91565b600355565b6040519081529081906020820190565b0390a16105ef6001600055565b005b610612915060203d8111610618575b61060a8183611149565b8101906115d2565b3861059d565b503d610600565b6106276115e1565b610595565b61054661065261064c61064361065b944290610e47565b60045490610e5e565b86610e91565b60055490610e71565b61054b565b503461000e576000806003193601126106d857610681600282541415610fb0565b6002815561068d610e9e565b600755610698610e1b565b600655336106b0575b6106a9611442565b6001815580f35b6106b933610f25565b33825260096020526040822055600754600860205260408220556106a1565b80fd5b503461000e57602036600319011261000e5760206106f761024b565b6002546040516001600160a01b0392831691909216148152f35b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57602036600319011261000e576001600160a01b0361076f61024b565b16600052600b6020526020604060002054604051908152f35b503461000e576000806003193601126106d85760015481906001600160a01b0380821691906107c1906107b961161f565b168314610d87565b6001600160a01b0319166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576020600454604051908152f35b503461000e57600036600319011261000e57602061029b610e1b565b503461000e57602036600319011261000e576001600160a01b0361089861024b565b1660005260086020526020604060002054604051908152f35b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e5760006108fd600282541415610fb0565b60028155610909610e9e565b600755610914610e1b565b60065533610928575b61045a600435610ffc565b61093133610f25565b338252600960205260408220556007546008602052604082205561091d565b503461000e57604036600319011261000e5761096a610261565b60009061097b600283541415610fb0565b600282556001600160a01b0381169081156109d55761045a9161099c610e9e565b6007556109a7610e1b565b6006556109b382610f25565b90845260096020526040842055600754600860205260408420556004356114b9565b60405162461bcd60e51b81526020600482015260016024820152600360fc1b6044820152606490fd5b503461000e57600036600319011261000e576020600654604051908152f35b503461000e57602036600319011261000e57600154610a4a906001600160a01b039081169061032361161f565b600354421115610a9057610a5f600435600555565b6005546040519081527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390602090a1005b60405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a490fd5b503461000e57600036600319011261000e57602061029b610e9e565b503461000e57602036600319011261000e57610b5761024b565b6001546001600160a01b03918291610b749083168361032361161f565b168015610bc9577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd309160409160025491816bffffffffffffffffffffffff60a01b8416176002558351921682526020820152a1005b60405163d92e233d60e01b8152600490fd5b503461000e57600036600319011261000e576020600754604051908152f35b503461000e576000806003193601126106d857338152600b602052610c4f6040822054610c2b600284541415610fb0565b60028355610c37610e9e565b600755610c42610e1b565b60065533610c6157611007565b610c596001600055565b6104646113dd565b610c6a33610f25565b3384526009602052604084205560075460086020526040842055611007565b503461000e57600036600319011261000e576020600354604051908152f35b503461000e57602036600319011261000e57610cc261024b565b6001546001600160a01b0390610cdd9082168261032361161f565b811615610ced576105ef90610dd2565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b15610d8e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600180546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b600354804210600014610e2d57504290565b90565b50634e487b7160e01b600052601160045260246000fd5b91908203918211610e5457565b610e5c610e30565b565b81810292918115918404141715610e5457565b8115610e7b570490565b634e487b7160e01b600052601260045260246000fd5b91908201809211610e5457565b600a548015610f1e57610efd60075491610ef8610ed1610ebc610e1b565b6006548103908111610f115760045490610e5e565b7f000000000000000000000000000000000000000000000000000000000000000090610e5e565b610e71565b8101809111610f095790565b610e2d610e30565b610f19610e30565b610643565b5060075490565b60018060a01b031660406000828152600b602052610f8d610f6683832054610f4b610e9e565b908685526008602052858520548203918211610fa357610e5e565b7f000000000000000000000000000000000000000000000000000000000000000090610e71565b928152600960205220548101809111610f095790565b610fab610e30565b610e5e565b15610fb757565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b610e5c9033906114b9565b80156110c357600a548181039081116110b6575b600a55336000908152600b60205260409020548181039081116110a9575b336000908152600b602052604090205561107481337f000000000000000000000000000000000000000000000000000000000000000061116b565b60405190815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59080602081015b0390a2565b6110b1610e30565b611039565b6110be610e30565b61101b565b60405162461bcd60e51b8152602060048201526002602482015261383960f01b6044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761112057604052565b6111286110ed565b604052565b60a0810190811067ffffffffffffffff82111761112057604052565b90601f8019910116810190811067ffffffffffffffff82111761112057604052565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610e5c916080820167ffffffffffffffff8111838210176111bb575b60405261123f565b6111c36110ed565b6111b3565b9081602091031261000e5751801515810361000e5790565b156111e757565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b03919091169161125882611104565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b156112cf57600082819282876112aa9796519301915af16112a4611314565b90611362565b805190816112b757505050565b82610e5c936112ca9383010191016111c8565b6111e0565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d1561135d573d9067ffffffffffffffff8211611350575b60405191611344601f8201601f191660200184611149565b82523d6000602084013e565b6113586110ed565b61132c565b606090565b9091901561136e575090565b81511561137e5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106113c4575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506113a1565b600160006113ef600282541415610fb0565b600281556113fb610e9e565b600755611406610e1b565b6006553361141a575b611417611442565b55565b61142333610f25565b338252600960205260408220556007546008602052604082205561140f565b336000526009602052604060002054806114595750565b6000604081205561148b81337f000000000000000000000000000000000000000000000000000000000000000061116b565b6040519081527fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048660203392a2565b9081156115a8576110a47f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9161153d6040516323b872dd60e01b6020820152336024820152306044820152856064820152606481526115178161112d565b7f000000000000000000000000000000000000000000000000000000000000000061123f565b61155161154c85600a54610e91565b600a55565b6001600160a01b0381166000908152600b6020526040902061157590859054610e91565b6001600160a01b0382166000908152600b60205260409020556040519384526001600160a01b0316929081906020820190565b60405162461bcd60e51b8152602060048201526002602482015261039360f41b6044820152606490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b156115f557565b60405162461bcd60e51b8152602060048201526002602482015261393160f01b6044820152606490fd5b600254336001600160a01b039091160361163f5736601319013560601c90565b339056fea2646970667358221220a9250975e3d7e7997b2f510c6c25ef61b43ee450c613259c11f9f0a139172ee064736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c80628cc262146102425780630700037d146102395780631171bda91461023057806318160ddd146102275780632e1a7d4d1461021e578063386a9525146102155780633c6b16ab1461020c5780633d18b91214610203578063572b6c05146101fa5780636041c34f146101f157806370a08231146101e8578063715018a6146101df57806372f702f3146101d65780637b0a47ee146101cd57806380faa57d146101c45780638b876347146101bb5780638da5cb5b146101b2578063a694fc3a146101a9578063aceccf8f146101a0578063c8f33c9114610197578063cc1a378f1461018e578063cd3daf9d14610185578063da7422281461017c578063df136d6514610173578063e9fad8ee1461016a578063ebe2b12b14610161578063f2fde38b146101585763f7c618c11461015057600080fd5b61000e610d41565b5061000e610ca8565b5061000e610c89565b5061000e610bfa565b5061000e610bdb565b5061000e610b3d565b5061000e610b21565b5061000e610a1d565b5061000e6109fe565b5061000e610950565b5061000e6108db565b5061000e6108b1565b5061000e610876565b5061000e61085a565b5061000e61083b565b5061000e6107f5565b5061000e610788565b5061000e61074d565b5061000e610711565b5061000e6106db565b5061000e610660565b5061000e6104ae565b5061000e61048f565b5061000e61040d565b5061000e6103ee565b5061000e6102de565b5061000e6102a3565b5061000e610277565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602036600319011261000e57602061029b61029661024b565b610f25565b604051908152f35b503461000e57602036600319011261000e576001600160a01b036102c561024b565b1660005260096020526020604060002054604051908152f35b503461000e57606036600319011261000e576102f861024b565b610300610261565b600154604435926001600160a01b03929183919061032a9083168361032361161f565b1614610d87565b1691807f000000000000000000000000000000000000000000000000000000000000000016831415806103c2575b15610398578161038a857ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648948661116b565b6040519485521692602090a3005b60405162461bcd60e51b8152602060048201526002602482015261032360f41b6044820152606490fd5b50807f000000000000000000000000000000000000000000000000000000000000000016831415610358565b503461000e57600036600319011261000e576020600a54604051908152f35b503461000e57602036600319011261000e57600061042f600282541415610fb0565b6002815561043b610e9e565b600755610446610e1b565b60065533610467575b61045a600435611007565b6104646001600055565b80f35b61047033610f25565b338252600960205260408220556007546008602052604082205561044f565b503461000e57600036600319011261000e576020600554604051908152f35b503461000e57602036600319011261000e577fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d6105e26004356105b560018060a01b0361050281600154168261032361161f565b61051160026000541415610fb0565b600260005561051e610e9e565b600755610529610e1b565b60065560035442811161062c575061054b61054660055485610e71565b600455565b6040516370a0823160e01b815230600482015290602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa90811561061f575b6000916105f1575b506105ae6004549160055490610e71565b10156115ee565b6105be42600655565b6105d26105cd60055442610e91565b600355565b6040519081529081906020820190565b0390a16105ef6001600055565b005b610612915060203d8111610618575b61060a8183611149565b8101906115d2565b3861059d565b503d610600565b6106276115e1565b610595565b61054661065261064c61064361065b944290610e47565b60045490610e5e565b86610e91565b60055490610e71565b61054b565b503461000e576000806003193601126106d857610681600282541415610fb0565b6002815561068d610e9e565b600755610698610e1b565b600655336106b0575b6106a9611442565b6001815580f35b6106b933610f25565b33825260096020526040822055600754600860205260408220556106a1565b80fd5b503461000e57602036600319011261000e5760206106f761024b565b6002546040516001600160a01b0392831691909216148152f35b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57602036600319011261000e576001600160a01b0361076f61024b565b16600052600b6020526020604060002054604051908152f35b503461000e576000806003193601126106d85760015481906001600160a01b0380821691906107c1906107b961161f565b168314610d87565b6001600160a01b0319166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576020600454604051908152f35b503461000e57600036600319011261000e57602061029b610e1b565b503461000e57602036600319011261000e576001600160a01b0361089861024b565b1660005260086020526020604060002054604051908152f35b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e5760006108fd600282541415610fb0565b60028155610909610e9e565b600755610914610e1b565b60065533610928575b61045a600435610ffc565b61093133610f25565b338252600960205260408220556007546008602052604082205561091d565b503461000e57604036600319011261000e5761096a610261565b60009061097b600283541415610fb0565b600282556001600160a01b0381169081156109d55761045a9161099c610e9e565b6007556109a7610e1b565b6006556109b382610f25565b90845260096020526040842055600754600860205260408420556004356114b9565b60405162461bcd60e51b81526020600482015260016024820152600360fc1b6044820152606490fd5b503461000e57600036600319011261000e576020600654604051908152f35b503461000e57602036600319011261000e57600154610a4a906001600160a01b039081169061032361161f565b600354421115610a9057610a5f600435600555565b6005546040519081527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390602090a1005b60405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a490fd5b503461000e57600036600319011261000e57602061029b610e9e565b503461000e57602036600319011261000e57610b5761024b565b6001546001600160a01b03918291610b749083168361032361161f565b168015610bc9577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd309160409160025491816bffffffffffffffffffffffff60a01b8416176002558351921682526020820152a1005b60405163d92e233d60e01b8152600490fd5b503461000e57600036600319011261000e576020600754604051908152f35b503461000e576000806003193601126106d857338152600b602052610c4f6040822054610c2b600284541415610fb0565b60028355610c37610e9e565b600755610c42610e1b565b60065533610c6157611007565b610c596001600055565b6104646113dd565b610c6a33610f25565b3384526009602052604084205560075460086020526040842055611007565b503461000e57600036600319011261000e576020600354604051908152f35b503461000e57602036600319011261000e57610cc261024b565b6001546001600160a01b0390610cdd9082168261032361161f565b811615610ced576105ef90610dd2565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b15610d8e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600180546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b600354804210600014610e2d57504290565b90565b50634e487b7160e01b600052601160045260246000fd5b91908203918211610e5457565b610e5c610e30565b565b81810292918115918404141715610e5457565b8115610e7b570490565b634e487b7160e01b600052601260045260246000fd5b91908201809211610e5457565b600a548015610f1e57610efd60075491610ef8610ed1610ebc610e1b565b6006548103908111610f115760045490610e5e565b7f000000000000000000000000000000000000000000000000000000000000000090610e5e565b610e71565b8101809111610f095790565b610e2d610e30565b610f19610e30565b610643565b5060075490565b60018060a01b031660406000828152600b602052610f8d610f6683832054610f4b610e9e565b908685526008602052858520548203918211610fa357610e5e565b7f000000000000000000000000000000000000000000000000000000000000000090610e71565b928152600960205220548101809111610f095790565b610fab610e30565b610e5e565b15610fb757565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b610e5c9033906114b9565b80156110c357600a548181039081116110b6575b600a55336000908152600b60205260409020548181039081116110a9575b336000908152600b602052604090205561107481337f000000000000000000000000000000000000000000000000000000000000000061116b565b60405190815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59080602081015b0390a2565b6110b1610e30565b611039565b6110be610e30565b61101b565b60405162461bcd60e51b8152602060048201526002602482015261383960f01b6044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761112057604052565b6111286110ed565b604052565b60a0810190811067ffffffffffffffff82111761112057604052565b90601f8019910116810190811067ffffffffffffffff82111761112057604052565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610e5c916080820167ffffffffffffffff8111838210176111bb575b60405261123f565b6111c36110ed565b6111b3565b9081602091031261000e5751801515810361000e5790565b156111e757565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b03919091169161125882611104565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b156112cf57600082819282876112aa9796519301915af16112a4611314565b90611362565b805190816112b757505050565b82610e5c936112ca9383010191016111c8565b6111e0565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d1561135d573d9067ffffffffffffffff8211611350575b60405191611344601f8201601f191660200184611149565b82523d6000602084013e565b6113586110ed565b61132c565b606090565b9091901561136e575090565b81511561137e5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106113c4575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506113a1565b600160006113ef600282541415610fb0565b600281556113fb610e9e565b600755611406610e1b565b6006553361141a575b611417611442565b55565b61142333610f25565b338252600960205260408220556007546008602052604082205561140f565b336000526009602052604060002054806114595750565b6000604081205561148b81337f000000000000000000000000000000000000000000000000000000000000000061116b565b6040519081527fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048660203392a2565b9081156115a8576110a47f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9161153d6040516323b872dd60e01b6020820152336024820152306044820152856064820152606481526115178161112d565b7f000000000000000000000000000000000000000000000000000000000000000061123f565b61155161154c85600a54610e91565b600a55565b6001600160a01b0381166000908152600b6020526040902061157590859054610e91565b6001600160a01b0382166000908152600b60205260409020556040519384526001600160a01b0316929081906020820190565b60405162461bcd60e51b8152602060048201526002602482015261039360f41b6044820152606490fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b156115f557565b60405162461bcd60e51b8152602060048201526002602482015261393160f01b6044820152606490fd5b600254336001600160a01b039091160361163f5736601319013560601c90565b339056fea2646970667358221220a9250975e3d7e7997b2f510c6c25ef61b43ee450c613259c11f9f0a139172ee064736f6c63430008110033",
  "devdoc": {
    "author": "Forked from: https://github.com/AngleProtocol/angle-core/blob/main/contracts/staking/StakingRewardsEvents.sol",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "Used instead of having a public variable to respect the ERC20 standard",
        "params": {
          "account": "Account to query the balance of"
        }
      },
      "constructor": {
        "params": {
          "_rewardToken": "ERC20 token given as reward",
          "_stakingToken": "ERC20 token used for staking"
        }
      },
      "earned(address)": {
        "details": "It adds to the rewards the amount of reward earned since last time that is the difference in reward per token from now and last time multiplied by the number of tokens staked by the person",
        "params": {
          "account": "Address for which the request is made"
        },
        "returns": {
          "_0": "How much a given account earned rewards"
        }
      },
      "exit()": {
        "details": "This function lets the caller withdraw its staking and claim rewards"
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder_": "Address to check"
        },
        "returns": {
          "_0": "true if forwarder_ is trusted forwarder"
        }
      },
      "lastTimeRewardApplicable()": {
        "details": "Returns the current timestamp if a reward is being distributed and the end of the staking period if staking is done"
      },
      "notifyRewardAmount(uint256)": {
        "details": "This reward will be distributed during `rewardsDuration` set previously",
        "params": {
          "reward": "Amount of reward tokens to distribute"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverERC20(address,address,uint256)": {
        "details": "A use case would be to claim tokens if the staked tokens accumulate rewards",
        "params": {
          "amount": "Amount to transfer",
          "to": "Address to transfer to",
          "tokenAddress": "Address of the ERC20 token to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardPerToken()": {
        "details": "It adds to the reward per token: the time elapsed since the `rewardPerTokenStored` was last updated multiplied by the `rewardRate` divided by the number of tokens"
      },
      "setTrustedForwarder(address)": {
        "details": "onlyOwner can call",
        "params": {
          "forwarder_": "Frwarder conract address"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "Amount of ERC20 staking token that the `msg.sender` wants to stake"
        }
      },
      "stakeOnBehalf(uint256,address)": {
        "params": {
          "amount": "Amount to stake",
          "onBehalf": "Address to stake onBehalf of"
        }
      },
      "totalSupply()": {
        "details": "Used instead of having a public variable to respect the ERC20 standard"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of the ERC20 staking token that the `msg.sender` wants to withdraw"
        }
      }
    },
    "title": "StakingRewards",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotSendEther()": [
        {
          "notice": "error (0xbf064619): Contract cannot receive ether"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "error (0xd92e233d): Address is address(0)"
        }
      ],
      "ZeroValue()": [
        {
          "notice": "error(): Value sent is 0"
        }
      ]
    },
    "events": {
      "ForwarderSet(address,address)": {
        "notice": "event (0x94aed472): Forwarder address is changed"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Accesses the number of token staked by an account"
      },
      "constructor": {
        "notice": "Initializes the staking contract with a first set of parameters"
      },
      "earned(address)": {
        "notice": "Returns how much a given account earned rewards"
      },
      "exit()": {
        "notice": "Exits someone"
      },
      "getReward()": {
        "notice": "Triggers a payment of the reward earned to the msg.sender"
      },
      "isTrustedForwarder(address)": {
        "notice": "Check if the given address is the trusted forwarder"
      },
      "lastTimeRewardApplicable()": {
        "notice": "Queries the last timestamp at which a reward was distributed"
      },
      "lastUpdateTime()": {
        "notice": "Last time `rewardPerTokenStored` was updated"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Adds rewards to be distributed"
      },
      "periodFinish()": {
        "notice": "Time at which distribution ends"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Withdraws ERC20 tokens that could accrue on this contract"
      },
      "rewardPerToken()": {
        "notice": "Used to actualize the `rewardPerTokenStored`"
      },
      "rewardPerTokenStored()": {
        "notice": "Helps to compute the amount earned by someone Cumulates rewards accumulated for one token since the beginning. Stored as a uint so it is actually a float times the base of the reward token"
      },
      "rewardRate()": {
        "notice": "Reward per second given to the staking contract, split among the staked tokens"
      },
      "rewardToken()": {
        "notice": "ERC20 token given as reward"
      },
      "rewards(address)": {
        "notice": "Stores for each account the accumulated rewards"
      },
      "rewardsDuration()": {
        "notice": "Duration of the reward distribution"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set the forwarder contract address"
      },
      "stake(uint256)": {
        "notice": "Lets someone stake a given amount of `stakingTokens`"
      },
      "stakeOnBehalf(uint256,address)": {
        "notice": "Allows to stake on behalf of another address"
      },
      "stakingBase()": {
        "notice": "Base of the staked token, it is going to be used in the case of sanTokens which are not in base 10**18"
      },
      "stakingToken()": {
        "notice": "ERC20 token used for staking"
      },
      "totalSupply()": {
        "notice": "Accesses the total supply"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "Stores for each account the `rewardPerToken`: we do the difference between the current and the old value to compute what has been earned by an account"
      },
      "withdraw(uint256)": {
        "notice": "Lets a user withdraw a given amount of collateral from the staking contract"
      }
    },
    "notice": "The `StakingRewards` contracts allows to stake an ERC20 token to receive as reward another ERC20",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 377,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11486,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10387,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "periodFinish",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10390,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10393,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10396,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10399,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10404,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10409,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10411,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10415,
        "contract": "contracts/samples/ZbyteStaking.sol:ZbyteStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}