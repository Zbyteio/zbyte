{
  "address": "0xca510b6CE41EEec10D2688328896972778ABa5e8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ArraySizeMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "FailedToSendEther",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "NotAWorker",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughEtherSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ForwarderDplatMinimumProcessingGasSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ForwarderDplatPostExecGasSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ForwarderDplatSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "ForwarderDplatWorkerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RefundEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "ZbyteForwarderDPlatExecute",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MinimalForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minProcessingGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postExecGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "workers_",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "register_",
          "type": "bool[]"
        }
      ],
      "name": "registerWorkers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registeredWorkers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minProcessingGas_",
          "type": "uint256"
        }
      ],
      "name": "setMinProcessingGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postExecGas_",
          "type": "uint256"
        }
      ],
      "name": "setPostExecGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zbyteDPlat_",
          "type": "address"
        }
      ],
      "name": "setZbyteDPlat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MinimalForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        }
      ],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zbyteDPlat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MinimalForwarder.ForwardRequest",
          "name": "req_",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature_",
          "type": "bytes"
        }
      ],
      "name": "zbyteExecute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3e5abff00719ba3dc8bd37856e2f18191bc346168867954ec47cc2ab9fb9721",
  "receipt": {
    "to": null,
    "from": "0x8DAEBA8cdfe06B0ddFb3c43473F11144B15A4075",
    "contractAddress": "0xca510b6CE41EEec10D2688328896972778ABa5e8",
    "transactionIndex": 0,
    "gasUsed": "1239182",
    "logsBloom": "0x
    "blockHash": "0x30384b0e315e094df0466747f6d98e5744be9d791b1dc5ae462046c8f8c22a09",
    "transactionHash": "0xf3e5abff00719ba3dc8bd37856e2f18191bc346168867954ec47cc2ab9fb9721",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 45457394,
        "transactionHash": "0xf3e5abff00719ba3dc8bd37856e2f18191bc346168867954ec47cc2ab9fb9721",
        "address": "0xca510b6CE41EEec10D2688328896972778ABa5e8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008daeba8cdfe06b0ddfb3c43473f11144b15a4075"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x30384b0e315e094df0466747f6d98e5744be9d791b1dc5ae462046c8f8c22a09"
      }
    ],
    "blockNumber": 45457394,
    "cumulativeGasUsed": "1239182",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7b843cd26962cacb91c14eabf2978b63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArraySizeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"FailedToSendEther\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NotAWorker\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NotEnoughEtherSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ForwarderDplatMinimumProcessingGasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ForwarderDplatPostExecGasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ForwarderDplatSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"ForwarderDplatWorkerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RefundEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"ZbyteForwarderDPlatExecute\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MinimalForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProcessingGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postExecGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"workers_\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"register_\",\"type\":\"bool[]\"}],\"name\":\"registerWorkers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredWorkers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minProcessingGas_\",\"type\":\"uint256\"}],\"name\":\"setMinProcessingGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postExecGas_\",\"type\":\"uint256\"}],\"name\":\"setPostExecGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zbyteDPlat_\",\"type\":\"address\"}],\"name\":\"setZbyteDPlat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MinimalForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zbyteDPlat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MinimalForwarder.ForwardRequest\",\"name\":\"req_\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"zbyteExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerWorkers(address[],bool[])\":{\"params\":{\"register_\":\"An array of boolean values indicating registration status\",\"workers_\":\"An array of worker addresses\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMinProcessingGas(uint256)\":{\"params\":{\"minProcessingGas_\":\"The new minimum processing gas value\"}},\"setPostExecGas(uint256)\":{\"params\":{\"postExecGas_\":\"The new minimum processing gas value\"}},\"setZbyteDPlat(address)\":{\"params\":{\"zbyteDPlat_\":\"The address of the Zbyte DPlat contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawEth(address)\":{\"params\":{\"receiver_\":\"The address to which the Ether balance will be sent.\"}},\"zbyteExecute((address,address,uint256,uint256,uint256,bytes),bytes)\":{\"details\":\"This function facilitates call to a target contract while allowing the user to pay in DPLAT tokens\\\\  The user would have received vERC20 necessary for the call execution.  An equivalent amount is charged in vERC20 from the user\\\\  If the target contract accepts msg.value, equivalent of that is charged from the user during preExecute\\\\  If preExecute collects more vERC20 than that is needed for the call, an event is emitted with the refund amount\\\\  If the target contract sends any refund to the _msgSender(), the caller receives the refund directly  If the target contract call reverts, msg.value is not sent to the target and an event is emitted with the refund amount\",\"params\":{\"req_\":\"The forward request data containing the recipient, value, data, and other information.\",\"signature_\":\"The signature for the forward request (if required).\"},\"returns\":{\"_0\":\"success A boolean indicating whether the execution was successful.\",\"_1\":\"returndata The return data from the executed contract.\"}}},\"title\":\"The ZBYT Dplat forwarder contract Todo: Integrate chargeAndBurnZbyteVToken and refundZbyteVToken with ZbyteDPlat\",\"version\":1},\"userdoc\":{\"errors\":{\"ArraySizeMismatch(uint256,uint256)\":[{\"notice\":\"error (0xfb3dd446): Array sizes don't match.\"}],\"FailedToSendEther(address,uint256,bytes)\":[{\"notice\":\"error (0xb7da4a55): Failed to send ether.\"}],\"NotAWorker(address)\":[{\"notice\":\"error (0x9059e055): Not a worker.\"}],\"NotEnoughEtherSent(uint256,uint256)\":[{\"notice\":\"error (0xf9309a09): Not enough ether sent the function.\"}],\"ZeroAddress()\":[{\"notice\":\"errorserror (0xd92e233d): Address is zero. \"}]},\"events\":{\"ForwarderDplatMinimumProcessingGasSet(uint256)\":{\"notice\":\"event (0x6342abcf): Forwarder minimum processing gas is set.\"},\"ForwarderDplatPostExecGasSet(uint256)\":{\"notice\":\"event (0x1f32728a): Forwarder post exec gas is set.\"},\"ForwarderDplatSet(address)\":{\"notice\":\"eventsevent (0xeae099e1): Forwarder address is set.\"},\"ForwarderDplatWorkerRegistered(address,bool)\":{\"notice\":\"event (0xe1554bda): Forwarder worker is registered.\"},\"RefundEth(address,uint256)\":{\"notice\":\"event (0xe5cac075): Refund Eth to payer.\"},\"ZbyteForwarderDPlatExecute(bool,bytes)\":{\"notice\":\"event (0x5c3206c6): Execute result and return data\"}},\"kind\":\"user\",\"methods\":{\"minProcessingGas()\":{\"notice\":\"Minimum amount of gas needed for a call via the forwarder\"},\"postExecGas()\":{\"notice\":\"Amount of gas needed for a post execute to the DPlat\"},\"registerWorkers(address[],bool[])\":{\"notice\":\"Registers workers with the contract\"},\"registeredWorkers(address)\":{\"notice\":\"Mapping of registered workers\"},\"setMinProcessingGas(uint256)\":{\"notice\":\"Sets the minimum processing gas\"},\"setPostExecGas(uint256)\":{\"notice\":\"Sets the post execute processing gas\"},\"setZbyteDPlat(address)\":{\"notice\":\"Sets the address of the Zbyte DPlat contract\"},\"withdrawEth(address)\":{\"notice\":\"Allows the owner of the contract to withdraw the contract's Ether balance.\"},\"zbyteDPlat()\":{\"notice\":\"Address of the Zbyte DPlat contract\"},\"zbyteExecute((address,address,uint256,uint256,uint256,bytes),bytes)\":{\"notice\":\"Executes a forward request, ensuring that it is called by a registered worker and handling gas fees.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dplat/ZbyteForwarderDplat.sol\":\"ZbyteForwarderDPlat\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\\n */\\ncontract MinimalForwarder is EIP712 {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"MinimalForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    function execute(ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\\n            abi.encodePacked(req.data, req.from)\\n        );\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        assert(gasleft() > req.gas / 63);\\n\\n        return (success, returndata);\\n    }\\n}\\n\",\"keccak256\":\"0xf7ba4a4a7c722c5e739d2ac3e7c2c3a7d6ebd8eae144d36612d4821db2d608db\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"contracts/dplat/ZbyteForwarderDplat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interface/dplat/IZbyteDPlat.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title The ZBYT Dplat forwarder contract\\n/// Todo: Integrate chargeAndBurnZbyteVToken and refundZbyteVToken with ZbyteDPlat\\ncontract ZbyteForwarderDPlat is Ownable, MinimalForwarder, ReentrancyGuard {\\n    /// events\\n    /// @notice event (0xeae099e1): Forwarder address is set.\\n    event ForwarderDplatSet(address);\\n    /// @notice event (0x6342abcf): Forwarder minimum processing gas is set.\\n    event ForwarderDplatMinimumProcessingGasSet(uint256);\\n    /// @notice event (0xe1554bda): Forwarder worker is registered.\\n    event ForwarderDplatWorkerRegistered(address,bool);\\n    /// @notice event (0xe5cac075): Refund Eth to payer.\\n    event RefundEth(address,uint256);\\n    /// @notice event (0x5c3206c6): Execute result and return data\\n    event ZbyteForwarderDPlatExecute(bool,bytes);\\n    /// @notice event (0x1f32728a): Forwarder post exec gas is set.\\n    event ForwarderDplatPostExecGasSet(uint256);\\n\\n    /// errors\\n    /// @notice error (0xd92e233d): Address is zero. \\n    error ZeroAddress();\\n    /// @notice error (0xfb3dd446): Array sizes don't match.\\n    error ArraySizeMismatch(uint256, uint256);\\n    /// @notice error (0xf9309a09): Not enough ether sent the function.\\n    error NotEnoughEtherSent(uint256, uint256);\\n    /// @notice error (0xb7da4a55): Failed to send ether.\\n    error FailedToSendEther(address,uint256,bytes);\\n    /// @notice error (0x9059e055): Not a worker.\\n    error NotAWorker(address);\\n\\n    // Minimum processing gas\\n    /// @notice Minimum amount of gas needed for a call via the forwarder\\n    uint256 public minProcessingGas;\\n    /// @notice Address of the Zbyte DPlat contract\\n    address public zbyteDPlat;\\n    /// @notice Amount of gas needed for a post execute to the DPlat\\n    uint256 public postExecGas;\\n    /// @notice Mapping of registered workers\\n    mapping (address => bool) public registeredWorkers;\\n\\n    /// @notice Modifier to restrict a function to only be callable by registered workers.\\n    /// @dev The function using this modifier will only execute if the sender's address is a registered worker\\\\\\n    ///  It will revert with a 'NotAWorker' error if the sender is not a registered worker.\\n    modifier onlyWorker() {\\n        if(!registeredWorkers[msg.sender]) revert NotAWorker(msg.sender);\\n        _;\\n    }\\n\\n    /// @notice Sets the post execute processing gas\\n    /// @param postExecGas_ The new minimum processing gas value\\n    function setPostExecGas(uint256 postExecGas_) public onlyOwner {\\n        postExecGas = postExecGas_;\\n        emit ForwarderDplatPostExecGasSet(postExecGas_);\\n    }\\n\\n    /// @notice Sets the minimum processing gas\\n    /// @param minProcessingGas_ The new minimum processing gas value\\n    function setMinProcessingGas(uint256 minProcessingGas_) public onlyOwner {\\n        minProcessingGas = minProcessingGas_;\\n        emit ForwarderDplatMinimumProcessingGasSet(minProcessingGas_);\\n    }\\n\\n    /// @notice Sets the address of the Zbyte DPlat contract\\n    /// @param zbyteDPlat_ The address of the Zbyte DPlat contract\\n    function setZbyteDPlat(address zbyteDPlat_) public onlyOwner {\\n        if(zbyteDPlat_ == address(0)) revert ZeroAddress();\\n        zbyteDPlat = zbyteDPlat_;\\n        emit ForwarderDplatSet(zbyteDPlat_);\\n    }\\n\\n    /// @notice Registers workers with the contract\\n    /// @param workers_ An array of worker addresses\\n    /// @param register_ An array of boolean values indicating registration status\\n    function registerWorkers(address[] calldata workers_,\\n                             bool[] calldata register_)\\n                             public onlyOwner {\\n        if(workers_.length != register_.length) revert ArraySizeMismatch(workers_.length, register_.length);\\n\\n        for(uint256 i = 0; i < workers_.length; i++) {\\n            if(workers_[i] == address(0)) revert ZeroAddress();\\n            registeredWorkers[workers_[i]] = register_[i];\\n            emit ForwarderDplatWorkerRegistered(workers_[i], register_[i]);\\n        }\\n    }\\n\\n    /// @notice Executes a forward request, ensuring that it is called by a registered worker and handling gas fees.\\n    /// @param req_ The forward request data containing the recipient, value, data, and other information.\\n    /// @param signature_ The signature for the forward request (if required).\\n    /// @return success A boolean indicating whether the execution was successful.\\n    /// @return returndata The return data from the executed contract.\\n    /// @dev This function facilitates call to a target contract while allowing the user to pay in DPLAT tokens\\\\\\n    ///  The user would have received vERC20 necessary for the call execution.  An equivalent amount is charged in vERC20 from the user\\\\\\n    ///  If the target contract accepts msg.value, equivalent of that is charged from the user during preExecute\\\\\\n    ///  If preExecute collects more vERC20 than that is needed for the call, an event is emitted with the refund amount\\\\\\n    ///  If the target contract sends any refund to the _msgSender(), the caller receives the refund directly\\n    ///  If the target contract call reverts, msg.value is not sent to the target and an event is emitted with the refund amount\\n    function zbyteExecute(ForwardRequest calldata req_,\\n                          bytes calldata signature_)\\n                          public\\n                          payable\\n                          onlyWorker\\n                          nonReentrant\\n                          returns(bool, bytes memory) {\\n        uint256 _startGas = gasleft();\\n        if(req_.value != msg.value) revert NotEnoughEtherSent(req_.value, msg.value);\\n        uint256 _preChargeEth = minProcessingGas * tx.gasprice + req_.value;\\n\\n        address _payer = IZbyteDPlat(zbyteDPlat).preExecute(req_.to, req_.from, bytes4(req_.data[:4]), _preChargeEth);\\n        (bool _success, bytes memory _returndata) = MinimalForwarder.execute(req_, signature_);\\n\\n\\n        uint256 _gasConsumedEth = (postExecGas + _startGas - gasleft()) * tx.gasprice;\\n        IZbyteDPlat(zbyteDPlat).postExecute(_payer, _success, req_.value, _gasConsumedEth, _preChargeEth);\\n        emit ZbyteForwarderDPlatExecute(_success, _returndata);\\n        return(_success, _returndata);\\n    }\\n\\n    /// @notice Allows the owner of the contract to withdraw the contract's Ether balance.\\n    /// @param receiver_ The address to which the Ether balance will be sent.\\n    function withdrawEth(address receiver_) public onlyOwner {\\n        (bool _sent, bytes memory _data) = receiver_.call{value: address(this).balance}(\\\"\\\");\\n        (_data);\\n        if(!_sent) revert FailedToSendEther(receiver_, address(this).balance, _data);\\n    }\\n}\",\"keccak256\":\"0xe31ebc9af033d70bf365303788165d645e213d68933b206a2e4a5908caf3b265\",\"license\":\"MIT\"},\"contracts/interface/dplat/IZbyteDPlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\ninterface IZbyteDPlat {\\n    function preExecute(address user_,\\n                        address dapp_,\\n                        bytes4 functionSig_,\\n                        uint256 chargeEth_) external returns(address);\\n\\n    function postExecute(address payer_,\\n                         bool executeResult_,\\n                         uint256 reqValue_,\\n                         uint256 gasConsumedEth_,\\n                         uint256 preChargeEth_) external;\\n}\",\"keccak256\":\"0xb9171148e358876d3dd736c03cb9e002e73e16427aa24c3c84479f3eda8f1549\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120806040523461016c5761001481610171565b60108152602081016f26b4b734b6b0b62337b93bb0b93232b960811b8152602060405161004081610171565b600580825264302e302e3160d81b9290910191825260008054336001600160a01b03198216811783556040519496929592916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08780a35190209320908360c0528160e0524660a05260208101917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f94858452604083015260608201524660808201523060a082015260a0815260c081019281841060018060401b03851117610158575082604052519020608052610100918252600160025561148791826101a38339608051826112ca015260a051826112a4015260c05182611319015260e0518261133f015251816112f60152f35b634e487b7160e01b81526041600452602490fd5b600080fd5b604081019081106001600160401b0382111761018c57604052565b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610013575b600080fd5b60003560e01c8063024ccc0e1461015357806325e160631461014a578063262b923f146101415780632d0335ab14610138578063420569da1461012f57806347153f8214610126578063486678931461011d578063560fd05314610114578063715018a61461010b5780638da5cb5b14610102578063a7a5064b146100f9578063bb9ff10a146100f0578063bf5d3bdb146100e7578063cb238ec3146100de578063e582bdc7146100d55763f2fde38b146100cd57600080fd5b61000e610a6d565b5061000e610a19565b5061000e6109ef565b5061000e6109cb565b5061000e61084d565b5061000e610530565b5061000e610506565b5061000e6104a3565b5061000e610484565b5061000e610430565b5061000e6103f7565b5061000e6102f1565b5061000e6102b3565b5061000e61021c565b5061000e610197565b5061000e610167565b600091031261000e57565b503461000e57600036600319011261000e576020600354604051908152f35b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576004356101b581610186565b60018060a01b036000916101cd828454163314610b0a565b8280808047855af16101dd610e2a565b90156101e7578380f35b610218904760405194859463b7da4a5560e01b8652166004850152602484015260606044840152606483019061039b565b0390fd5b503461000e57602036600319011261000e5760043561023a81610186565b6000546001600160a01b0391906102549083163314610b0a565b1680156102a1576020817feae099e1050269219af48fdaaaddabd62a71f9c26f5d2b56421f2c5634c49e2d926bffffffffffffffffffffffff60a01b6004541617600455604051908152a1005b60405163d92e233d60e01b8152600490fd5b503461000e57602036600319011261000e576004356102d181610186565b60018060a01b031660005260016020526020604060002054604051908152f35b503461000e57602036600319011261000e5760043561030f81610186565b60018060a01b03166000526006602052602060ff604060002054166040519015158152f35b906003199060408284011261000e5760043567ffffffffffffffff9283821161000e5760c090828603011261000e57600401926024359083821161000e578060238301121561000e57816004013593841161000e576024848301011161000e576024019190565b919082519283825260005b8481106103c7575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016103a6565b6040906103f4939215158152816020820152019061039b565b90565b5061040a61040436610334565b91610e77565b9061041a604051928392836103db565b0390f35b602090600319011261000e5760043590565b503461000e577f1f32728a0854893ebabc9e4ca396948843c23754c3e713d6e29b34a06b22125c60206104623661041e565b61047760018060a01b03600054163314610b0a565b80600555604051908152a1005b503461000e57600036600319011261000e576020600554604051908152f35b503461000e5760008060031936011261050357805481906001600160a01b038116906104d0338314610b0a565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b5061053a36610334565b60003381526020926006845260409160ff8382205416156108055760028054146107c157600280555a9383870135903482036107a357610586826105816003543a906113e2565b610dfa565b9384886105ac6105a06105a060045460018060a01b031690565b6001600160a01b031690565b6105b7828d01610b9c565b908c886105e36105dd6105d76105cc85610b9c565b9460a0810190610ba6565b906113f5565b90611403565b8c5163171cc2a560e31b81526001600160a01b0395861660048201529290941660248301526001600160e01b03199093166044820152606481019490945283916084918391905af1988915610796575b8599610757575b505061066a9161064e91610659999a610e77565b979096600554610dfa565b6106653a915a90611444565b6113e2565b600454909390610684906105a0906001600160a01b031681565b90813b156107535785516337d5ce0160e11b81526001600160a01b039990991660048a015286151560248a01526044890192909252606488019390935260848701529394929361041a9391829060a490829084905af18015610746575b61072d575b507f5c3206c687e636d8803f1e04675d3774fe8d87aafdc4d2ba7f9ec2b6cd5bd46d8151806107168787836103db565b0390a16107236001600255565b51928392836103db565b8061073a61074092610bf0565b8061015c565b386106e6565b61074e611188565b6106e1565b8380fd5b61065999509161078461066a94928461064e95903d1061078f575b61077c8183610c11565b81019061142f565b99509181935061063a565b503d610772565b61079e611188565b610633565b845163f9309a0960e01b815260048101839052346024820152604490fd5b825162461bcd60e51b815260048101869052601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8251639059e05560e01b8152336004820152602490fd5b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760408060031936011261000e57600480359167ffffffffffffffff9283811161000e57610883903690840161081c565b9360243590811161000e5761089b903690850161081c565b90916108b260018060a01b03600054163314610b0a565b8186036109a85760005b8681106108c557005b6108db6105a06108d6838a866113af565b610b9c565b1561099857806109366108fa6108f56109939487896113af565b6113d5565b61092561090b6108d6858d896113af565b6001600160a01b0316600090815260066020526040902090565b9060ff801983541691151516179055565b7fe1554bdacf83f01a59f99f5f1b39cde978a69658a23bc647bb80eac05982fe796109656108d6838b876113af565b6109736108f584888a6113af565b88516001600160a01b0392909216825215156020820152604090a1611393565b6108bc565b845163d92e233d60e01b81528690fd5b509151637d9eea2360e11b81529283019384525060208301529081906040010390fd5b503461000e5760206109e56109df36610334565b91610c95565b6040519015158152f35b503461000e57600036600319011261000e576004546040516001600160a01b039091168152602090f35b503461000e577f6342abcf92d1bbe9cd955214f1570a0381aba5f9a476d99c428f19b96363d7e16020610a4b3661041e565b610a6060018060a01b03600054163314610b0a565b80600355604051908152a1005b503461000e57602036600319011261000e57600435610a8b81610186565b6000546001600160a01b0390610aa49082163314610b0a565b811615610ab657610ab490610b55565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15610b1157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b356103f481610186565b903590601e198136030182121561000e570180359067ffffffffffffffff821161000e5760200191813603831361000e57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610c0457604052565b610c0c610bd9565b604052565b90601f8019910116810190811067ffffffffffffffff821117610c0457604052565b60209067ffffffffffffffff8111610c51575b601f01601f19160190565b610c59610bd9565b610c46565b929192610c6a82610c33565b91610c786040519384610c11565b82948184528183011161000e578281602093846000960137010152565b91610d7990610d73843593610ca985610186565b610d6b610cb860208801610b9c565b87610d63608082013598610d55610cdc610cd560a0860186610ba6565b3691610c5e565b602081519101208b604051958694602086019860406060840135930135918a9260c09491979695929760e08501987fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e48865260018060a01b0380921660208701521660408501526060840152608083015260a08201520152565b03601f198101835282610c11565b51902061124b565b923691610c5e565b90610f6c565b90610da0610d8684610b9c565b6001600160a01b0316600090815260016020526040902090565b54149182610dad57505090565b610dbc9192506105a090610b9c565b6001600160a01b039091161490565b50634e487b7160e01b600052601160045260246000fd5b9060018201809211610df057565b610df8610dcb565b565b91908201809211610df057565b826014949392823701906bffffffffffffffffffffffff199060601b1681520190565b3d15610e55573d90610e3b82610c33565b91610e496040519384610c11565b82523d6000602084013e565b606090565b15610e6157565b634e487b7160e01b600052600160045260246000fd5b9291610e839184610c95565b15610f0c57610e956080830135610de2565b610ea1610d8684610b9c565b55600080610eb160208501610b9c565b936040606082013595610ec760a0840184610ba6565b610eea610ed686959395610b9c565b91610d558451938492602084019889610e07565b519301359087f1610f08610efc610e2a565b93603f5a910410610e5a565b9190565b60405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b6064820152608490fd5b6103f491610f7991611122565b919091610fa1565b60051115610f8b57565b634e487b7160e01b600052602160045260246000fd5b610faa81610f81565b80610fb25750565b610fbb81610f81565b600181036110085760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b61101181610f81565b6002810361105e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b61106781610f81565b600381036110bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b806110cb600492610f81565b146110d257565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608490fd5b81516041810361114f57509061114b916020820151906060604084015193015160001a90611195565b9091565b60400361117e57602082015160409092015161114b926001600160ff1b03821692909160ff1c601b0190611195565b5050600090600290565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161123f5760ff16601b81141580611234575b611228579160809493916020936040519384528484015260408301526060820152600093849182805260015afa1561121b575b81516001600160a01b03811615611215579190565b50600190565b611223611188565b611200565b50505050600090600490565b50601c8114156111cd565b50505050600090600390565b6112536112a1565b9060405190602082019261190160f01b845260228301526042820152604281526080810181811067ffffffffffffffff821117611294575b60405251902090565b61129c610bd9565b61128b565b467f0000000000000000000000000000000000000000000000000000000000000000036112ec577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff8211176112945760405251902090565b60019060001981146113a3570190565b6113ab610dcb565b0190565b91908110156113bf5760051b0190565b634e487b7160e01b600052603260045260246000fd5b35801515810361000e5790565b81810292918115918404141715610df057565b9060041161000e5790600490565b6001600160e01b0319903581811693926004811061142057505050565b60040360031b82901b16169150565b9081602091031261000e57516103f481610186565b91908203918211610df05756fea264697066735822122018505fb525cb9503a5bdf2053b0aa8350273eec053300bd08b224baa3178139364736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerWorkers(address[],bool[])": {
        "params": {
          "register_": "An array of boolean values indicating registration status",
          "workers_": "An array of worker addresses"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMinProcessingGas(uint256)": {
        "params": {
          "minProcessingGas_": "The new minimum processing gas value"
        }
      },
      "setPostExecGas(uint256)": {
        "params": {
          "postExecGas_": "The new minimum processing gas value"
        }
      },
      "setZbyteDPlat(address)": {
        "params": {
          "zbyteDPlat_": "The address of the Zbyte DPlat contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawEth(address)": {
        "params": {
          "receiver_": "The address to which the Ether balance will be sent."
        }
      },
      "zbyteExecute((address,address,uint256,uint256,uint256,bytes),bytes)": {
        "details": "This function facilitates call to a target contract while allowing the user to pay in DPLAT tokens\\  The user would have received vERC20 necessary for the call execution.  An equivalent amount is charged in vERC20 from the user\\  If the target contract accepts msg.value, equivalent of that is charged from the user during preExecute\\  If preExecute collects more vERC20 than that is needed for the call, an event is emitted with the refund amount\\  If the target contract sends any refund to the _msgSender(), the caller receives the refund directly  If the target contract call reverts, msg.value is not sent to the target and an event is emitted with the refund amount",
        "params": {
          "req_": "The forward request data containing the recipient, value, data, and other information.",
          "signature_": "The signature for the forward request (if required)."
        },
        "returns": {
          "_0": "success A boolean indicating whether the execution was successful.",
          "_1": "returndata The return data from the executed contract."
        }
      }
    },
    "title": "The ZBYT Dplat forwarder contract Todo: Integrate chargeAndBurnZbyteVToken and refundZbyteVToken with ZbyteDPlat",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ArraySizeMismatch(uint256,uint256)": [
        {
          "notice": "error (0xfb3dd446): Array sizes don't match."
        }
      ],
      "FailedToSendEther(address,uint256,bytes)": [
        {
          "notice": "error (0xb7da4a55): Failed to send ether."
        }
      ],
      "NotAWorker(address)": [
        {
          "notice": "error (0x9059e055): Not a worker."
        }
      ],
      "NotEnoughEtherSent(uint256,uint256)": [
        {
          "notice": "error (0xf9309a09): Not enough ether sent the function."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "errorserror (0xd92e233d): Address is zero. "
        }
      ]
    },
    "events": {
      "ForwarderDplatMinimumProcessingGasSet(uint256)": {
        "notice": "event (0x6342abcf): Forwarder minimum processing gas is set."
      },
      "ForwarderDplatPostExecGasSet(uint256)": {
        "notice": "event (0x1f32728a): Forwarder post exec gas is set."
      },
      "ForwarderDplatSet(address)": {
        "notice": "eventsevent (0xeae099e1): Forwarder address is set."
      },
      "ForwarderDplatWorkerRegistered(address,bool)": {
        "notice": "event (0xe1554bda): Forwarder worker is registered."
      },
      "RefundEth(address,uint256)": {
        "notice": "event (0xe5cac075): Refund Eth to payer."
      },
      "ZbyteForwarderDPlatExecute(bool,bytes)": {
        "notice": "event (0x5c3206c6): Execute result and return data"
      }
    },
    "kind": "user",
    "methods": {
      "minProcessingGas()": {
        "notice": "Minimum amount of gas needed for a call via the forwarder"
      },
      "postExecGas()": {
        "notice": "Amount of gas needed for a post execute to the DPlat"
      },
      "registerWorkers(address[],bool[])": {
        "notice": "Registers workers with the contract"
      },
      "registeredWorkers(address)": {
        "notice": "Mapping of registered workers"
      },
      "setMinProcessingGas(uint256)": {
        "notice": "Sets the minimum processing gas"
      },
      "setPostExecGas(uint256)": {
        "notice": "Sets the post execute processing gas"
      },
      "setZbyteDPlat(address)": {
        "notice": "Sets the address of the Zbyte DPlat contract"
      },
      "withdrawEth(address)": {
        "notice": "Allows the owner of the contract to withdraw the contract's Ether balance."
      },
      "zbyteDPlat()": {
        "notice": "Address of the Zbyte DPlat contract"
      },
      "zbyteExecute((address,address,uint256,uint256,uint256,bytes),bytes)": {
        "notice": "Executes a forward request, ensuring that it is called by a registered worker and handling gas fees."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/dplat/ZbyteForwarderDplat.sol:ZbyteForwarderDPlat",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 135,
        "contract": "contracts/dplat/ZbyteForwarderDplat.sol:ZbyteForwarderDPlat",
        "label": "_nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 377,
        "contract": "contracts/dplat/ZbyteForwarderDplat.sol:ZbyteForwarderDPlat",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6315,
        "contract": "contracts/dplat/ZbyteForwarderDplat.sol:ZbyteForwarderDPlat",
        "label": "minProcessingGas",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6318,
        "contract": "contracts/dplat/ZbyteForwarderDplat.sol:ZbyteForwarderDPlat",
        "label": "zbyteDPlat",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6321,
        "contract": "contracts/dplat/ZbyteForwarderDplat.sol:ZbyteForwarderDPlat",
        "label": "postExecGas",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6326,
        "contract": "contracts/dplat/ZbyteForwarderDplat.sol:ZbyteForwarderDPlat",
        "label": "registeredWorkers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}