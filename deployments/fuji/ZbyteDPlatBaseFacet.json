{
  "address": "0x469e99DB6518022e0F3C9A54fEFA599EADDf93C2",
  "abi": [
    {
      "inputs": [],
      "name": "NotAForwarder",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ZbyteBurnFactorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ZbyteVTokenAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ZbyteValueInNativeEthGweiSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getZbyteBurnFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getZbyteVToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getZbyteValueInNativeEthGwei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zbyteBurnFactor_",
          "type": "uint256"
        }
      ],
      "name": "setZbyteBurnFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zbyteVToken_",
          "type": "address"
        }
      ],
      "name": "setZbyteVToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zbyteValueInNativeEthGwei_",
          "type": "uint256"
        }
      ],
      "name": "setZbyteValueInNativeEthGwei",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "148873f108a8132414e7e81c341656a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotAForwarder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ZbyteBurnFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ZbyteVTokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ZbyteValueInNativeEthGweiSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getZbyteBurnFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZbyteVToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZbyteValueInNativeEthGwei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zbyteBurnFactor_\",\"type\":\"uint256\"}],\"name\":\"setZbyteBurnFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zbyteVToken_\",\"type\":\"address\"}],\"name\":\"setZbyteVToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zbyteValueInNativeEthGwei_\",\"type\":\"uint256\"}],\"name\":\"setZbyteValueInNativeEthGwei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"DPlat Base Facet contract\",\"kind\":\"dev\",\"methods\":{\"getZbyteBurnFactor()\":{\"returns\":{\"_0\":\"The Zbyte burn factor (0-100).\"}},\"getZbyteVToken()\":{\"returns\":{\"_0\":\"The address of the ZbyteVToken.\"}},\"getZbyteValueInNativeEthGwei()\":{\"returns\":{\"_0\":\"The value of Zbyte in native Ether (in Gwei).\"}},\"setZbyteBurnFactor(uint256)\":{\"params\":{\"zbyteBurnFactor_\":\"Zbyte burn factor\"}},\"setZbyteVToken(address)\":{\"params\":{\"zbyteVToken_\":\"The address of the ZbyteVToken.\"}},\"setZbyteValueInNativeEthGwei(uint256)\":{\"params\":{\"zbyteValueInNativeEthGwei_\":\"The value of Zbyte in native Ether (in Gwei).\"}}},\"title\":\"DPlat Base Facet contract\",\"version\":1},\"userdoc\":{\"errors\":{\"NotAForwarder()\":[{\"notice\":\"error (0x5ac85bab): Caller is not a forwarder\"}]},\"events\":{\"ZbyteBurnFactorSet(uint256)\":{\"notice\":\"event (0xd7a7cf8c): Zbyte burn factor is set.\"},\"ZbyteVTokenAddressSet(address)\":{\"notice\":\"event (0x10e1dc22): VZbyte token address is set.\"},\"ZbyteValueInNativeEthGweiSet(uint256)\":{\"notice\":\"event (0xa0e61546): Zbyte token value in terms of native eth is set.\"}},\"kind\":\"user\",\"methods\":{\"getZbyteBurnFactor()\":{\"notice\":\"Gets the Zbyte burn factor.\"},\"getZbyteVToken()\":{\"notice\":\"Gets the address of the ZbyteVToken.\"},\"getZbyteValueInNativeEthGwei()\":{\"notice\":\"Gets the value of Zbyte in native Ether (in Gwei).\"},\"setZbyteBurnFactor(uint256)\":{\"notice\":\"Sets the Zbyte burn factor.\"},\"setZbyteVToken(address)\":{\"notice\":\"Sets the address of the ZbyteVToken.\"},\"setZbyteValueInNativeEthGwei(uint256)\":{\"notice\":\"Sets the value of Zbyte in native Ether (in Gwei).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dplat/ZbyteDPlatDiamond/ZbyteDPlatBaseFacet.sol\":\"ZbyteDPlatBaseFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/dplat/ZbyteDPlatDiamond/LibDPlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @notice Library for DPlat base storage and functions\\n/// @dev Library for DPlat base storage and functions\\nlibrary LibDPlatBase {\\n\\n    /// @notice Diamond storage for DPlat Base struct\\n    struct DiamondStorage {\\n        address zbyteVToken; \\n        uint256 zbyteValueInNativeEthGwei; \\n        uint256 zbyteBurnFactor;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev zbyteVToken: The address of the ZbyteVToken\\\\\\n    ///  zbyteValueInNativeEthGwei: The value of Zbyte in native Ether (in Gwei)\\\\\\n    ///  zbyteBurnFactor: Burn factor, represents the percent of gas used that will be 'burnt'\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibDPlatBase.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    /// @notice Gets the ZbyteVToken address.\\n    /// @return The address of the ZbyteVToken.\\n    function _getZbyteVToken() internal view returns (address) {\\n        DiamondStorage storage _dsb = diamondStorage();\\n        return _dsb.zbyteVToken;\\n    }\\n\\n    /// @notice Calculates the native Ether equivalent value of Zbyte.\\n    /// @param ethAmount_ The amount in Ether (wei).\\n    /// @return The equivalent value in Zbyte (wei).\\n    /// @dev ethAmountInGWei = (ethAmountinWei/10**9), inZbyte = ethAmountInGWei*zbyteValueInNativeEthGwei, inZbyteWei = inZbyte*10**18\\n    function _getNativeEthEquivalentZbyteValue(uint256 ethAmount_) internal view returns (uint256) {\\n        DiamondStorage storage _dsb = diamondStorage();\\n        return (ethAmount_ * 10 ** 9) / _dsb.zbyteValueInNativeEthGwei;\\n    }\\n\\n    /// @notice Gets the Zbyte burn factor.\\n    /// @return The Zbyte burn factor.\\n    function _getZbyteBurnFactor() internal view returns (uint256) {\\n        DiamondStorage storage _dsb = diamondStorage();\\n        return _dsb.zbyteBurnFactor;\\n    }\\n}\\n\\n/// @notice Library for DPlat registration storage and functions\\n/// @dev Library for DPlat registration storage and functions\\nlibrary LibDPlatRegistration {\\n\\n    /// @notice Diamond storage for DPlat registration struct\\n    struct DiamondStorage {\\n        mapping(bytes4 => address) registeredEnterprises;\\n        mapping(bytes4 => address) registeredEnterprisePolicy;\\n        mapping(address => bytes4) registeredDapps;\\n        mapping(address => bytes4) registeredEnterpriseUsers;\\n        mapping(bytes4 => uint256) enterpriseLimit;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev registeredEnterprises: Mapping of registered enterprises by bytes4 ID\\\\\\n    ///  registeredEnterprisePolicy: Mapping of enterprise policies by bytes4 ID\\\\\\n    ///  registeredDapps: Mapping of registered Dapps by address\\\\\\n    ///  registeredEnterpriseUsers: Mapping of registered enterprise users by address\\\\\\n    ///  enterpriseLimit: Mapping of enterprise limits by bytes4 ID\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibDPlatRegistration.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    /// @notice Gets the enterprise limit for a given enterprise ID.\\n    /// @param enterprise_ The enterprise ID.\\n    /// @return The enterprise limit.\\n    function _getEnterpriseLimit(bytes4 enterprise_) internal view returns (uint256) {\\n        DiamondStorage storage _dsp = diamondStorage();\\n        return _dsp.enterpriseLimit[enterprise_];\\n    }\\n\\n    /// @notice Sets the enterprise limit for a given enterprise ID.\\n    /// @param enterprise_ The enterprise ID.\\n    /// @param amount_ The limit amount to set.\\n    function _setEntepriseLimit(bytes4 enterprise_, uint256 amount_) internal {\\n        DiamondStorage storage _dsp = diamondStorage();\\n        _dsp.enterpriseLimit[enterprise_] = amount_;\\n    }\\n\\n    /// @notice Checks if an enterprise has a registered policy and retrieves the policy address.\\n    /// @param enterprise_ The enterprise ID.\\n    /// @return A tuple indicating whether the enterprise policy exists and the policy address.\\n    function _doesEnterpriseHavePolicy(bytes4 enterprise_) internal view returns (bool, address) {\\n        DiamondStorage storage _dsp = diamondStorage();\\n        address _enterprisePolicy = _dsp.registeredEnterprisePolicy[enterprise_];\\n        bool _enterprisePolicyExists = (_enterprisePolicy != address(0));\\n        return (_enterprisePolicyExists, _enterprisePolicy);\\n    }\\n\\n    /// @notice Checks if the given provider is registered\\n    /// @param provider_ The provider address\\n    /// @return bool indicating if the provider is registered\\n    function isProviderRegistered(address provider_) internal view returns(bool) {\\n        LibDPlatProvider.DiamondStorage storage _dsp = LibDPlatProvider.diamondStorage();\\n        return _dsp.registeredProviders[provider_];\\n    }\\n\\n    /// @notice Checks if the given agent is registered\\n    /// @param agent_ The agent address\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isProviderAgentRegistered(address agent_) internal view returns(address) {\\n        LibDPlatProvider.DiamondStorage storage _dsp = LibDPlatProvider.diamondStorage();\\n        return _dsp.registeredProviderAgent[agent_];\\n    }\\n\\n    /// @notice Checks if the given enterprise is registered\\n    /// @param enterprise_ The enterprise bytes4 ID\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isEnterpriseRegistered(bytes4 enterprise_) internal view returns(address) {\\n        LibDPlatRegistration.DiamondStorage storage _dsr = LibDPlatRegistration.diamondStorage();\\n        return _dsr.registeredEnterprises[enterprise_];\\n    }\\n\\n    /// @notice Checks if the given user is registered with an enterprise\\n    /// @param user_ The user address\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isEnterpriseUserRegistered(address user_) internal view returns(bytes4) {\\n        LibDPlatRegistration.DiamondStorage storage _dsr = LibDPlatRegistration.diamondStorage();\\n        return _dsr.registeredEnterpriseUsers[user_];\\n    }\\n\\n    /// @notice Checks if the given dapp (contract) is registered with an enterprise\\n    /// @param dapp_ The contract address\\n    /// @return returns the address of provider if registered, or address(0)\\n    function isEnterpriseDappRegistered(address dapp_) internal view returns(bytes4) {\\n        LibDPlatRegistration.DiamondStorage storage _dsr = LibDPlatRegistration.diamondStorage();\\n        return _dsr.registeredDapps[dapp_];\\n    }\\n}\\n\\n/// @notice Library for DPlat provider storage and functions\\n/// @dev Library for DPlat provider storage and functions\\nlibrary LibDPlatProvider {\\n\\n    /// @notice Diamond storage for DPlat provider struct\\n    struct DiamondStorage {\\n        mapping(address => bool) registeredProviders;\\n        mapping(address => address) registeredProviderAgent;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev registeredProviders: Mapping of registered providers by address\\\\\\n    ///  registeredProviderAgent: Mapping of registered provider agents by address\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibDPlatProvider.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a1ea6bef1a28fe4b2a2deabca556ee95480bbc0d904984c0cc75d5631a9b15f\",\"license\":\"MIT\"},\"contracts/dplat/ZbyteDPlatDiamond/ZbyteDPlatBaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibDPlat.sol\\\";\\nimport \\\"../../utils/ZbyteContextDiamond.sol\\\";\\n\\n/// @title DPlat Base Facet contract\\n/// @dev DPlat Base Facet contract\\ncontract ZbyteDPlatBaseFacet is ZbyteContextDiamond {\\n\\n    // events\\n    /// @notice event (0x10e1dc22): VZbyte token address is set.\\n    event ZbyteVTokenAddressSet(address);\\n    /// @notice event (0xa0e61546): Zbyte token value in terms of native eth is set.\\n    event ZbyteValueInNativeEthGweiSet(uint256);\\n    /// @notice event (0xd7a7cf8c): Zbyte burn factor is set.\\n    event ZbyteBurnFactorSet(uint256);\\n\\n    /// @notice Sets the address of the ZbyteVToken.\\n    /// @param zbyteVToken_ The address of the ZbyteVToken.\\n    function setZbyteVToken(address zbyteVToken_) public onlyOwner {\\n        LibDPlatBase.DiamondStorage storage _dsb = LibDPlatBase.diamondStorage();\\n        _dsb.zbyteVToken = zbyteVToken_;\\n        emit ZbyteVTokenAddressSet(zbyteVToken_);\\n    }\\n\\n    /// @notice Sets the Zbyte burn factor.\\n    /// @param zbyteBurnFactor_ Zbyte burn factor\\n    function setZbyteBurnFactor(uint256 zbyteBurnFactor_) public onlyOwner {\\n        LibDPlatBase.DiamondStorage storage _dsb = LibDPlatBase.diamondStorage();\\n        _dsb.zbyteBurnFactor = zbyteBurnFactor_;\\n        emit ZbyteBurnFactorSet(zbyteBurnFactor_);\\n    }\\n\\n    /// @notice Gets the address of the ZbyteVToken.\\n    /// @return The address of the ZbyteVToken.\\n    function getZbyteVToken() public view returns (address) {\\n        return LibDPlatBase._getZbyteVToken();\\n    }\\n\\n    /// @notice Sets the value of Zbyte in native Ether (in Gwei).\\n    /// @param zbyteValueInNativeEthGwei_ The value of Zbyte in native Ether (in Gwei).\\n    function setZbyteValueInNativeEthGwei(uint256 zbyteValueInNativeEthGwei_) public onlyOwner {\\n        LibDPlatBase.DiamondStorage storage _dsb = LibDPlatBase.diamondStorage();\\n        _dsb.zbyteValueInNativeEthGwei = zbyteValueInNativeEthGwei_;\\n        emit ZbyteValueInNativeEthGweiSet(zbyteValueInNativeEthGwei_);\\n    }\\n\\n    /// @notice Gets the value of Zbyte in native Ether (in Gwei).\\n    /// @return The value of Zbyte in native Ether (in Gwei).\\n    function getZbyteValueInNativeEthGwei() public view returns (uint256) {\\n        LibDPlatBase.DiamondStorage storage _dsb = LibDPlatBase.diamondStorage();\\n        return _dsb.zbyteValueInNativeEthGwei;\\n    }\\n\\n    /// @notice Gets the Zbyte burn factor.\\n    /// @return The Zbyte burn factor (0-100).\\n    function getZbyteBurnFactor() public view returns (uint256) {\\n        return LibDPlatBase._getZbyteBurnFactor();\\n    }\\n}\\n\",\"keccak256\":\"0x19a1874edc834268c16e5435d9aad5a9c3195ee158edcea2a8b3187de4cc8526\",\"license\":\"MIT\"},\"contracts/utils/LibZbyteForwarderFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\n\\n/// @notice The Zbyte Forwarder Facet\\n/// @dev The Zbyte Forwarder Facet\\nlibrary LibZbyteForwarderFacet {\\n\\n    /// @notice Diamond storage for DPlat registration struct\\n    struct DiamondStorage {\\n        address trustedForwarder;\\n    }\\n\\n    /// @notice Retrieves the DiamondStorage struct for the library.\\n    /// @dev trustedForwarder: Address of the trusted forwarder\\n    function diamondStorage() internal pure returns(DiamondStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.LibZbyteForwarderFacet.v1\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    /// @notice Sets the address of trusted forwarder\\n    /// @param forwarder_: Address of the trusted forwarder\\n    function _setTrustedForwarder(address forwarder_) internal {\\n        LibDiamond.enforceIsContractOwner();\\n        DiamondStorage storage dsc = diamondStorage();\\n        dsc.trustedForwarder = forwarder_;\\n    }\\n\\n    /// @notice Gets the address of trusted forwarder\\n    function _getTrustedForwarder() internal view returns(address) {\\n        DiamondStorage storage dsc = diamondStorage();\\n        return dsc.trustedForwarder;\\n    }\\n\\n    /// @notice Checks if the given forwarder is the trusted forwarder\\n    /// @param forwarder_: Address of the forwarder to check\\n    function isTrustedForwarder(address forwarder_) internal view returns(bool) {\\n        DiamondStorage storage dsc = diamondStorage();\\n        return forwarder_ == dsc.trustedForwarder;\\n    }\\n}\",\"keccak256\":\"0x046f66cd93dfb0106178dea0021caab2112b4fe405634753c433ef0b2d4722e4\",\"license\":\"MIT\"},\"contracts/utils/ZbyteContextDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./LibZbyteForwarderFacet.sol\\\";\\n\\ncontract ZbyteContextDiamond {\\n    /// @notice error (0x5ac85bab): Caller is not a forwarder\\n    error NotAForwarder();\\n\\n    /// @notice modifier to enforce that the caller is the owner\\n    modifier onlyOwner {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    /// @notice modifier to enforce that the caller is the forwarder\\n    modifier onlyForwarder {\\n        if(LibZbyteForwarderFacet.isTrustedForwarder(_msgSender())) revert NotAForwarder();\\n        _;\\n    }\\n\\n    /// @notice Extract true caller if called via trusted forwarder\\n    function _msgSender() internal view returns (address ret) {\\n        if (msg.data.length >= 20 && LibZbyteForwarderFacet.isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @notice Extract data if called via trusted forwarder\\n    function _msgData() internal view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && LibZbyteForwarderFacet.isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\",\"keccak256\":\"0x75604132530d5762cb3372036cef4627656a690690da7eb7d9628a3cd244ab5f\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761034a908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c80630d6f020e146102245780635652ce0e146101b7578063819ab8701461017a578063a8f7e86f1461013d578063d5755003146100ab5763d7cd686a1461006157600080fd5b346100a757816003193601126100a7577f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30825490516001600160a01b039091168152602090f35b5080fd5b50346100a75760203660031901126100a7576004356001600160a01b0381169190829003610139577f10e1dc224df36a1f4b4122ccf0b52dc1d14592537fd5e25436beb33d0f12d5f991602091610100610291565b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc308280546001600160a01b0319168317905551908152a180f35b8280fd5b50346100a757816003193601126100a7576020907f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3084549051908152f35b50346100a757816003193601126100a7576020907f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3083549051908152f35b50346100a75760203660031901126100a75760207fa0e61546b4c2d3b3fe28108663000d3dea1a9a7c06f9d4f11f311eed0f834f6491600435906101f9610291565b817f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30835551908152a180f35b50346100a75760203660031901126100a75760207fd7a7cf8c12afe4c79f60ab5e2a24bab1978af679f071af7602901a77208e45919160043590610266610291565b817f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30845551908152a180f35b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031633036102c457565b60405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608490fdfea26469706673582212208e406477fa5573f30b094a06db677aacfef6ddadcf254f51047ec0358cd10a8764736f6c63430008110033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c80630d6f020e146102245780635652ce0e146101b7578063819ab8701461017a578063a8f7e86f1461013d578063d5755003146100ab5763d7cd686a1461006157600080fd5b346100a757816003193601126100a7577f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30825490516001600160a01b039091168152602090f35b5080fd5b50346100a75760203660031901126100a7576004356001600160a01b0381169190829003610139577f10e1dc224df36a1f4b4122ccf0b52dc1d14592537fd5e25436beb33d0f12d5f991602091610100610291565b7f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc308280546001600160a01b0319168317905551908152a180f35b8280fd5b50346100a757816003193601126100a7576020907f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3084549051908152f35b50346100a757816003193601126100a7576020907f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc3083549051908152f35b50346100a75760203660031901126100a75760207fa0e61546b4c2d3b3fe28108663000d3dea1a9a7c06f9d4f11f311eed0f834f6491600435906101f9610291565b817f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30835551908152a180f35b50346100a75760203660031901126100a75760207fd7a7cf8c12afe4c79f60ab5e2a24bab1978af679f071af7602901a77208e45919160043590610266610291565b817f2d1bb8cbbb4d7783ef4f9001d0b7478185bda33b0093daf501edbebc75bc30845551908152a180f35b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031633036102c457565b60405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608490fdfea26469706673582212208e406477fa5573f30b094a06db677aacfef6ddadcf254f51047ec0358cd10a8764736f6c63430008110033",
  "devdoc": {
    "details": "DPlat Base Facet contract",
    "kind": "dev",
    "methods": {
      "getZbyteBurnFactor()": {
        "returns": {
          "_0": "The Zbyte burn factor (0-100)."
        }
      },
      "getZbyteVToken()": {
        "returns": {
          "_0": "The address of the ZbyteVToken."
        }
      },
      "getZbyteValueInNativeEthGwei()": {
        "returns": {
          "_0": "The value of Zbyte in native Ether (in Gwei)."
        }
      },
      "setZbyteBurnFactor(uint256)": {
        "params": {
          "zbyteBurnFactor_": "Zbyte burn factor"
        }
      },
      "setZbyteVToken(address)": {
        "params": {
          "zbyteVToken_": "The address of the ZbyteVToken."
        }
      },
      "setZbyteValueInNativeEthGwei(uint256)": {
        "params": {
          "zbyteValueInNativeEthGwei_": "The value of Zbyte in native Ether (in Gwei)."
        }
      }
    },
    "title": "DPlat Base Facet contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotAForwarder()": [
        {
          "notice": "error (0x5ac85bab): Caller is not a forwarder"
        }
      ]
    },
    "events": {
      "ZbyteBurnFactorSet(uint256)": {
        "notice": "event (0xd7a7cf8c): Zbyte burn factor is set."
      },
      "ZbyteVTokenAddressSet(address)": {
        "notice": "event (0x10e1dc22): VZbyte token address is set."
      },
      "ZbyteValueInNativeEthGweiSet(uint256)": {
        "notice": "event (0xa0e61546): Zbyte token value in terms of native eth is set."
      }
    },
    "kind": "user",
    "methods": {
      "getZbyteBurnFactor()": {
        "notice": "Gets the Zbyte burn factor."
      },
      "getZbyteVToken()": {
        "notice": "Gets the address of the ZbyteVToken."
      },
      "getZbyteValueInNativeEthGwei()": {
        "notice": "Gets the value of Zbyte in native Ether (in Gwei)."
      },
      "setZbyteBurnFactor(uint256)": {
        "notice": "Sets the Zbyte burn factor."
      },
      "setZbyteVToken(address)": {
        "notice": "Sets the address of the ZbyteVToken."
      },
      "setZbyteValueInNativeEthGwei(uint256)": {
        "notice": "Sets the value of Zbyte in native Ether (in Gwei)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}