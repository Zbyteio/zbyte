{
  "address": "0x508426a8c68A3BaE89E4cc4b4a9c23B02D94924B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotSendEther",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BurnRateInMillSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeEthEquivalentZbyteInGwei",
          "type": "uint256"
        }
      ],
      "name": "NativeEthEquivalentZbyteSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "WorkerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zbytePriceInGwei",
          "type": "uint256"
        }
      ],
      "name": "ZbytePriceInGweiSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedWorkers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRateInMill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount_",
          "type": "uint256"
        }
      ],
      "name": "convertEthToEquivalentZbyte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceInMill_",
          "type": "uint256"
        }
      ],
      "name": "convertMillToZbyte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDPlatFeeInZbyte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeEthEquivalentZbyteInGwei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "register_",
          "type": "bool"
        }
      ],
      "name": "registerWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "burnRate_",
          "type": "uint256"
        }
      ],
      "name": "setBurnRateInMill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nativeEthEquivalentZbyteInGwei_",
          "type": "uint256"
        }
      ],
      "name": "setNativeEthEquivalentZbyteInGwei",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nativeEthEquivalentZbyteInGwei_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zbytePriceInGwei_",
          "type": "uint256"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zbytePriceInGwei_",
          "type": "uint256"
        }
      ],
      "name": "setZbytePriceInGwei",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zbytePriceEquivalentInGwei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6df5473a4ae0758f8c460874577b073e996d943b908f9f06f40c3acfd8a5d48f",
  "receipt": {
    "to": null,
    "from": "0x4661D1e9fBf54F7EE418D64A31192346e9E3B8bc",
    "contractAddress": "0x508426a8c68A3BaE89E4cc4b4a9c23B02D94924B",
    "transactionIndex": 43,
    "gasUsed": "536027",
    "logsBloom": "0x
    "blockHash": "0x3b7a4945a0bc3c0d7d70234404608a01965e72200f1ea94631437a3726896d50",
    "transactionHash": "0x6df5473a4ae0758f8c460874577b073e996d943b908f9f06f40c3acfd8a5d48f",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 52118197,
        "transactionHash": "0x6df5473a4ae0758f8c460874577b073e996d943b908f9f06f40c3acfd8a5d48f",
        "address": "0x508426a8c68A3BaE89E4cc4b4a9c23B02D94924B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004661d1e9fbf54f7ee418d64a31192346e9e3b8bc"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x3b7a4945a0bc3c0d7d70234404608a01965e72200f1ea94631437a3726896d50"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 52118197,
        "transactionHash": "0x6df5473a4ae0758f8c460874577b073e996d943b908f9f06f40c3acfd8a5d48f",
        "address": "0x508426a8c68A3BaE89E4cc4b4a9c23B02D94924B",
        "topics": [
          "0x94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000039f254ad93eeb3af9a8317b190d32e89e4ca65a5",
        "logIndex": 124,
        "blockHash": "0x3b7a4945a0bc3c0d7d70234404608a01965e72200f1ea94631437a3726896d50"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 52118197,
        "transactionHash": "0x6df5473a4ae0758f8c460874577b073e996d943b908f9f06f40c3acfd8a5d48f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004661d1e9fbf54f7ee418d64a31192346e9e3b8bc",
          "0x000000000000000000000000b2dd091ea6e591d62f565d7a18ce2a7640add227"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000052c00df7dc2d880000000000000000000000000000000000000000000000004c4da2be0261f7dd000000000000000000000000000000000000000000000018b8efd2610227fe590000000000000000000000000000000000000000000000004bfae2b00a85ca55000000000000000000000000000000000000000000000018b942926efa042be1",
        "logIndex": 125,
        "blockHash": "0x3b7a4945a0bc3c0d7d70234404608a01965e72200f1ea94631437a3726896d50"
      }
    ],
    "blockNumber": 52118197,
    "cumulativeGasUsed": "5638725",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39F254Ad93eEB3Af9A8317B190d32e89E4CA65a5"
  ],
  "numDeployments": 1,
  "solcInputHash": "dec431fb01a1869239759cd65d3e7b12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSendEther\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BurnRateInMillSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeEthEquivalentZbyteInGwei\",\"type\":\"uint256\"}],\"name\":\"NativeEthEquivalentZbyteSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"WorkerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zbytePriceInGwei\",\"type\":\"uint256\"}],\"name\":\"ZbytePriceInGweiSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedWorkers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRateInMill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"}],\"name\":\"convertEthToEquivalentZbyte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInMill_\",\"type\":\"uint256\"}],\"name\":\"convertMillToZbyte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDPlatFeeInZbyte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeEthEquivalentZbyteInGwei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"register_\",\"type\":\"bool\"}],\"name\":\"registerWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnRate_\",\"type\":\"uint256\"}],\"name\":\"setBurnRateInMill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeEthEquivalentZbyteInGwei_\",\"type\":\"uint256\"}],\"name\":\"setNativeEthEquivalentZbyteInGwei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeEthEquivalentZbyteInGwei_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zbytePriceInGwei_\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zbytePriceInGwei_\",\"type\":\"uint256\"}],\"name\":\"setZbytePriceInGwei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zbytePriceEquivalentInGwei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertEthToEquivalentZbyte(uint256)\":{\"details\":\"Example:\\\\ Say, Native Eth Price = 1$\\\\ Zbyte Price = 2\\u00a2\\\\ nativeEthEquivalentZbyteInGwei = 50,000,000,000 Gwei (i.e. 1 Native Eth = 50 Zbyte)\\\\ ethAmount_  = 1,000,000,000,000,000,000 Wei (1 Native Eth)\\\\ zbyteAmount = (1,000,000,000,000,000,000 * 50,000,000,000) / 1,000,000,000\\\\             = 50,000,000,000,000,000,000 Wei (50 ZBYT)\\\\\",\"params\":{\"ethAmount_\":\"Amount of eth.\"},\"returns\":{\"_0\":\"Equivalent Amount of zbyte.\"}},\"convertMillToZbyte(uint256)\":{\"details\":\"Example:\\\\ Say, Unit Price = 1$\\\\ Zbyte Price = 2\\u00a2\\\\ So, zbytePriceEquivalentInGwei = 50,000,000,000 Gwei (i.e. 1 Unit = 50 Zbyte)\\\\ priceInMill_ = 20 Mill (i.e. (2 / 1000) Unit)\\\\ zbyteAmount = (20 * 50,000,000,000 * 1,000,000,000) / 1000\\\\             = 1,000,000,000,000,000,000 Wei (1 ZBYT)\\\\\",\"params\":{\"priceInMill_\":\"Price in millionths.\"},\"returns\":{\"_0\":\"Equivalent Zbyte amount.\"}},\"getDPlatFeeInZbyte()\":{\"returns\":{\"_0\":\"DPlat fee\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder_\":\"Address to check\"},\"returns\":{\"_0\":\"true if forwarder_ is trusted forwarder\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerWorker(address,bool)\":{\"params\":{\"register_\":\"A boolean indicating whether to register (true) or unregister (false) the worker.\",\"worker_\":\"The address of the worker to be registered or unregistered.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBurnRateInMill(uint256)\":{\"params\":{\"burnRate_\":\"burn rate in mill\"}},\"setNativeEthEquivalentZbyteInGwei(uint256)\":{\"details\":\"Example:\\\\ Say, Native Eth Price = 1$\\\\ Zbyte Price = 2\\u00a2\\\\ Ratio(Native Eth Price / Zbyte Price) = 100 / 2\\\\ nativeEthEquivalentZbyteInGwei = Ratio * 10 ^ decimals() / Gwei\\\\                                = 50 * 10 ^ 18 / 10 ^ 9 = 50,000,000,000\\\\\",\"params\":{\"nativeEthEquivalentZbyteInGwei_\":\"The equivalent Zbyte price in Gwei for native ETH.\"}},\"setTrustedForwarder(address)\":{\"details\":\"onlyOwner can call\",\"params\":{\"forwarder_\":\"Frwarder conract address\"}},\"setZbytePriceInGwei(uint256)\":{\"details\":\"Example:\\\\ Say, Unit Price = 1$\\\\ Zbyte Price = 2\\u00a2\\\\ Ratio(Unit Price / Zbyte Price) = 100 / 2\\\\ zbytePriceInGwei_ = Ratio * 10 ^ decimals() / Gwei\\\\                                = 50 * 10 ^ 18 / 10 ^ 9 = 50,000,000,000\\\\\",\"params\":{\"zbytePriceInGwei_\":\"The Zbyte price in Gwei.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ZbytePriceFeeder\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotSendEther()\":[{\"notice\":\"error (0xbf064619): Contract cannot receive ether\"}],\"UnAuthorized(address)\":[{\"notice\":\"error (0xb3922495): Unauthorized caller.\"}],\"ZeroAddress()\":[{\"notice\":\"error (0xd92e233d): Address is address(0)\"}],\"ZeroValue()\":[{\"notice\":\"error(): Value sent is 0\"}]},\"events\":{\"BurnRateInMillSet(uint256)\":{\"notice\":\"Event(0xabd3562e) the burn rate is set.\"},\"ForwarderSet(address,address)\":{\"notice\":\"event (0x94aed472): Forwarder address is changed\"},\"NativeEthEquivalentZbyteSet(uint256)\":{\"notice\":\"Event(0xec97c145) the equivalent Zbyte price for native ETH is set.\"},\"WorkerRegistered(address,bool)\":{\"notice\":\"event (0x2ddb4d51): Worker is registered(true/false)\"},\"ZbytePriceInGweiSet(uint256)\":{\"notice\":\"Event(0xd12b5bd7) the Zbyte price in Gwei is set.\"}},\"kind\":\"user\",\"methods\":{\"authorizedWorkers(address)\":{\"notice\":\"Authorized workers\"},\"convertEthToEquivalentZbyte(uint256)\":{\"notice\":\"Converts eth to equivalent Zbyte amount.\"},\"convertMillToZbyte(uint256)\":{\"notice\":\"Converts price in millionths to Zbyte amount.\"},\"getDPlatFeeInZbyte()\":{\"notice\":\"DPlat fee in terms of Zbyte 1 Unit = 1000 Mill\"},\"isTrustedForwarder(address)\":{\"notice\":\"Check if the given address is the trusted forwarder\"},\"registerWorker(address,bool)\":{\"notice\":\"Registers or unregisters a worker, allowing or denying access to specific functionality.\"},\"setBurnRateInMill(uint256)\":{\"notice\":\"Sets burn rate for invoke calls in mill 1 Unit = 1000 Mill\"},\"setNativeEthEquivalentZbyteInGwei(uint256)\":{\"notice\":\"Sets the equivalent Zbyte price in Gwei for native ETH.\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set the forwarder contract address\"},\"setZbytePriceInGwei(uint256)\":{\"notice\":\"Sets the Zbyte price in Gwei.\"}},\"notice\":\"Implements the IZbytePriceFeeder interface and provides functionality to manage gas costs and price conversions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dplat/ZbytePriceFeeder.sol\":\"ZbytePriceFeeder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dplat/ZbytePriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\nimport \\\"../interface/dplat/IZbytePriceFeeder.sol\\\";\\nimport \\\"../utils/ZbyteContext.sol\\\";\\n\\n\\n/// @title ZbytePriceFeeder\\n/// @notice Implements the IZbytePriceFeeder interface and provides functionality to manage gas costs and price conversions.\\ncontract ZbytePriceFeeder is IZbytePriceFeeder, ZbyteContext {\\n    /// @notice error (0xb3922495): Unauthorized caller.\\n    error UnAuthorized(address);\\n\\n    /// @notice event (0x2ddb4d51): Worker is registered(true/false)\\n    event WorkerRegistered(address,bool);\\n\\n    // Conversion factors\\n    uint256 public nativeEthEquivalentZbyteInGwei;\\n    uint256 public zbytePriceEquivalentInGwei;\\n    uint256 public burnRateInMill;\\n    /// @notice Authorized workers\\n    mapping(address => bool) public authorizedWorkers;\\n\\n    constructor(address forwarder_) {\\n        _setTrustedForwarder(forwarder_);\\n    }\\n\\n    /**\\n    * @dev Modifier to ensure that the sender is an authorized worker.\\n    * @notice Reverts the transaction with an `UnAuthorized` error if the sender is not authorized.\\n    */\\n    modifier onlyAuthorized() {\\n        if (!authorizedWorkers[_msgSender()]) {\\n            revert UnAuthorized(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// @notice Registers or unregisters a worker, allowing or denying access to specific functionality.\\n    /// @param worker_ The address of the worker to be registered or unregistered.\\n    /// @param register_ A boolean indicating whether to register (true) or unregister (false) the worker.\\n    function registerWorker(address worker_, bool register_) public onlyOwner {\\n        authorizedWorkers[worker_] = register_;\\n        emit WorkerRegistered(worker_, register_);\\n    }\\n\\n    /// @notice Sets the equivalent Zbyte price in Gwei for native ETH.\\n    /// @dev Example:\\\\\\n    /// Say, Native Eth Price = 1$\\\\\\n    /// Zbyte Price = 2\\u00a2\\\\\\n    /// Ratio(Native Eth Price / Zbyte Price) = 100 / 2\\\\\\n    /// nativeEthEquivalentZbyteInGwei = Ratio * 10 ^ decimals() / Gwei\\\\\\n    ///                                = 50 * 10 ^ 18 / 10 ^ 9 = 50,000,000,000\\\\\\n    /// @param nativeEthEquivalentZbyteInGwei_ The equivalent Zbyte price in Gwei for native ETH.\\n    function setNativeEthEquivalentZbyteInGwei(uint256 nativeEthEquivalentZbyteInGwei_) public onlyAuthorized {\\n        nativeEthEquivalentZbyteInGwei = nativeEthEquivalentZbyteInGwei_;\\n        emit NativeEthEquivalentZbyteSet(nativeEthEquivalentZbyteInGwei_);\\n    }\\n\\n    /// @notice Sets the Zbyte price in Gwei.\\n    /// @dev Example:\\\\\\n    /// Say, Unit Price = 1$\\\\\\n    /// Zbyte Price = 2\\u00a2\\\\\\n    /// Ratio(Unit Price / Zbyte Price) = 100 / 2\\\\\\n    /// zbytePriceInGwei_ = Ratio * 10 ^ decimals() / Gwei\\\\\\n    ///                                = 50 * 10 ^ 18 / 10 ^ 9 = 50,000,000,000\\\\\\n    /// @param zbytePriceInGwei_ The Zbyte price in Gwei.\\n    function setZbytePriceInGwei(uint256 zbytePriceInGwei_) public onlyAuthorized {\\n        zbytePriceEquivalentInGwei = zbytePriceInGwei_;\\n        emit ZbytePriceInGweiSet(zbytePriceInGwei_);\\n    }\\n\\n    /// @notice Converts eth to equivalent Zbyte amount.\\n    /// @dev Example:\\\\\\n    /// Say, Native Eth Price = 1$\\\\\\n    /// Zbyte Price = 2\\u00a2\\\\\\n    /// nativeEthEquivalentZbyteInGwei = 50,000,000,000 Gwei (i.e. 1 Native Eth = 50 Zbyte)\\\\\\n    /// ethAmount_  = 1,000,000,000,000,000,000 Wei (1 Native Eth)\\\\\\n    /// zbyteAmount = (1,000,000,000,000,000,000 * 50,000,000,000) / 1,000,000,000\\\\\\n    ///             = 50,000,000,000,000,000,000 Wei (50 ZBYT)\\\\\\n    /// @param ethAmount_ Amount of eth.\\n    /// @return Equivalent Amount of zbyte.\\n    function convertEthToEquivalentZbyte(uint256 ethAmount_) public view returns (uint256) {\\n        uint256 _zbyteAmount = (ethAmount_ * nativeEthEquivalentZbyteInGwei) / 10**9;\\n        return _zbyteAmount;\\n    }\\n\\n    /// @notice Converts price in millionths to Zbyte amount.\\n    /// @dev Example:\\\\\\n    /// Say, Unit Price = 1$\\\\\\n    /// Zbyte Price = 2\\u00a2\\\\\\n    /// So, zbytePriceEquivalentInGwei = 50,000,000,000 Gwei (i.e. 1 Unit = 50 Zbyte)\\\\\\n    /// priceInMill_ = 20 Mill (i.e. (2 / 1000) Unit)\\\\\\n    /// zbyteAmount = (20 * 50,000,000,000 * 1,000,000,000) / 1000\\\\\\n    ///             = 1,000,000,000,000,000,000 Wei (1 ZBYT)\\\\\\n    /// @param priceInMill_ Price in millionths.\\n    /// @return Equivalent Zbyte amount.\\n    function convertMillToZbyte(uint256 priceInMill_) public view returns (uint256) {\\n        return (priceInMill_ * zbytePriceEquivalentInGwei * 10**9) / 1000;\\n    }\\n\\n    /// @notice DPlat fee in terms of Zbyte\\n    /// 1 Unit = 1000 Mill\\n    /// @return DPlat fee\\n    function getDPlatFeeInZbyte() public view returns(uint256) {\\n        return convertMillToZbyte(burnRateInMill);\\n    }\\n\\n    function setPrices(uint256 nativeEthEquivalentZbyteInGwei_, uint256 zbytePriceInGwei_) external onlyAuthorized {\\n        setNativeEthEquivalentZbyteInGwei(nativeEthEquivalentZbyteInGwei_);\\n        setZbytePriceInGwei(zbytePriceInGwei_);\\n    }\\n\\n    /// @notice Sets burn rate for invoke calls in mill\\n    /// 1 Unit = 1000 Mill\\n    /// @param burnRate_ burn rate in mill\\n    function setBurnRateInMill(uint256 burnRate_) public onlyOwner {\\n        burnRateInMill = burnRate_;\\n        emit BurnRateInMillSet(burnRate_);\\n    } \\n}\",\"keccak256\":\"0x2cfd526fece7bf2a806658bce71926adbec6d67f515385992e6ec7e7712e5e19\",\"license\":\"MIT\"},\"contracts/interface/dplat/IZbytePriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title IZbytePriceFeeder\\n/// @notice Interface for Zbyte price feeder, defining functions for gas cost conversion and retrieval.\\ninterface IZbytePriceFeeder {\\n    /// @notice Event(0xec97c145) the equivalent Zbyte price for native ETH is set.\\n    event NativeEthEquivalentZbyteSet(uint256 nativeEthEquivalentZbyteInGwei);\\n\\n    /// @notice Event(0xd12b5bd7) the Zbyte price in Gwei is set.\\n    event ZbytePriceInGweiSet(uint256 zbytePriceInGwei);\\n\\n    /// @notice Event(0xabd3562e) the burn rate is set.\\n    event BurnRateInMillSet(uint256);\\n\\n    /// @notice Converts eth to equivalent Zbyte amount.\\n    /// @dev Example:\\n    /// Say, Native Eth Price = 1$\\n    /// Zbyte Price = 2\\u00a2\\n    /// nativeEthEquivalentZbyteInGwei = 50,000,000,000 Gwei (i.e. 1 Native Eth = 50 Zbyte)\\n    /// ethAmount_  = 1,000,000,000,000,000,000 Wei (1 Native Eth)\\n    /// zbyteAmount = (1,000,000,000,000,000,000 * 50,000,000,000) / 1,000,000,000\\n    ///             = 50,000,000,000,000,000,000 Wei (50 ZBYT)\\n    /// @param ethAmount_ Amount of eth.\\n    /// @return Equivalent Amount of zbyte.\\n    function convertEthToEquivalentZbyte(uint256 ethAmount_) external view returns (uint256);\\n\\n    /// @notice Converts price in millionths to Zbyte amount.\\n    /// @dev Example:\\n    /// Say, Unit Price = 1$\\n    /// Zbyte Price = 2\\u00a2\\n    /// So, zbytePriceEquivalentInGwei = 50,000,000,000 Gwei (i.e. 1 Unit = 50 Zbyte)\\n    /// priceInMill_ = 20 Mill (i.e. (2 / 1000) Unit)\\n    /// zbyteAmount = (20 * 50,000,000,000 * 1,000,000,000) / 1000\\n    ///             = 1,000,000,000,000,000,000 Wei (1 ZBYT)\\n    /// @param priceInMill_ Price in millionths.\\n    /// @return Equivalent Zbyte amount.\\n    function convertMillToZbyte(uint256 priceInMill_) external view returns (uint256);\\n\\n    /// @notice DPlat fee in terms of Zbyte\\n    /// 1 Unit = 1000 Mill\\n    /// @return DPlat fee\\n    function getDPlatFeeInZbyte() external view returns(uint256);\\n}\",\"keccak256\":\"0x3051a03eac3bd9976d4f1e14039de5eef9a6256ec9f11e8b62702ffe6d601269\",\"license\":\"MIT\"},\"contracts/utils/ZbyteContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title The ZBYT ERC20 contract\\n/// @dev ERC2771Context with a function to set forwarder\\nabstract contract ZbyteContext is Context, Ownable {\\n    // errors\\n    /// @notice error (0xbf064619): Contract cannot receive ether\\n    error CannotSendEther();\\n    /// @notice error (0xd92e233d): Address is address(0)\\n    error ZeroAddress();\\n    /// @notice error(): Value sent is 0\\n    error ZeroValue();\\n\\n    // events\\n    /// @notice event (0x94aed472): Forwarder address is changed\\n    event ForwarderSet(address,address);\\n\\n    // Trusted forwarder address\\n    address private trustedForwarder;\\n\\n    // /// @notice ZbyteContext constructor\\n    // /// @param forwarder_ Forwarder contact address\\n    // constructor(address forwarder_) {\\n    //     _setTrustedForwarder(forwarder_);\\n    // }\\n\\n    /// @notice Check if the given address is the trusted forwarder\\n    /// @param forwarder_ Address to check\\n    /// @return true if forwarder_ is trusted forwarder\\n    function isTrustedForwarder(address forwarder_) public view virtual returns (bool) {\\n        return forwarder_ == trustedForwarder;\\n    }\\n\\n    /// @notice Set a trusted forwarder address\\n    /// @param forwarder_ Trusted forwarder address\\n    /// @dev emits ForwarderSet on success\\n    function _setTrustedForwarder(address forwarder_) internal {\\n        if (forwarder_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        address oldForwarder = trustedForwarder;\\n        trustedForwarder = forwarder_;\\n\\n        emit ForwarderSet(oldForwarder,forwarder_);\\n    }\\n\\n    /// @notice Set the forwarder contract address\\n    /// @param forwarder_ Frwarder conract address\\n    /// @dev onlyOwner can call\\n    function setTrustedForwarder(address forwarder_) public onlyOwner {\\n        _setTrustedForwarder(forwarder_);\\n    }\\n\\n    /// @notice Get the trusted forwarder address\\n    function _getTrustedForwarder() internal view returns(address){\\n        return trustedForwarder;\\n    }\\n\\n    /// @notice Extract true caller if called via trusted forwarder\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /// @notice Extract data if called via trusted forwarder\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c27022a50e80284df94f275bd72bc0c08af33480ab79d00e7ab6eb6741fce4f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461010057601f61090638819003918201601f19168301916001600160401b038311848410176101055780849260209460405283398101031261010057516001600160a01b0390818116908190036101005761005b61011b565b918060005493169260018060a01b03199380858316176000558260405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a382156100f1577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30604085858581600154938416176001558351921682526020820152a16040516107c690816101408239f35b63d92e233d60e01b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b600154336001600160a01b039091160361013b5736601319013560601c90565b339056fe6040608081526004908136101561001557600080fd5b6000803560e01c806301c99f9f1461062357806305fefda71461058457806325e79beb146105655780633936f5fa14610547578063572b6c05146105135780635b8823df146104a5578063715018a61461043c578063803667f11461041d5780638da5cb5b146103f5578063919f4ca3146103b7578063c2ef96ff14610398578063c7a4c73814610368578063da742228146102c8578063dd969b6f14610264578063e2a8ad5b146101d6578063f2fde38b146101025763f6718b4c146100db57600080fd5b346100ff57806003193601126100ff57506100f860209254610742565b9051908152f35b80fd5b5091346101d25760203660031901126101d25761011d6106b3565b83546001600160a01b038082169391926101418261013961076c565b1686146106ce565b169384156101805750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b509190346101d25760203660031901126101d2578135916001600160a01b03806101fe61076c565b168552600560205260ff83862054161561024457847fd12b5bd74f3cbc37a15f5eb80b256a93fe26d81fe80649e423d37d3bd6c57517602086868160035551908152a180f35b6024935061025061076c565b925163b392249560e01b8152921690820152fd5b509190346101d25760203660031901126101d257816020917fabd3562e495ac1ee140c5899785f42d94e889c6c4f9af14237cd5718f428f11e933580926102bf60018060a01b0380895416906102b861076c565b16146106ce565b5551908152a180f35b509034610364576020366003190112610364576102e36106b3565b82546001600160a01b039182916102ff908316836102b861076c565b168015610354577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd3093945060015491816bffffffffffffffffffffffff60a01b8416176001558351921682526020820152a180f35b825163d92e233d60e01b81528590fd5b5080fd5b50346100ff5760203660031901126100ff5750633b9aca006103906020936002549035610719565b049051908152f35b5090346103645781600319360112610364576020906003549051908152f35b5090346103645760203660031901126103645760209160ff9082906001600160a01b036103e26106b3565b1681526005855220541690519015158152f35b509034610364578160031936011261036457905490516001600160a01b039091168152602090f35b5090346103645781600319360112610364576020906002549051908152f35b50346100ff57806003193601126100ff57805481906001600160a01b0380821691906104729061046a61076c565b1683146106ce565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509190346101d25760203660031901126101d2578135916001600160a01b03806104cd61076c565b168552600560205260ff83862054161561024457847fec97c1458e15c7dc478afe0c76d62c57a8ec861d40784d4caf302e82633d4042602086868160025551908152a180f35b509034610364576020366003190112610364576020906105316106b3565b60018060a01b0380600154169116149051908152f35b5091346101d257826003193601126101d25760209250549051908152f35b50346100ff5760203660031901126100ff57506100f860209235610742565b509190346101d257806003193601126101d257602435916001600160a01b038135816105ae61076c565b168652600560205260ff84872054161561061657816105cb61076c565b168652600560205260ff848720541615610616576020817fec97c1458e15c7dc478afe0c76d62c57a8ec861d40784d4caf302e82633d4042926002558551908152a1806101fe61076c565b506024935061025061076c565b50903461036457806003193601126103645761063d6106b3565b906024358015158091036106af5783547f2ddb4d518081e3226ce50314090fbddc7a51e92d125bd71d785914d1b6d3d679936001600160a01b0391610687908316836102b861076c565b1690818552600560205282852060ff1981541660ff831617905582519182526020820152a180f35b8380fd5b600435906001600160a01b03821682036106c957565b600080fd5b156106d557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8181029291811591840414171561072c57565b634e487b7160e01b600052601160045260246000fd5b60035461074e91610719565b633b9aca009081810291818304149015171561072c576103e8900490565b600154336001600160a01b039091160361078c5736601319013560601c90565b339056fea26469706673582212200d73e665ef87a781693dfab755ac7f6cebe21dee20b3e0505f0cb2d176c3e0d764736f6c63430008110033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b6000803560e01c806301c99f9f1461062357806305fefda71461058457806325e79beb146105655780633936f5fa14610547578063572b6c05146105135780635b8823df146104a5578063715018a61461043c578063803667f11461041d5780638da5cb5b146103f5578063919f4ca3146103b7578063c2ef96ff14610398578063c7a4c73814610368578063da742228146102c8578063dd969b6f14610264578063e2a8ad5b146101d6578063f2fde38b146101025763f6718b4c146100db57600080fd5b346100ff57806003193601126100ff57506100f860209254610742565b9051908152f35b80fd5b5091346101d25760203660031901126101d25761011d6106b3565b83546001600160a01b038082169391926101418261013961076c565b1686146106ce565b169384156101805750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b509190346101d25760203660031901126101d2578135916001600160a01b03806101fe61076c565b168552600560205260ff83862054161561024457847fd12b5bd74f3cbc37a15f5eb80b256a93fe26d81fe80649e423d37d3bd6c57517602086868160035551908152a180f35b6024935061025061076c565b925163b392249560e01b8152921690820152fd5b509190346101d25760203660031901126101d257816020917fabd3562e495ac1ee140c5899785f42d94e889c6c4f9af14237cd5718f428f11e933580926102bf60018060a01b0380895416906102b861076c565b16146106ce565b5551908152a180f35b509034610364576020366003190112610364576102e36106b3565b82546001600160a01b039182916102ff908316836102b861076c565b168015610354577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd3093945060015491816bffffffffffffffffffffffff60a01b8416176001558351921682526020820152a180f35b825163d92e233d60e01b81528590fd5b5080fd5b50346100ff5760203660031901126100ff5750633b9aca006103906020936002549035610719565b049051908152f35b5090346103645781600319360112610364576020906003549051908152f35b5090346103645760203660031901126103645760209160ff9082906001600160a01b036103e26106b3565b1681526005855220541690519015158152f35b509034610364578160031936011261036457905490516001600160a01b039091168152602090f35b5090346103645781600319360112610364576020906002549051908152f35b50346100ff57806003193601126100ff57805481906001600160a01b0380821691906104729061046a61076c565b1683146106ce565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509190346101d25760203660031901126101d2578135916001600160a01b03806104cd61076c565b168552600560205260ff83862054161561024457847fec97c1458e15c7dc478afe0c76d62c57a8ec861d40784d4caf302e82633d4042602086868160025551908152a180f35b509034610364576020366003190112610364576020906105316106b3565b60018060a01b0380600154169116149051908152f35b5091346101d257826003193601126101d25760209250549051908152f35b50346100ff5760203660031901126100ff57506100f860209235610742565b509190346101d257806003193601126101d257602435916001600160a01b038135816105ae61076c565b168652600560205260ff84872054161561061657816105cb61076c565b168652600560205260ff848720541615610616576020817fec97c1458e15c7dc478afe0c76d62c57a8ec861d40784d4caf302e82633d4042926002558551908152a1806101fe61076c565b506024935061025061076c565b50903461036457806003193601126103645761063d6106b3565b906024358015158091036106af5783547f2ddb4d518081e3226ce50314090fbddc7a51e92d125bd71d785914d1b6d3d679936001600160a01b0391610687908316836102b861076c565b1690818552600560205282852060ff1981541660ff831617905582519182526020820152a180f35b8380fd5b600435906001600160a01b03821682036106c957565b600080fd5b156106d557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8181029291811591840414171561072c57565b634e487b7160e01b600052601160045260246000fd5b60035461074e91610719565b633b9aca009081810291818304149015171561072c576103e8900490565b600154336001600160a01b039091160361078c5736601319013560601c90565b339056fea26469706673582212200d73e665ef87a781693dfab755ac7f6cebe21dee20b3e0505f0cb2d176c3e0d764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertEthToEquivalentZbyte(uint256)": {
        "details": "Example:\\ Say, Native Eth Price = 1$\\ Zbyte Price = 2¢\\ nativeEthEquivalentZbyteInGwei = 50,000,000,000 Gwei (i.e. 1 Native Eth = 50 Zbyte)\\ ethAmount_  = 1,000,000,000,000,000,000 Wei (1 Native Eth)\\ zbyteAmount = (1,000,000,000,000,000,000 * 50,000,000,000) / 1,000,000,000\\             = 50,000,000,000,000,000,000 Wei (50 ZBYT)\\",
        "params": {
          "ethAmount_": "Amount of eth."
        },
        "returns": {
          "_0": "Equivalent Amount of zbyte."
        }
      },
      "convertMillToZbyte(uint256)": {
        "details": "Example:\\ Say, Unit Price = 1$\\ Zbyte Price = 2¢\\ So, zbytePriceEquivalentInGwei = 50,000,000,000 Gwei (i.e. 1 Unit = 50 Zbyte)\\ priceInMill_ = 20 Mill (i.e. (2 / 1000) Unit)\\ zbyteAmount = (20 * 50,000,000,000 * 1,000,000,000) / 1000\\             = 1,000,000,000,000,000,000 Wei (1 ZBYT)\\",
        "params": {
          "priceInMill_": "Price in millionths."
        },
        "returns": {
          "_0": "Equivalent Zbyte amount."
        }
      },
      "getDPlatFeeInZbyte()": {
        "returns": {
          "_0": "DPlat fee"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder_": "Address to check"
        },
        "returns": {
          "_0": "true if forwarder_ is trusted forwarder"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerWorker(address,bool)": {
        "params": {
          "register_": "A boolean indicating whether to register (true) or unregister (false) the worker.",
          "worker_": "The address of the worker to be registered or unregistered."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBurnRateInMill(uint256)": {
        "params": {
          "burnRate_": "burn rate in mill"
        }
      },
      "setNativeEthEquivalentZbyteInGwei(uint256)": {
        "details": "Example:\\ Say, Native Eth Price = 1$\\ Zbyte Price = 2¢\\ Ratio(Native Eth Price / Zbyte Price) = 100 / 2\\ nativeEthEquivalentZbyteInGwei = Ratio * 10 ^ decimals() / Gwei\\                                = 50 * 10 ^ 18 / 10 ^ 9 = 50,000,000,000\\",
        "params": {
          "nativeEthEquivalentZbyteInGwei_": "The equivalent Zbyte price in Gwei for native ETH."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "onlyOwner can call",
        "params": {
          "forwarder_": "Frwarder conract address"
        }
      },
      "setZbytePriceInGwei(uint256)": {
        "details": "Example:\\ Say, Unit Price = 1$\\ Zbyte Price = 2¢\\ Ratio(Unit Price / Zbyte Price) = 100 / 2\\ zbytePriceInGwei_ = Ratio * 10 ^ decimals() / Gwei\\                                = 50 * 10 ^ 18 / 10 ^ 9 = 50,000,000,000\\",
        "params": {
          "zbytePriceInGwei_": "The Zbyte price in Gwei."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ZbytePriceFeeder",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotSendEther()": [
        {
          "notice": "error (0xbf064619): Contract cannot receive ether"
        }
      ],
      "UnAuthorized(address)": [
        {
          "notice": "error (0xb3922495): Unauthorized caller."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "error (0xd92e233d): Address is address(0)"
        }
      ],
      "ZeroValue()": [
        {
          "notice": "error(): Value sent is 0"
        }
      ]
    },
    "events": {
      "BurnRateInMillSet(uint256)": {
        "notice": "Event(0xabd3562e) the burn rate is set."
      },
      "ForwarderSet(address,address)": {
        "notice": "event (0x94aed472): Forwarder address is changed"
      },
      "NativeEthEquivalentZbyteSet(uint256)": {
        "notice": "Event(0xec97c145) the equivalent Zbyte price for native ETH is set."
      },
      "WorkerRegistered(address,bool)": {
        "notice": "event (0x2ddb4d51): Worker is registered(true/false)"
      },
      "ZbytePriceInGweiSet(uint256)": {
        "notice": "Event(0xd12b5bd7) the Zbyte price in Gwei is set."
      }
    },
    "kind": "user",
    "methods": {
      "authorizedWorkers(address)": {
        "notice": "Authorized workers"
      },
      "convertEthToEquivalentZbyte(uint256)": {
        "notice": "Converts eth to equivalent Zbyte amount."
      },
      "convertMillToZbyte(uint256)": {
        "notice": "Converts price in millionths to Zbyte amount."
      },
      "getDPlatFeeInZbyte()": {
        "notice": "DPlat fee in terms of Zbyte 1 Unit = 1000 Mill"
      },
      "isTrustedForwarder(address)": {
        "notice": "Check if the given address is the trusted forwarder"
      },
      "registerWorker(address,bool)": {
        "notice": "Registers or unregisters a worker, allowing or denying access to specific functionality."
      },
      "setBurnRateInMill(uint256)": {
        "notice": "Sets burn rate for invoke calls in mill 1 Unit = 1000 Mill"
      },
      "setNativeEthEquivalentZbyteInGwei(uint256)": {
        "notice": "Sets the equivalent Zbyte price in Gwei for native ETH."
      },
      "setTrustedForwarder(address)": {
        "notice": "Set the forwarder contract address"
      },
      "setZbytePriceInGwei(uint256)": {
        "notice": "Sets the Zbyte price in Gwei."
      }
    },
    "notice": "Implements the IZbytePriceFeeder interface and provides functionality to manage gas costs and price conversions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8814,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6478,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "nativeEthEquivalentZbyteInGwei",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6480,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "zbytePriceEquivalentInGwei",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6482,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "burnRateInMill",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6487,
        "contract": "contracts/dplat/ZbytePriceFeeder.sol:ZbytePriceFeeder",
        "label": "authorizedWorkers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}