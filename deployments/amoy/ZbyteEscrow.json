{
  "address": "0xd9CC83B69b6871c46Fc9F7902987c0cC8146Bb05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zbyte_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotSendEther",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InsufficientERC20ForDepositGas",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InvalidCallbackAck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InvalidCallbackMessage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "InvalidRelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ERC20DepositConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ERC20DepositFailedAndRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ERC20Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ERC20WithdrawConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ERC20WithdrawFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ERC20Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RelayWrapperAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TreasuryAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "WorkerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vERC20AddressSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "ack_",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "success_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "retval_",
          "type": "uint256"
        }
      ],
      "name": "callbackHandler",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cost_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pendingAction",
      "outputs": [
        {
          "internalType": "enum EscrowERC20.Action",
          "name": "action",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "nAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "register_",
          "type": "bool"
        }
      ],
      "name": "registerWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayWrapper",
      "outputs": [
        {
          "internalType": "contract IRelayWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapper_",
          "type": "address"
        }
      ],
      "name": "setRelayWrapperAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder_",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verc20_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        }
      ],
      "name": "setvERC20Address",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyAllChains",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ulAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vERC20Addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vERC20Depositor_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chain_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "withdrawRoyalty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x749f5af57244087d887cd9b7ec3fa3ad7a70f5353508f0731483737e70e3d040",
  "receipt": {
    "to": null,
    "from": "0x4661D1e9fBf54F7EE418D64A31192346e9E3B8bc",
    "contractAddress": "0xd9CC83B69b6871c46Fc9F7902987c0cC8146Bb05",
    "transactionIndex": 0,
    "gasUsed": "1728632",
    "logsBloom": "0x0000000000000000001000000000004000000000200000000080000000000000000000000000001000000000000000000000800000000000000000004000000000000002000000000000000000000080000500000000000000010000000000000000000002000010000000000000080000000000000000008000000100000040000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000c000000000000000000001000000000000000000002000000000104000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x727859179833c13064d149b8ee810ea680ed9b3ea5b545575794f58f791c7851",
    "transactionHash": "0x749f5af57244087d887cd9b7ec3fa3ad7a70f5353508f0731483737e70e3d040",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5898571,
        "transactionHash": "0x749f5af57244087d887cd9b7ec3fa3ad7a70f5353508f0731483737e70e3d040",
        "address": "0xd9CC83B69b6871c46Fc9F7902987c0cC8146Bb05",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004661d1e9fbf54f7ee418d64a31192346e9e3b8bc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x727859179833c13064d149b8ee810ea680ed9b3ea5b545575794f58f791c7851"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5898571,
        "transactionHash": "0x749f5af57244087d887cd9b7ec3fa3ad7a70f5353508f0731483737e70e3d040",
        "address": "0xd9CC83B69b6871c46Fc9F7902987c0cC8146Bb05",
        "topics": [
          "0x94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f3fade15f5a96e83ced6fc9e391e72234fdbdd44",
        "logIndex": 1,
        "blockHash": "0x727859179833c13064d149b8ee810ea680ed9b3ea5b545575794f58f791c7851"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5898571,
        "transactionHash": "0x749f5af57244087d887cd9b7ec3fa3ad7a70f5353508f0731483737e70e3d040",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004661d1e9fbf54f7ee418d64a31192346e9e3b8bc",
          "0x0000000000000000000000004631753190f2f5a15a7ba172bbac102b7d95fa22"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000cb66270ea2d08000000000000000000000000000000000000000000000000026e30dcb2a72ada000000000000000000000000000000000000000000000025bade6fab0d2ca63800000000000000000000000000000000000000000000000002617a7a41bcfdd2000000000000000000000000000000000000000000000025baeb260d7e16d340",
        "logIndex": 2,
        "blockHash": "0x727859179833c13064d149b8ee810ea680ed9b3ea5b545575794f58f791c7851"
      }
    ],
    "blockNumber": 5898571,
    "cumulativeGasUsed": "1728632",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf3FAde15f5A96E83CED6FC9E391E72234fDbDd44",
    "0x30d76662638f5288e05200a2d8f494FC35e6D5eB"
  ],
  "numDeployments": 1,
  "solcInputHash": "e67aaade3ce54eefff91fdef20cb9e9e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zbyte_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSendEther\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InsufficientERC20ForDepositGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidCallbackAck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidCallbackMessage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvalidRelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC20DepositConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC20DepositFailedAndRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ERC20Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC20WithdrawConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC20WithdrawFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ERC20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RelayWrapperAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TreasuryAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"WorkerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vERC20AddressSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ack_\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"retval_\",\"type\":\"uint256\"}],\"name\":\"callbackHandler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cost_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingAction\",\"outputs\":[{\"internalType\":\"enum EscrowERC20.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"register_\",\"type\":\"bool\"}],\"name\":\"registerWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayWrapper\",\"outputs\":[{\"internalType\":\"contract IRelayWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper_\",\"type\":\"address\"}],\"name\":\"setRelayWrapperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verc20_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"}],\"name\":\"setvERC20Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAllChains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ulAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vERC20Addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vERC20Depositor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chain_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawRoyalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"callbackHandler(uint256,bytes32,bool,uint256)\":{\"params\":{\"ack_\":\"Unique hash of the submitted deposit/withdraw request\",\"chain_\":\"Target chain identifier\",\"retval_\":\"The amount of tokens that were deposited/withdrawn\",\"success_\":\"true if the deposit/withdraw was successful on remote\"}},\"deposit(uint256,uint256,address,uint256,uint256)\":{\"params\":{\"amount_\":\"Amount of ERC20 deposited\",\"chain_\":\"Target chain identifier\",\"cost_\":\"Cost of the operation\",\"receiver_\":\"Recipient address for vERC20\",\"relay_\":\"Relay identifier that should be used for the crosschain call\"}},\"getNonce()\":{\"details\":\"nonce is incremented for every successful deposit or withdraw\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder_\":\"Address to check\"},\"returns\":{\"_0\":\"true if forwarder_ is trusted forwarder\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerWorker(address,bool)\":{\"params\":{\"register_\":\"A boolean indicating whether to register (true) or unregister (false) the worker.\",\"worker_\":\"The address of the worker to be registered or unregistered.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRelayWrapperAddress(address)\":{\"params\":{\"wrapper_\":\"Core relay wrapper contract address\"}},\"setTrustedForwarder(address)\":{\"details\":\"onlyOwner can call\",\"params\":{\"forwarder_\":\"Frwarder conract address\"}},\"setvERC20Address(address,uint256)\":{\"details\":\"nonce is incremented for every successful deposit or withdraw\",\"params\":{\"chain_\":\"chain id of the chain where vERC2o contract resides\",\"verc20_\":\"vERC20 contract address\"}},\"totalSupply(uint256)\":{\"params\":{\"chain_\":\"The id of the chain of interest\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256,address,address)\":{\"details\":\"The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited\",\"params\":{\"chain_\":\"Target chain identifier\",\"receiver_\":\"Recipient address for ERC20\",\"relay_\":\"Relay identifier that should be used for the crosschain call\",\"vERC20Depositor_\":\"Address to deposit vERC20\"}},\"withdrawRoyalty(uint256,uint256,uint256)\":{\"params\":{\"amount_\":\"Amount of tokens.\",\"chain_\":\"Target chain identifier\",\"relay_\":\"Relay identifier that should be used for the crosschain call\"}}},\"title\":\"The ZBYT ERC20 Escrow contract\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotSendEther()\":[{\"notice\":\"error (0xbf064619): Contract cannot receive ether\"}],\"InsufficientERC20ForDepositGas(uint256,uint256)\":[{\"notice\":\"error (0xed3fc6b3): Insufficient ERC20 for Deposit operation.\"}],\"InvalidCallbackAck(uint256,bytes32,bool,uint256)\":[{\"notice\":\"error (0xcd9d7bb0): The ack in callback received was not found\"}],\"InvalidCallbackMessage(uint256,uint256,uint256,uint256)\":[{\"notice\":\"error (0xd6facdff): The callback received was invalid\"}],\"InvalidRelay(address)\":[{\"notice\":\"Caller is not a valid relay\"}],\"UnAuthorized(address)\":[{\"notice\":\"error (0xb3922495): Unauthorized caller.\"}],\"ZeroAddress()\":[{\"notice\":\"error (0xd92e233d): Address is address(0)\"}],\"ZeroValue()\":[{\"notice\":\"error(): Value sent is 0\"}]},\"events\":{\"ERC20DepositConfirmed(bytes32,bool,uint256)\":{\"notice\":\"event (0xf64578a8): ERC20 tokens deposit confirmed\"},\"ERC20DepositFailedAndRefunded(bytes32,bool,uint256)\":{\"notice\":\"event (0x82b9d61d): ERC20 tokens deposit failed and refund issued to depositor\"},\"ERC20Deposited(address,address,uint256,uint256,bytes32)\":{\"notice\":\"event (0xcae09af7): ERC20 tokens deposited\"},\"ERC20WithdrawConfirmed(bytes32,bool,uint256)\":{\"notice\":\"event (0xf5a60bd1): ERC20 tokens withdraw confirmed\"},\"ERC20WithdrawFailed(bytes32,bool,uint256)\":{\"notice\":\"event (0x9c33bbca): ERC20 tokens withdraw failed\"},\"ERC20Withdrawn(address,address,address,uint256,bytes32)\":{\"notice\":\"event (0x8b923c21): ERC20 tokens withdrawn\"},\"ForwarderSet(address,address)\":{\"notice\":\"event (0x94aed472): Forwarder address is changed\"},\"RelayWrapperAddressSet(address)\":{\"notice\":\"event (0x95290bcc): Core relay wrapper contract address is set\"},\"TreasuryAddressSet(address,address)\":{\"notice\":\"event (0x1db696c9): The Treasury address is set\"},\"WorkerRegistered(address,bool)\":{\"notice\":\"event (0x2ddb4d51): Worker is registered(true/false)\"},\"vERC20AddressSet(address,uint256)\":{\"notice\":\"event (0x1a40ce6d): vERC20 contract address is set\"}},\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"Return the address of underlying ERC20 contract address\"},\"callbackHandler(uint256,bytes32,bool,uint256)\":{\"notice\":\"callback handler to handle acknowledgement for deposit/withdraw\"},\"deposit(uint256,uint256,address,uint256,uint256)\":{\"notice\":\"Deposit ERC20 tokens to obtain vERC20 on target chain\"},\"getNonce()\":{\"notice\":\"Get the latest nonce \"},\"isTrustedForwarder(address)\":{\"notice\":\"Check if the given address is the trusted forwarder\"},\"pause()\":{\"notice\":\"Pauses the contract (mint, transfer and burn operations are paused)\"},\"pendingAction(bytes32)\":{\"notice\":\"mapping of current deposit/withdraw operations for which callback has not yet been received\"},\"registerWorker(address,bool)\":{\"notice\":\"Registers or unregisters a worker, allowing or denying access to specific functionality.\"},\"relayWrapper()\":{\"notice\":\"RelayWrapper contract address\"},\"setRelayWrapperAddress(address)\":{\"notice\":\"Set the address of core relay wrapper\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set the forwarder contract address\"},\"setvERC20Address(address,uint256)\":{\"notice\":\"Set the address of vERC20 on a given chain\"},\"totalSupply(uint256)\":{\"notice\":\"Return the amount of vERC20 currently available on a given chain\"},\"totalSupplyAllChains()\":{\"notice\":\"Return the amount of vERC20 currently available on all chains\"},\"ulAsset()\":{\"notice\":\"The underlying ERC20 token contract\"},\"unpause()\":{\"notice\":\"Unpauses the paused contract\"},\"vERC20Addresses(uint256)\":{\"notice\":\"mapping of the vERC20 contract address for the chain\"},\"withdraw(uint256,uint256,address,address)\":{\"notice\":\"Withdraw ERC20 tokens by depositing vERC20 on target chain\"},\"withdrawRoyalty(uint256,uint256,uint256)\":{\"notice\":\"Withdraw ERC20 tokens by depositing vERC20 on target chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/ZbyteEscrow.sol\":\"ZbyteEscrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/core/EscrowERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/ZbyteContext.sol\\\";\\nimport \\\"../interface/relay/IRelayWrapper.sol\\\";\\nimport \\\"../interface/core/IEscrowERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title The ERC20 Escrow contract\\n/// @dev DPLAT ERC20 escrow abstract contract\\nabstract contract EscrowERC20 is ZbyteContext, IEscrowERC20, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Total vERC20 supply on all chains\\n    uint256 private _totalSupply;\\n    // @notice mapping of vERC20 amount for the chain\\n    mapping(uint256 => uint256) private _reserve;\\n    /// @notice mapping of the vERC20 contract address for the chain\\n    mapping(uint256 => address) public vERC20Addresses;\\n    /// @notice The underlying ERC20 token contract\\n    IERC20 public ulAsset;\\n    /// @notice Authorized workers\\n    mapping(address => bool) authorizedWorkers;\\n    /// @notice RelayWrapper contract address\\n    /// @dev Escrow can only use this trusted RelayWrapper to perform deposit/withdraw\\n    IRelayWrapper public relayWrapper;\\n    /// @notice nonce used for deposit/withdraw operations.  Incremented for every successful deposit or withdraw\\n    uint256 nonce;\\n    /// @notice enumeration of actions performed on this escrow\\n    enum Action {\\n        NONE,\\n        DEPOSIT,\\n        WITHDRAW,\\n        WITHDRAWROYALTY\\n    }\\n    /// @notice Parameters of the deposit/withdraw operation.\\n    struct PendingAction {\\n        Action action;\\n        address nAddress;\\n        address rAddress;\\n        uint256 chainId;\\n        uint256 amount;\\n    }\\n    /// @notice mapping of current deposit/withdraw operations for which callback has not yet been received\\n    /// @dev action: EscrowERC20.Action that is being performed\\\\\\n    ///   nAddress: Address from which ERC20 tokens are deposited (for Action.DEPOSIT) or tokens are received into (for Action.WITHDRAW)\\\\\\n    ///   rAddress: Address to which vERC20 tokens are deposited (for Action.DEPOSIT) or tokens are received into (for Action.WITHDRAW)\\\\\\n    ///   chainId: chain id of the remote chain\\\\\\n    ///   amount: Amount of tokens that are deposited or withdrawn\\\\\\n    /// @dev This is updated on successful deposit/withdraw and cleared when callback is received\\n    mapping(bytes32 => PendingAction) public pendingAction;\\n\\n    /// @notice ZBYT ERC20 Escrow constructor\\n    /// @param forwarder_ Forwarder contact address\\n    /// @param asset_ Underlying ERC20 asset address\\n    constructor(address forwarder_, IERC20 asset_) {\\n        if (address(asset_) == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if(forwarder_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _setTrustedForwarder(forwarder_);\\n        ulAsset = asset_;\\n    }\\n\\n    /// @notice receive function\\n    receive() external payable {\\n        revert CannotSendEther();\\n    }\\n\\n\\n    /**\\n    * @dev Modifier to ensure that the sender is an authorized worker.\\n    * @notice Reverts the transaction with an `UnAuthorized` error if the sender is not authorized.\\n    */\\n    modifier onlyAuthorized() {\\n        if (!authorizedWorkers[_msgSender()]) {\\n            revert UnAuthorized(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to enforce call only from valid relay contract\\n    modifier onlyRelay {\\n        if(!(relayWrapper.isValidRelay(block.chainid,_msgSender()))) {\\n            revert InvalidRelay(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// @notice Registers or unregisters a worker, allowing or denying access to specific functionality.\\n    /// @param worker_ The address of the worker to be registered or unregistered.\\n    /// @param register_ A boolean indicating whether to register (true) or unregister (false) the worker.\\n    function registerWorker(address worker_, bool register_) public onlyOwner {\\n        authorizedWorkers[worker_] = register_;\\n        emit WorkerRegistered(worker_, register_);\\n    }\\n\\n\\n    /// @notice Get the latest nonce \\n    /// @dev nonce is incremented for every successful deposit or withdraw\\n    function getNonce() public view returns(uint256) {\\n        return nonce;\\n    }\\n\\n    /// @notice Set the address of vERC20 on a given chain\\n    /// @param verc20_ vERC20 contract address\\n    /// @param chain_ chain id of the chain where vERC2o contract resides\\n    /// @dev nonce is incremented for every successful deposit or withdraw\\n    function _setvERC20Address(address verc20_, uint256 chain_) internal {\\n        if (verc20_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if(chain_ == 0) {\\n            revert ZeroValue();\\n        }\\n        vERC20Addresses[chain_] = verc20_;\\n\\n        emit vERC20AddressSet(verc20_,chain_);\\n    }\\n\\n    /// @notice Set the address of core relay wrapper\\n    /// @param wrapper_ Core relay wrapper contract address\\n    function _setRelayWrapperAddress(address wrapper_) internal {\\n        if (wrapper_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        relayWrapper = IRelayWrapper(wrapper_);\\n\\n        emit RelayWrapperAddressSet(wrapper_);\\n    }\\n\\n    /// @notice Return the amount of vERC20 currently available on all chains\\n    function totalSupplyAllChains() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Return the amount of vERC20 currently available on a given chain\\n    /// @param chain_ The id of the chain of interest\\n    function totalSupply(uint256 chain_) public view virtual override  returns (uint256) {\\n        return _reserve[chain_];\\n    }\\n\\n    /// @notice Return the address of underlying ERC20 contract address\\n    function asset() external view virtual override returns (address) {\\n        return address(ulAsset);\\n    }\\n\\n    /// @notice Record and update state on successful deposit/withdraw \\n    /// @param action_ deposit or withdraw action\\n    /// @param amount_ amount of tokens deposited or withdrawn\\n    /// @param chain_ target chain id\\n    function _record(Action action_, uint256 amount_, uint256 chain_) internal {\\n        if (action_ == Action.DEPOSIT) {\\n            _totalSupply += amount_;\\n            _reserve[chain_] += amount_;\\n        } else if (action_ == Action.WITHDRAW){\\n            _totalSupply -= amount_;\\n            _reserve[chain_] -= amount_;\\n        }\\n     }\\n\\n    /// @notice Deposit ERC20 tokens to obtain vERC20 on target chain\\n    /// @notice Deposit with ZbyteRelay is supported only via Zbyte Platform in case user deposits directly, it may result in loss of funds(Zbyte).\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param cost_ Cost of the operation\\n    /// @param amount_ Amount of ERC20 deposited\\n    function _deposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 cost_,\\n                      uint256 amount_)\\n                      internal\\n                      nonReentrant\\n                      returns (bool result) {\\n        address verc20_ = vERC20Addresses[chain_];\\n        _beforeTokenDeposit(relay_, chain_, receiver_, amount_, verc20_);\\n        IERC20(ulAsset).safeTransferFrom(_msgSender(), _getTrustedForwarder(), cost_);\\n        IERC20(ulAsset).safeTransferFrom(_msgSender(), address(this), amount_);\\n\\n        bytes32 _ack = keccak256(abi.encodePacked(chain_,receiver_,amount_, nonce));\\n        nonce = nonce + 1;\\n        PendingAction memory pAction;\\n        pAction.action = Action.DEPOSIT;\\n        pAction.nAddress = _msgSender();\\n        pAction.rAddress = receiver_;\\n        pAction.chainId = chain_;\\n        pAction.amount = amount_;\\n        pendingAction[_ack] = pAction;\\n        result = relayWrapper.performCrossChainCall(relay_,\\n                                block.chainid,\\n                                chain_,\\n                                verc20_,\\n                                abi.encodeWithSignature(\\\"mint(address,uint256)\\\",receiver_,amount_),\\n                                _ack,\\n                                address(this),\\n                                \\\"\\\");\\n        require(result, \\\"_deposit: callRemote failed.\\\");\\n\\n        _afterTokenDeposit(relay_, chain_, receiver_, amount_, verc20_);\\n\\n        emit ERC20Deposited(_msgSender(), receiver_, amount_, chain_,_ack);\\n        return result;\\n    }\\n\\n    /// @notice Withdraw ERC20 tokens by depositing vERC20 on target chain\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param vERC20Depositor_ Address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @dev The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited\\n    function _withdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address vERC20Depositor_,\\n                      address receiver_)\\n                      internal\\n                      nonReentrant\\n                      returns (bool result) {\\n        address verc20_ = vERC20Addresses[chain_];\\n        _beforeTokenWithdraw(relay_, chain_, vERC20Depositor_, receiver_, verc20_);\\n\\n        bytes32 _ack = keccak256(abi.encodePacked(chain_,vERC20Depositor_,receiver_,nonce));\\n        nonce = nonce + 1;\\n        PendingAction memory pAction;\\n        pAction.action = Action.WITHDRAW;\\n        pAction.nAddress = receiver_;\\n        pAction.rAddress = vERC20Depositor_;\\n        pAction.chainId = chain_;\\n        pAction.amount = 0;\\n        pendingAction[_ack] = pAction;\\n        result = relayWrapper.performCrossChainCall(relay_,\\n                                block.chainid,\\n                                chain_,\\n                                verc20_,\\n                                abi.encodeWithSignature(\\\"destroy(address)\\\",vERC20Depositor_),\\n                                _ack,\\n                                address(this),\\n                                \\\"\\\");\\n\\n        require(result, \\\"_withdraw: callRemote failed.\\\");\\n        \\n        _afterTokenWithdraw(relay_, chain_, vERC20Depositor_, receiver_, verc20_);\\n\\n        emit ERC20Withdrawn(_msgSender(), vERC20Depositor_, receiver_, chain_, _ack);\\n        return result;\\n    }\\n\\n    /// @notice callback handler to handle acknowledgement for deposit/withdraw\\n    /// @param chain_ Target chain identifier\\n    /// @param ack_ Unique hash of the submitted deposit/withdraw request\\n    /// @param success_ true if the deposit/withdraw was successful on remote\\n    /// @param retval_ The amount of tokens that were deposited/withdrawn\\n    function _callbackHandler(uint256 chain_,\\n                            bytes32 ack_,\\n                            bool success_,\\n                            uint256  retval_)\\n        internal\\n        onlyRelay returns(uint256) {\\n        PendingAction storage _pAction = pendingAction[ack_];\\n        address _nAddress = _pAction.nAddress;\\n        uint256 _amount = _pAction.amount;\\n        uint256 _chainId = _pAction.chainId;\\n\\n        if (_pAction.action == Action.DEPOSIT) {\\n            if ((chain_ != _chainId) || (_amount != retval_)) {\\n                revert InvalidCallbackMessage(_chainId, _amount, chain_, retval_);\\n            }\\n            if(success_) {\\n                _record(Action.DEPOSIT, _amount, _chainId);\\n                emit ERC20DepositConfirmed(ack_, success_,retval_);\\n            } else {\\n                IERC20(ulAsset).safeTransfer(_nAddress, _amount);\\n                emit ERC20DepositFailedAndRefunded(ack_, success_,retval_);\\n            }\\n            delete pendingAction[ack_];\\n        } else if (_pAction.action == Action.WITHDRAW || _pAction.action == Action.WITHDRAWROYALTY) {\\n            if (chain_ != _chainId) {\\n                revert InvalidCallbackMessage(_chainId, _amount, chain_, retval_);\\n            }\\n\\n            if (success_) {\\n                IERC20(ulAsset).safeTransfer(_nAddress, retval_);\\n                _record(_pAction.action, _amount, _chainId);\\n                emit ERC20WithdrawConfirmed(ack_, success_,retval_);\\n            } else {\\n                emit ERC20WithdrawFailed(ack_, success_, retval_);\\n            }\\n            delete pendingAction[ack_];\\n\\n        } else {\\n            revert InvalidCallbackAck(chain_,ack_, success_,retval_);\\n        }\\n        return 0;\\n    }\\n\\n    function _withdrawRoyalty(uint256 relay_,\\n                              uint256 chain_,\\n                              address vERC20Depositor_,\\n                              address receiver_,\\n                              uint256 amount_)\\n                              internal returns(bool result) {\\n        address verc20_ = vERC20Addresses[chain_];\\n        _beforeTokenWithdraw(relay_, chain_, vERC20Depositor_, receiver_, verc20_);\\n\\n        bytes32 _ack = keccak256(abi.encodePacked(chain_,vERC20Depositor_,receiver_,nonce));\\n        nonce = nonce + 1;\\n        PendingAction memory pAction;\\n        pAction.action = Action.WITHDRAWROYALTY;\\n        pAction.nAddress = receiver_;\\n        pAction.rAddress = vERC20Depositor_;\\n        pAction.chainId = chain_;\\n        pAction.amount = amount_;\\n        pendingAction[_ack] = pAction;\\n        result = relayWrapper.performCrossChainCall(relay_,\\n                                block.chainid,\\n                                chain_,\\n                                verc20_,\\n                                abi.encodeWithSignature(\\\"destroyRoyaltyVERC20(address,uint256)\\\",vERC20Depositor_,amount_),\\n                                _ack,\\n                                address(this),\\n                                \\\"\\\");\\n\\n        require(result, \\\"_withdrawRoyalty: callRemote failed.\\\");\\n        \\n        _afterTokenWithdraw(relay_, chain_, vERC20Depositor_, receiver_, verc20_);\\n\\n        emit ERC20Withdrawn(_msgSender(), vERC20Depositor_, receiver_, chain_, _ack);\\n        return result;\\n    }\\n\\n    /// @notice Hook called before token deposit\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param amount_ Amount of ERC20 deposited\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _beforeTokenDeposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 amount_,\\n                      address verc20_) internal  {}\\n\\n    /// @notice Hook called after token deposit\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param amount_ Amount of ERC20 deposited\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _afterTokenDeposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 amount_,\\n                      address verc20_) internal  {}\\n\\n    /// @notice Hook called before token withdraw\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param paymaster_ Paymaster address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _beforeTokenWithdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address paymaster_,\\n                      address receiver_,\\n                      address verc20_) internal  {}\\n\\n    /// @notice Hook called after token withdraw\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param paymaster_ Paymaster address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @param verc20_ vERC20 contract address on target chain\\n    function _afterTokenWithdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address paymaster_,\\n                      address receiver_,\\n                      address verc20_) internal  {}\\n}\\n\",\"keccak256\":\"0x0536b28458b77a01a0b9ecbdff69cd4f31ac283b4dc83621bb339f349a66c16f\",\"license\":\"MIT\"},\"contracts/core/ZbyteEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./EscrowERC20.sol\\\";\\n\\n/// @title The ZBYT ERC20 Escrow contract\\ncontract ZbyteEscrow is Ownable, Pausable, EscrowERC20 {\\n\\n    constructor(address forwarder_,\\n                address zbyte_)\\n                EscrowERC20(forwarder_, IERC20(zbyte_)) {\\n    }\\n\\n    /// @notice Deposit ERC20 tokens to obtain vERC20 on target chain\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param receiver_ Recipient address for vERC20\\n    /// @param cost_ Cost of the operation\\n    /// @param amount_ Amount of ERC20 deposited\\n    function deposit(uint256 relay_,\\n                      uint256 chain_,\\n                      address receiver_,\\n                      uint256 cost_,\\n                      uint256 amount_)\\n                      public\\n                      whenNotPaused\\n                      returns (bool result) {\\n        return _deposit(relay_,chain_,receiver_,cost_,amount_);\\n    }\\n\\n    /// @notice Withdraw ERC20 tokens by depositing vERC20 on target chain\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param vERC20Depositor_ Address to deposit vERC20\\n    /// @param receiver_ Recipient address for ERC20\\n    /// @dev The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited\\n    function withdraw(uint256 relay_,\\n                      uint256 chain_,\\n                      address vERC20Depositor_,\\n                      address receiver_)\\n                      whenNotPaused\\n                      public onlyAuthorized\\n                      returns (bool result) {\\n        return _withdraw(relay_,chain_,vERC20Depositor_,receiver_);\\n    }\\n\\n    /// @notice Withdraw ERC20 tokens by depositing vERC20 on target chain\\n    /// @param relay_ Relay identifier that should be used for the crosschain call\\n    /// @param chain_ Target chain identifier\\n    /// @param amount_ Amount of tokens.\\n    function withdrawRoyalty(uint256 relay_,\\n                             uint256 chain_,\\n                             uint256 amount_)\\n                             whenNotPaused\\n                             public \\n                             returns (bool result) {\\n        return _withdrawRoyalty(relay_,chain_,_msgSender(),_msgSender(), amount_);\\n    }\\n\\n    /// @notice callback handler to handle acknowledgement for deposit/withdraw\\n    /// @param chain_ Target chain identifier\\n    /// @param ack_ Unique hash of the submitted deposit/withdraw request\\n    /// @param success_ true if the deposit/withdraw was successful on remote\\n    /// @param retval_ The amount of tokens that were deposited/withdrawn\\n    function callbackHandler(uint256 chain_,\\n                            bytes32 ack_,\\n                            bool success_,\\n                            uint256  retval_)\\n        external\\n        returns(uint256) {\\n        return _callbackHandler(chain_,ack_,success_,retval_);\\n\\n    }\\n\\n    /// @notice Set the address of vERC20 on a given chain\\n    /// @param verc20_ vERC20 contract address\\n    /// @param chain_ chain id of the chain where vERC2o contract resides\\n    /// @dev nonce is incremented for every successful deposit or withdraw\\n    function setvERC20Address(address verc20_, uint256 chain_) public onlyOwner {\\n        _setvERC20Address(verc20_,chain_);\\n    }\\n    \\n    /// @notice Set the address of core relay wrapper\\n    /// @param wrapper_ Core relay wrapper contract address\\n    function setRelayWrapperAddress(address wrapper_) public onlyOwner {\\n        _setRelayWrapperAddress(wrapper_);\\n    }\\n\\n    /// @notice Pauses the contract (mint, transfer and burn operations are paused)\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the paused contract\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @notice ERC2771 _msgSender override\\n    function _msgSender() internal view override(ZbyteContext,Context) returns (address sender) {\\n        return ZbyteContext._msgSender();\\n    }\\n\\n    /// @notice ERC2771 _msgData override\\n    function _msgData() internal view override(ZbyteContext,Context) returns (bytes calldata) {\\n        return ZbyteContext._msgData();\\n    }\\n}\",\"keccak256\":\"0xe9a9974cb54d7a94ed72d2cce4839339fe07349a3594f51a546ce0225e4e23ac\",\"license\":\"MIT\"},\"contracts/interface/core/IEscrowERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title The ZBYT ERC20 Escrow contract\\ninterface IEscrowERC20 {\\n    // errors\\n    /// @notice Caller is not a valid relay\\n    error InvalidRelay(address);\\n    /// @notice error (0xd6facdff): The callback received was invalid\\n    error InvalidCallbackMessage(uint256,uint256,uint256,uint256);\\n    /// @notice error (0xcd9d7bb0): The ack in callback received was not found\\n    error InvalidCallbackAck(uint256,bytes32,bool,uint256);\\n    /// @notice error (0xed3fc6b3): Insufficient ERC20 for Deposit operation.\\n    error InsufficientERC20ForDepositGas(uint256,uint256);\\n    /// @notice error (0xb3922495): Unauthorized caller.\\n    error UnAuthorized(address);\\n\\n    // events\\n    /// @notice event (0x1a40ce6d): vERC20 contract address is set\\n    event vERC20AddressSet(address,uint256);\\n    /// @notice event (0x95290bcc): Core relay wrapper contract address is set\\n    event RelayWrapperAddressSet(address);\\n    /// @notice event (0xcae09af7): ERC20 tokens deposited\\n    event ERC20Deposited(address,address,uint256,uint256,bytes32);\\n    /// @notice event (0xf64578a8): ERC20 tokens deposit confirmed\\n    event ERC20DepositConfirmed(bytes32,bool,uint256);\\n    /// @notice event (0x8b923c21): ERC20 tokens withdrawn\\n    event ERC20Withdrawn(address,address,address,uint256,bytes32);\\n    /// @notice event (0x9c33bbca): ERC20 tokens withdraw failed\\n    event ERC20WithdrawFailed(bytes32,bool,uint256);\\n    /// @notice event (0xf5a60bd1): ERC20 tokens withdraw confirmed\\n    event ERC20WithdrawConfirmed(bytes32,bool,uint256);\\n    /// @notice event (0x1db696c9): The Treasury address is set\\n    event TreasuryAddressSet(address,address);\\n    /// @notice event (0x82b9d61d): ERC20 tokens deposit failed and refund issued to depositor\\n    event ERC20DepositFailedAndRefunded(bytes32,bool,uint256);\\n    /// @notice event (0x2ddb4d51): Worker is registered(true/false)\\n    event WorkerRegistered(address,bool);\\n\\n    function getNonce() external view returns(uint256);\\n    function totalSupplyAllChains() external view returns (uint256);\\n    function totalSupply(uint256 chain_) external view returns (uint256);\\n    function asset() external view returns (address);\\n    function callbackHandler(uint256 chain_,\\n                            bytes32 ack_,\\n                            bool success_,\\n                            uint256  retval_)\\n        external returns(uint256);\\n}\",\"keccak256\":\"0x0aac3498861931f6c9e954744b08bc761e082b49217cc6e66ccd3e0f62761ead\",\"license\":\"MIT\"},\"contracts/interface/relay/IRelayWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\n/// @title Relay wrapper interface (facilitates cross chain call during deposit/mint)\\ninterface IRelayWrapper {\\n\\n    function performCrossChainCall(\\n        uint256 relay_,\\n        uint256 srcChain_,\\n        uint256 destChain_,\\n        address destContract_,\\n        bytes calldata destCallData_,\\n        bytes32 ack_,\\n        address callbackContract_,\\n        bytes calldata relayParams_\\n    ) external payable returns (bool);\\n\\n    function isValidRelay(uint256 chainId, address relay_) external returns(bool);\\n    function updatePayload(uint256 destChain_,\\n                            address destContract_,\\n                            bytes32 ack_,\\n                            address callbackContract_,\\n                            bytes calldata data_) external pure returns(bytes memory);\\n}\",\"keccak256\":\"0x209615ffe8434d01b3e9c1ad353a47994bf4cbc0957623d32bb5edd03ff0d17e\",\"license\":\"MIT\"},\"contracts/utils/ZbyteContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// --.. -... -.-- - . \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n// --.. -... -.-- - . \\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title The ZBYT ERC20 contract\\n/// @dev ERC2771Context with a function to set forwarder\\nabstract contract ZbyteContext is Context, Ownable {\\n    // errors\\n    /// @notice error (0xbf064619): Contract cannot receive ether\\n    error CannotSendEther();\\n    /// @notice error (0xd92e233d): Address is address(0)\\n    error ZeroAddress();\\n    /// @notice error(): Value sent is 0\\n    error ZeroValue();\\n\\n    // events\\n    /// @notice event (0x94aed472): Forwarder address is changed\\n    event ForwarderSet(address,address);\\n\\n    // Trusted forwarder address\\n    address private trustedForwarder;\\n\\n    // /// @notice ZbyteContext constructor\\n    // /// @param forwarder_ Forwarder contact address\\n    // constructor(address forwarder_) {\\n    //     _setTrustedForwarder(forwarder_);\\n    // }\\n\\n    /// @notice Check if the given address is the trusted forwarder\\n    /// @param forwarder_ Address to check\\n    /// @return true if forwarder_ is trusted forwarder\\n    function isTrustedForwarder(address forwarder_) public view virtual returns (bool) {\\n        return forwarder_ == trustedForwarder;\\n    }\\n\\n    /// @notice Set a trusted forwarder address\\n    /// @param forwarder_ Trusted forwarder address\\n    /// @dev emits ForwarderSet on success\\n    function _setTrustedForwarder(address forwarder_) internal {\\n        if (forwarder_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        address oldForwarder = trustedForwarder;\\n        trustedForwarder = forwarder_;\\n\\n        emit ForwarderSet(oldForwarder,forwarder_);\\n    }\\n\\n    /// @notice Set the forwarder contract address\\n    /// @param forwarder_ Frwarder conract address\\n    /// @dev onlyOwner can call\\n    function setTrustedForwarder(address forwarder_) public onlyOwner {\\n        _setTrustedForwarder(forwarder_);\\n    }\\n\\n    /// @notice Get the trusted forwarder address\\n    function _getTrustedForwarder() internal view returns(address){\\n        return trustedForwarder;\\n    }\\n\\n    /// @notice Extract true caller if called via trusted forwarder\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /// @notice Extract data if called via trusted forwarder\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c27022a50e80284df94f275bd72bc0c08af33480ab79d00e7ab6eb6741fce4f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001455762001e1e90601f38839003908101601f19168201906001600160401b038211838310176200014a578083916040958694855283398101031262000145576020620000518262000160565b916001600160a01b0391829162000069910162000160565b16916200007562000175565b826000549116855191818582167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a81b0319161760005560016002558315620001365750811680156200012557837f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd30916001549060018060a01b03199481868416176001558351921682526020820152a1600654161760065551611c8390816200019b8239f35b835163d92e233d60e01b8152600490fd5b63d92e233d60e01b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200014557565b600154336001600160a01b0390911603620001965736601319013560601c90565b339056fe60806040526004361015610026575b361561001957600080fd5b610021611204565b600080fd5b60003560e01c806301c99f9f146101e957806312c00ccb146101e057806338d52e0f146101bc5780633f4ba83a146101d75780633fcc4a81146101ce578063450a9d77146101c55780634d3273db146101bc578063572b6c05146101b35780635c975abb146101aa578063715018a6146101a157806371b3177a146101985780638171e0091461018f5780638456cb59146101865780638da5cb5b1461017d578063a1478a3b14610174578063bd85b0391461016b578063bf1d7ea114610162578063c6a3178514610159578063c8b5303814610150578063d087d28814610147578063da7422281461013e578063deee4078146101355763f2fde38b0361000e576101306110d7565b61000e565b506101306110a2565b5061013061101b565b50610130610ffc565b50610130610f8d565b50610130610f4e565b50610130610d38565b50610130610d0b565b50610130610ce1565b50610130610cb7565b50610130610c38565b5061013061096f565b506101306106c4565b50610130610659565b50610130610632565b506101306105fc565b50610130610368565b50610130610545565b50610130610422565b50610130610392565b506101306102d8565b5061013061023e565b600435906001600160a01b038216820361002157565b604435906001600160a01b038216820361002157565b606435906001600160a01b038216820361002157565b8015150361002157565b5034610021576040366003190112610021577f2ddb4d518081e3226ce50314090fbddc7a51e92d125bd71d785914d1b6d3d679604061027b6101f2565b6024359061028882610234565b6000546001600160a01b0391906102ab908316836102a4611c09565b1614611172565b1690816000526007602052826000209015159060ff1981541660ff831617905582519182526020820152a1005b5034610021576020366003190112610021576102f26101f2565b6000546001600160a01b03919061030e908316836102a4611c09565b168015610356576020817f8e3584f39ded6e1a9a02b72cddce11efa1a306747c8527671917b231983edbad926001600160601b0360a01b6008541617600855604051908152a1005b60405163d92e233d60e01b8152600490fd5b5034610021576000366003190112610021576006546040516001600160a01b039091168152602090f35b50346100215760008060031936011261041f5780547f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020906001600160a01b03906103eb826103e1611c09565b1683831614611172565b61040360ff8260a01c166103fe81611bc6565b611bc6565b60ff60a01b19168455610414611c09565b60405191168152a180f35b80fd5b50346100215760803660031901126100215760443561044081610234565b600854600090602090610490906001600160a01b031661045e611c09565b604051630b43159160e41b81524660048201526001600160a01b03909116602482015293849283919082906044820190565b03925af1908115610538575b60009161050a575b50156104d4576104c06104d091606435906024356004356117de565b6040519081529081906020820190565b0390f35b6105066104df611c09565b604051630adb4ca360e41b81526001600160a01b0390911660048201529081906024820190565b0390fd5b61052b915060203d8111610531575b61052381836112e2565b81019061140f565b386104a4565b503d610519565b6105406114b9565b61049c565b50346100215760403660031901126100215761055f6101f2565b600054602435906001600160a01b039061057e908216826102a4611c09565b8216156103565780156105ea5760008181526005602090815260409182902080546001600160a01b0319166001600160a01b0395909516948517905581519384528301919091527f1a40ce6d89bbc096abbbb07f26f960227344b0199ce4c540844114d7839b793891a1005b604051637c946ed760e01b8152600490fd5b50346100215760203660031901126100215760206106186101f2565b6001546040516001600160a01b0392831691909216148152f35b503461002157600036600319011261002157602060ff60005460a01c166040519015158152f35b50346100215760008060031936011261041f57805481906001600160a01b03808216919061069190610689611c09565b168314611172565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610021576080366003190112610021576024356106e1610208565b906106ea61021e565b6000926106fe60ff855460a01c1615611217565b6001600160a01b039081610710611c09565b1685526020926007845260409260ff84882054161561094e57506002546002141561073a90611256565b60028055610752856000526005602052604060002090565b546001600160a01b031685856009549286518281018161079e87898b898692606894929184526001600160601b0319809260601b16602085015260601b16603483015260488201520190565b0391601f199283810182526107b390826112e2565b519020946107c09061131b565b6009556107cb611340565b600281526001600160a01b038716818501526001600160a01b038816818a01528460608201528b608082015261080b86600052600a602052604060002090565b906108159161138a565b600854885162f55d9d60e01b858201526001600160a01b038981166024830152604493840182529091169186918d9161084e90826112e2565b8a516380516ec960e01b815296879586948593610875933093904660048035908901611467565b03925af1958615986104d099610941575b9661090a575b50506108ed9085966108ad600080516020611c2e833981519152969761173a565b6108b5611c09565b87516001600160a01b0391821681529581166020870152909316604085015260608401929092526080830191909152819060a0820190565b0390a16108fa6001600255565b5190151581529081906020820190565b600080516020611c2e8339815191529596506108ed92918161093792903d106105315761052381836112e2565b959481925061088c565b6109496114b9565b610886565b8360249161095a611c09565b915163b392249560e01b815291166004820152fd5b50346100215760a03660031901126100215760243561098c610208565b908060843560005460a01c60ff16156109a490611217565b600254600214156109b490611256565b600280556109cc826000526005602052604060002090565b546001600160a01b03166006549094906001600160a01b03166109ed611c09565b600154610a0a92606435926001600160a01b039092169190611512565b6006546001600160a01b031682610a1f611c09565b3090610a2a93611512565b600954916040928351602097818980930181610a6e86888a8d869290916074949284526001600160601b03199060601b166020840152603483015260548201520190565b0391601f19928381018252610a8390826112e2565b51902093610a909061131b565b600955610a9b611340565b60018152610aa7611c09565b6001600160a01b0316818501526001600160a01b03871681890152886060820152856080820152610ae285600052600a602052604060002090565b90610aec9161138a565b60085487516340c10f1960e01b858201526001600160a01b038881166024830152604482018890526064938401825290911691859190610b2c90826112e2565b88516380516ec960e01b8152998a9485938493610b53933093904660048035908901611467565b03915a90600091f1948515976104d098610c2b575b600096610be2575b50506108ed908596610ba37f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d196976114c6565b610bab611c09565b87516001600160a01b03918216815295166020860152604085019390935260608401929092526080830191909152819060a0820190565b7f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d19596506108ed929181610c2192903d106105315761052381836112e2565b9594819250610b70565b610c336114b9565b610b68565b50346100215760008060031936011261041f5780547f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020906001600160a01b0390610c87826103e1611c09565b610ca060ff8260a01c1615610c9b81611217565b611217565b60ff60a01b1916600160a01b178455610414611c09565b5034610021576000366003190112610021576000546040516001600160a01b039091168152602090f35b5034610021576000366003190112610021576008546040516001600160a01b039091168152602090f35b50346100215760203660031901126100215760043560005260046020526020604060002054604051908152f35b5034610021576060366003190112610021576024356044359060005460a01c60ff1615610d6490611217565b80610d6d611c09565b610d75611c09565b90610d8a836000526005602052604060002090565b546009546040805160208082018881526bffffffffffffffffffffffff19606088811b82168587015289901b166054840152606880840186905283529099929694601f19948b946001600160a01b039092169391929091889190610def6088826112e2565b51902095610dfd879361131b565b600955610e08611340565b600381526001600160a01b038916818801526001600160a01b038316818c01528b6060820152846080820152610e4884600052600a602052604060002090565b90610e529161138a565b6008548a5163055447a360e21b888201526001600160a01b039384166024820152604481019590955260649182018552919091169290610e9290826112e2565b88516380516ec960e01b8152998a9485938493610eb9933093904660048035908901611467565b03915a90600091f1948515976104d098610f41575b600096610f0a575b5050610ef79085966108ad600080516020611c2e8339815191529697611786565b0390a15190151581529081906020820190565b600080516020611c2e833981519152959650610ef7929181610f3792903d106105315761052381836112e2565b9594819250610ed6565b610f496114b9565b610ece565b5034610021576000366003190112610021576020600354604051908152f35b60041115610f7757565b634e487b7160e01b600052602160045260246000fd5b503461002157602036600319011261002157600435600052600a6020526040600020805460ff81169160018060a01b0390816001820154166003600283015492015492604051946004871015610f775760a096865260081c166020850152604084015260608301526080820152f35b5034610021576000366003190112610021576020600954604051908152f35b5034610021576020366003190112610021576110356101f2565b6000546001600160a01b03918291611052908316836102a4611c09565b168015610356577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd309160409160015491816001600160601b0360a01b8416176001558351921682526020820152a1005b5034610021576020366003190112610021576004356000526005602052602060018060a01b0360406000205416604051908152f35b5034610021576020366003190112610021576110f16101f2565b6000546001600160a01b039061110c908216826102a4611c09565b81161561111e5761111c906111bd565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b1561117957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b5060405163bf06461960e01b8152600490fd5b1561121e57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b1561125d57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176112d557604052565b6112dd6112a2565b604052565b90601f8019910116810190811067ffffffffffffffff8211176112d557604052565b50634e487b7160e01b600052601160045260246000fd5b906001820180921161132957565b611331611304565b565b9190820180921161132957565b6040519060a0820182811067ffffffffffffffff82111761137d575b60405260006080838281528260208201528260408201528260608201520152565b6113856112a2565b61135c565b9080516004811015610f775782546020830151610100600160a81b0360089190911b1660ff929092166001600160a81b03199091161717825560408101516003916080916113fe906001600160a01b03166001860180546001600160a01b0319166001600160a01b03909216919091179055565b606081015160028501550151910155565b90816020910312610021575161142481610234565b90565b919082519283825260005b848110611453575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611432565b94909261149d9260209894875288870152604086015260018060a01b038094166060860152610100806080870152850190611427565b9360a08401521660c082015260e0818303910152600081520190565b506040513d6000823e3d90fd5b156114cd57565b60405162461bcd60e51b815260206004820152601c60248201527f5f6465706f7369743a2063616c6c52656d6f7465206661696c65642e000000006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526113319160a0820182811067ffffffffffffffff82111761156b575b6040526115d7565b6115736112a2565b611563565b1561157f57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b0391909116916115f0826112b9565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b1561166757600082819282876116429796519301915af161163c6116ac565b906116fa565b8051908161164f57505050565b826113319361166293830101910161140f565b611578565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d156116f5573d9067ffffffffffffffff82116116e8575b604051916116dc601f8201601f1916602001846112e2565b82523d6000602084013e565b6116f06112a2565b6116c4565b606090565b90919015611706575090565b8151156117165750805190602001fd5b60405162461bcd60e51b815260206004820152908190610506906024830190611427565b1561174157565b60405162461bcd60e51b815260206004820152601d60248201527f5f77697468647261773a2063616c6c52656d6f7465206661696c65642e0000006044820152606490fd5b1561178d57565b60405162461bcd60e51b8152602060048201526024808201527f5f7769746864726177526f79616c74793a2063616c6c52656d6f7465206661696044820152633632b21760e11b6064820152608490fd5b919290926117f684600052600a602052604060002090565b80546003820154600283015495909291600881901c6001600160a01b0316919060ff1661182281610f6d565b60018103611966575090915085811480159061195c575b61192d5750916118c49593916118ac9593826000146118c957507ff64578a8ea3d511e99da45c5925c1f2ba97616679c9991a491f79d269452f9709361187e91611ae5565b60408051858152911515602083015281019190915280606081015b0390a1600052600a602052604060002090565b60036000918281558260018201558260028201550155565b600090565b6006547f82b9d61d8c40f24d7817c0a9f6a5a07452b27d8d2a563f58d52847ce9e9849e8955061189994935061190e9291906001600160a01b0316611aa4565b611aa4565b6040805185815260006020820152908101919091529081906060820190565b60405163d6facdff60e01b81526004810187905260248101849052604481019190915260648101859052608490fd5b5084831415611839565b61196f81610f6d565b60028114908115611a90575b5015611a6057868103611a3157509183916118c49795936118ac97956000146119ea57916119e57ff5a60bd1e87b05bb87d7c368ca3ef2adb38148647f0a7b7cafdba3e82790510596926119de8761187e9661190960065460018060a01b031690565b5460ff1690565b611b32565b5050604080518681526000602082015290810193909352507f9c33bbcaa410c35cdb52a965527cdedfa77292fd62762711cbf969fa21ab2e79925081905060608101611899565b60405163d6facdff60e01b81526004810188905260248101859052604481019190915260648101869052608490fd5b604051630cd9d7bb60e41b8152600481019190915260248101889052841515604482015260648101869052608490fd5b60039150611a9d81610f6d565b143861197b565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261133191611ae06064836112e2565b6115d7565b90611b0b90600354838101809111611b25575b6003556000526004602052604060002090565b8054918201809211611b1a5755565b611b22611304565b55565b611b2d611304565b611af8565b9190916004811015610f775760018103611b7e5750611b72611b7a91611b62611b5d85600354611333565b600355565b6000526004602052604060002090565b918254611333565b9055565b80611b8a600292610f6d565b14611b93575050565b611bb790600354838103908111611b25576003556000526004602052604060002090565b8054918203918211611b1a5755565b15611bcd57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b600154336001600160a01b0390911603611c295736601319013560601c90565b339056fe72b69b7283d7f94f82af237df98dac53d1240005b789c3ed88e3834d21ad7e1ba2646970667358221220ed7c43ac54d77d45a91920a0dec78c1f4f9ee3edac2f7300c5a1779ed2066c5764736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610026575b361561001957600080fd5b610021611204565b600080fd5b60003560e01c806301c99f9f146101e957806312c00ccb146101e057806338d52e0f146101bc5780633f4ba83a146101d75780633fcc4a81146101ce578063450a9d77146101c55780634d3273db146101bc578063572b6c05146101b35780635c975abb146101aa578063715018a6146101a157806371b3177a146101985780638171e0091461018f5780638456cb59146101865780638da5cb5b1461017d578063a1478a3b14610174578063bd85b0391461016b578063bf1d7ea114610162578063c6a3178514610159578063c8b5303814610150578063d087d28814610147578063da7422281461013e578063deee4078146101355763f2fde38b0361000e576101306110d7565b61000e565b506101306110a2565b5061013061101b565b50610130610ffc565b50610130610f8d565b50610130610f4e565b50610130610d38565b50610130610d0b565b50610130610ce1565b50610130610cb7565b50610130610c38565b5061013061096f565b506101306106c4565b50610130610659565b50610130610632565b506101306105fc565b50610130610368565b50610130610545565b50610130610422565b50610130610392565b506101306102d8565b5061013061023e565b600435906001600160a01b038216820361002157565b604435906001600160a01b038216820361002157565b606435906001600160a01b038216820361002157565b8015150361002157565b5034610021576040366003190112610021577f2ddb4d518081e3226ce50314090fbddc7a51e92d125bd71d785914d1b6d3d679604061027b6101f2565b6024359061028882610234565b6000546001600160a01b0391906102ab908316836102a4611c09565b1614611172565b1690816000526007602052826000209015159060ff1981541660ff831617905582519182526020820152a1005b5034610021576020366003190112610021576102f26101f2565b6000546001600160a01b03919061030e908316836102a4611c09565b168015610356576020817f8e3584f39ded6e1a9a02b72cddce11efa1a306747c8527671917b231983edbad926001600160601b0360a01b6008541617600855604051908152a1005b60405163d92e233d60e01b8152600490fd5b5034610021576000366003190112610021576006546040516001600160a01b039091168152602090f35b50346100215760008060031936011261041f5780547f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020906001600160a01b03906103eb826103e1611c09565b1683831614611172565b61040360ff8260a01c166103fe81611bc6565b611bc6565b60ff60a01b19168455610414611c09565b60405191168152a180f35b80fd5b50346100215760803660031901126100215760443561044081610234565b600854600090602090610490906001600160a01b031661045e611c09565b604051630b43159160e41b81524660048201526001600160a01b03909116602482015293849283919082906044820190565b03925af1908115610538575b60009161050a575b50156104d4576104c06104d091606435906024356004356117de565b6040519081529081906020820190565b0390f35b6105066104df611c09565b604051630adb4ca360e41b81526001600160a01b0390911660048201529081906024820190565b0390fd5b61052b915060203d8111610531575b61052381836112e2565b81019061140f565b386104a4565b503d610519565b6105406114b9565b61049c565b50346100215760403660031901126100215761055f6101f2565b600054602435906001600160a01b039061057e908216826102a4611c09565b8216156103565780156105ea5760008181526005602090815260409182902080546001600160a01b0319166001600160a01b0395909516948517905581519384528301919091527f1a40ce6d89bbc096abbbb07f26f960227344b0199ce4c540844114d7839b793891a1005b604051637c946ed760e01b8152600490fd5b50346100215760203660031901126100215760206106186101f2565b6001546040516001600160a01b0392831691909216148152f35b503461002157600036600319011261002157602060ff60005460a01c166040519015158152f35b50346100215760008060031936011261041f57805481906001600160a01b03808216919061069190610689611c09565b168314611172565b6001600160a01b03191682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610021576080366003190112610021576024356106e1610208565b906106ea61021e565b6000926106fe60ff855460a01c1615611217565b6001600160a01b039081610710611c09565b1685526020926007845260409260ff84882054161561094e57506002546002141561073a90611256565b60028055610752856000526005602052604060002090565b546001600160a01b031685856009549286518281018161079e87898b898692606894929184526001600160601b0319809260601b16602085015260601b16603483015260488201520190565b0391601f199283810182526107b390826112e2565b519020946107c09061131b565b6009556107cb611340565b600281526001600160a01b038716818501526001600160a01b038816818a01528460608201528b608082015261080b86600052600a602052604060002090565b906108159161138a565b600854885162f55d9d60e01b858201526001600160a01b038981166024830152604493840182529091169186918d9161084e90826112e2565b8a516380516ec960e01b815296879586948593610875933093904660048035908901611467565b03925af1958615986104d099610941575b9661090a575b50506108ed9085966108ad600080516020611c2e833981519152969761173a565b6108b5611c09565b87516001600160a01b0391821681529581166020870152909316604085015260608401929092526080830191909152819060a0820190565b0390a16108fa6001600255565b5190151581529081906020820190565b600080516020611c2e8339815191529596506108ed92918161093792903d106105315761052381836112e2565b959481925061088c565b6109496114b9565b610886565b8360249161095a611c09565b915163b392249560e01b815291166004820152fd5b50346100215760a03660031901126100215760243561098c610208565b908060843560005460a01c60ff16156109a490611217565b600254600214156109b490611256565b600280556109cc826000526005602052604060002090565b546001600160a01b03166006549094906001600160a01b03166109ed611c09565b600154610a0a92606435926001600160a01b039092169190611512565b6006546001600160a01b031682610a1f611c09565b3090610a2a93611512565b600954916040928351602097818980930181610a6e86888a8d869290916074949284526001600160601b03199060601b166020840152603483015260548201520190565b0391601f19928381018252610a8390826112e2565b51902093610a909061131b565b600955610a9b611340565b60018152610aa7611c09565b6001600160a01b0316818501526001600160a01b03871681890152886060820152856080820152610ae285600052600a602052604060002090565b90610aec9161138a565b60085487516340c10f1960e01b858201526001600160a01b038881166024830152604482018890526064938401825290911691859190610b2c90826112e2565b88516380516ec960e01b8152998a9485938493610b53933093904660048035908901611467565b03915a90600091f1948515976104d098610c2b575b600096610be2575b50506108ed908596610ba37f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d196976114c6565b610bab611c09565b87516001600160a01b03918216815295166020860152604085019390935260608401929092526080830191909152819060a0820190565b7f7421cdc21c72f34d5c833d58c604ea2ce4c54894d72b242df1de39d4a27b36d19596506108ed929181610c2192903d106105315761052381836112e2565b9594819250610b70565b610c336114b9565b610b68565b50346100215760008060031936011261041f5780547f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020906001600160a01b0390610c87826103e1611c09565b610ca060ff8260a01c1615610c9b81611217565b611217565b60ff60a01b1916600160a01b178455610414611c09565b5034610021576000366003190112610021576000546040516001600160a01b039091168152602090f35b5034610021576000366003190112610021576008546040516001600160a01b039091168152602090f35b50346100215760203660031901126100215760043560005260046020526020604060002054604051908152f35b5034610021576060366003190112610021576024356044359060005460a01c60ff1615610d6490611217565b80610d6d611c09565b610d75611c09565b90610d8a836000526005602052604060002090565b546009546040805160208082018881526bffffffffffffffffffffffff19606088811b82168587015289901b166054840152606880840186905283529099929694601f19948b946001600160a01b039092169391929091889190610def6088826112e2565b51902095610dfd879361131b565b600955610e08611340565b600381526001600160a01b038916818801526001600160a01b038316818c01528b6060820152846080820152610e4884600052600a602052604060002090565b90610e529161138a565b6008548a5163055447a360e21b888201526001600160a01b039384166024820152604481019590955260649182018552919091169290610e9290826112e2565b88516380516ec960e01b8152998a9485938493610eb9933093904660048035908901611467565b03915a90600091f1948515976104d098610f41575b600096610f0a575b5050610ef79085966108ad600080516020611c2e8339815191529697611786565b0390a15190151581529081906020820190565b600080516020611c2e833981519152959650610ef7929181610f3792903d106105315761052381836112e2565b9594819250610ed6565b610f496114b9565b610ece565b5034610021576000366003190112610021576020600354604051908152f35b60041115610f7757565b634e487b7160e01b600052602160045260246000fd5b503461002157602036600319011261002157600435600052600a6020526040600020805460ff81169160018060a01b0390816001820154166003600283015492015492604051946004871015610f775760a096865260081c166020850152604084015260608301526080820152f35b5034610021576000366003190112610021576020600954604051908152f35b5034610021576020366003190112610021576110356101f2565b6000546001600160a01b03918291611052908316836102a4611c09565b168015610356577f94aed472e01353526c04ec91cee149d41e78d848ec851c72be532bf7b120bd309160409160015491816001600160601b0360a01b8416176001558351921682526020820152a1005b5034610021576020366003190112610021576004356000526005602052602060018060a01b0360406000205416604051908152f35b5034610021576020366003190112610021576110f16101f2565b6000546001600160a01b039061110c908216826102a4611c09565b81161561111e5761111c906111bd565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b1561117957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b5060405163bf06461960e01b8152600490fd5b1561121e57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b1561125d57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176112d557604052565b6112dd6112a2565b604052565b90601f8019910116810190811067ffffffffffffffff8211176112d557604052565b50634e487b7160e01b600052601160045260246000fd5b906001820180921161132957565b611331611304565b565b9190820180921161132957565b6040519060a0820182811067ffffffffffffffff82111761137d575b60405260006080838281528260208201528260408201528260608201520152565b6113856112a2565b61135c565b9080516004811015610f775782546020830151610100600160a81b0360089190911b1660ff929092166001600160a81b03199091161717825560408101516003916080916113fe906001600160a01b03166001860180546001600160a01b0319166001600160a01b03909216919091179055565b606081015160028501550151910155565b90816020910312610021575161142481610234565b90565b919082519283825260005b848110611453575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611432565b94909261149d9260209894875288870152604086015260018060a01b038094166060860152610100806080870152850190611427565b9360a08401521660c082015260e0818303910152600081520190565b506040513d6000823e3d90fd5b156114cd57565b60405162461bcd60e51b815260206004820152601c60248201527f5f6465706f7369743a2063616c6c52656d6f7465206661696c65642e000000006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526113319160a0820182811067ffffffffffffffff82111761156b575b6040526115d7565b6115736112a2565b611563565b1561157f57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b0391909116916115f0826112b9565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b1561166757600082819282876116429796519301915af161163c6116ac565b906116fa565b8051908161164f57505050565b826113319361166293830101910161140f565b611578565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d156116f5573d9067ffffffffffffffff82116116e8575b604051916116dc601f8201601f1916602001846112e2565b82523d6000602084013e565b6116f06112a2565b6116c4565b606090565b90919015611706575090565b8151156117165750805190602001fd5b60405162461bcd60e51b815260206004820152908190610506906024830190611427565b1561174157565b60405162461bcd60e51b815260206004820152601d60248201527f5f77697468647261773a2063616c6c52656d6f7465206661696c65642e0000006044820152606490fd5b1561178d57565b60405162461bcd60e51b8152602060048201526024808201527f5f7769746864726177526f79616c74793a2063616c6c52656d6f7465206661696044820152633632b21760e11b6064820152608490fd5b919290926117f684600052600a602052604060002090565b80546003820154600283015495909291600881901c6001600160a01b0316919060ff1661182281610f6d565b60018103611966575090915085811480159061195c575b61192d5750916118c49593916118ac9593826000146118c957507ff64578a8ea3d511e99da45c5925c1f2ba97616679c9991a491f79d269452f9709361187e91611ae5565b60408051858152911515602083015281019190915280606081015b0390a1600052600a602052604060002090565b60036000918281558260018201558260028201550155565b600090565b6006547f82b9d61d8c40f24d7817c0a9f6a5a07452b27d8d2a563f58d52847ce9e9849e8955061189994935061190e9291906001600160a01b0316611aa4565b611aa4565b6040805185815260006020820152908101919091529081906060820190565b60405163d6facdff60e01b81526004810187905260248101849052604481019190915260648101859052608490fd5b5084831415611839565b61196f81610f6d565b60028114908115611a90575b5015611a6057868103611a3157509183916118c49795936118ac97956000146119ea57916119e57ff5a60bd1e87b05bb87d7c368ca3ef2adb38148647f0a7b7cafdba3e82790510596926119de8761187e9661190960065460018060a01b031690565b5460ff1690565b611b32565b5050604080518681526000602082015290810193909352507f9c33bbcaa410c35cdb52a965527cdedfa77292fd62762711cbf969fa21ab2e79925081905060608101611899565b60405163d6facdff60e01b81526004810188905260248101859052604481019190915260648101869052608490fd5b604051630cd9d7bb60e41b8152600481019190915260248101889052841515604482015260648101869052608490fd5b60039150611a9d81610f6d565b143861197b565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261133191611ae06064836112e2565b6115d7565b90611b0b90600354838101809111611b25575b6003556000526004602052604060002090565b8054918201809211611b1a5755565b611b22611304565b55565b611b2d611304565b611af8565b9190916004811015610f775760018103611b7e5750611b72611b7a91611b62611b5d85600354611333565b600355565b6000526004602052604060002090565b918254611333565b9055565b80611b8a600292610f6d565b14611b93575050565b611bb790600354838103908111611b25576003556000526004602052604060002090565b8054918203918211611b1a5755565b15611bcd57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b600154336001600160a01b0390911603611c295736601319013560601c90565b339056fe72b69b7283d7f94f82af237df98dac53d1240005b789c3ed88e3834d21ad7e1ba2646970667358221220ed7c43ac54d77d45a91920a0dec78c1f4f9ee3edac2f7300c5a1779ed2066c5764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "callbackHandler(uint256,bytes32,bool,uint256)": {
        "params": {
          "ack_": "Unique hash of the submitted deposit/withdraw request",
          "chain_": "Target chain identifier",
          "retval_": "The amount of tokens that were deposited/withdrawn",
          "success_": "true if the deposit/withdraw was successful on remote"
        }
      },
      "deposit(uint256,uint256,address,uint256,uint256)": {
        "params": {
          "amount_": "Amount of ERC20 deposited",
          "chain_": "Target chain identifier",
          "cost_": "Cost of the operation",
          "receiver_": "Recipient address for vERC20",
          "relay_": "Relay identifier that should be used for the crosschain call"
        }
      },
      "getNonce()": {
        "details": "nonce is incremented for every successful deposit or withdraw"
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder_": "Address to check"
        },
        "returns": {
          "_0": "true if forwarder_ is trusted forwarder"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerWorker(address,bool)": {
        "params": {
          "register_": "A boolean indicating whether to register (true) or unregister (false) the worker.",
          "worker_": "The address of the worker to be registered or unregistered."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRelayWrapperAddress(address)": {
        "params": {
          "wrapper_": "Core relay wrapper contract address"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "onlyOwner can call",
        "params": {
          "forwarder_": "Frwarder conract address"
        }
      },
      "setvERC20Address(address,uint256)": {
        "details": "nonce is incremented for every successful deposit or withdraw",
        "params": {
          "chain_": "chain id of the chain where vERC2o contract resides",
          "verc20_": "vERC20 contract address"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "chain_": "The id of the chain of interest"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256,address,address)": {
        "details": "The paymaster_ should be a valid paymaster (e.g., forwarder). All vERC20 held by paymaster is destroyed and equal ERC20 is deposited",
        "params": {
          "chain_": "Target chain identifier",
          "receiver_": "Recipient address for ERC20",
          "relay_": "Relay identifier that should be used for the crosschain call",
          "vERC20Depositor_": "Address to deposit vERC20"
        }
      },
      "withdrawRoyalty(uint256,uint256,uint256)": {
        "params": {
          "amount_": "Amount of tokens.",
          "chain_": "Target chain identifier",
          "relay_": "Relay identifier that should be used for the crosschain call"
        }
      }
    },
    "title": "The ZBYT ERC20 Escrow contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotSendEther()": [
        {
          "notice": "error (0xbf064619): Contract cannot receive ether"
        }
      ],
      "InsufficientERC20ForDepositGas(uint256,uint256)": [
        {
          "notice": "error (0xed3fc6b3): Insufficient ERC20 for Deposit operation."
        }
      ],
      "InvalidCallbackAck(uint256,bytes32,bool,uint256)": [
        {
          "notice": "error (0xcd9d7bb0): The ack in callback received was not found"
        }
      ],
      "InvalidCallbackMessage(uint256,uint256,uint256,uint256)": [
        {
          "notice": "error (0xd6facdff): The callback received was invalid"
        }
      ],
      "InvalidRelay(address)": [
        {
          "notice": "Caller is not a valid relay"
        }
      ],
      "UnAuthorized(address)": [
        {
          "notice": "error (0xb3922495): Unauthorized caller."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "error (0xd92e233d): Address is address(0)"
        }
      ],
      "ZeroValue()": [
        {
          "notice": "error(): Value sent is 0"
        }
      ]
    },
    "events": {
      "ERC20DepositConfirmed(bytes32,bool,uint256)": {
        "notice": "event (0xf64578a8): ERC20 tokens deposit confirmed"
      },
      "ERC20DepositFailedAndRefunded(bytes32,bool,uint256)": {
        "notice": "event (0x82b9d61d): ERC20 tokens deposit failed and refund issued to depositor"
      },
      "ERC20Deposited(address,address,uint256,uint256,bytes32)": {
        "notice": "event (0xcae09af7): ERC20 tokens deposited"
      },
      "ERC20WithdrawConfirmed(bytes32,bool,uint256)": {
        "notice": "event (0xf5a60bd1): ERC20 tokens withdraw confirmed"
      },
      "ERC20WithdrawFailed(bytes32,bool,uint256)": {
        "notice": "event (0x9c33bbca): ERC20 tokens withdraw failed"
      },
      "ERC20Withdrawn(address,address,address,uint256,bytes32)": {
        "notice": "event (0x8b923c21): ERC20 tokens withdrawn"
      },
      "ForwarderSet(address,address)": {
        "notice": "event (0x94aed472): Forwarder address is changed"
      },
      "RelayWrapperAddressSet(address)": {
        "notice": "event (0x95290bcc): Core relay wrapper contract address is set"
      },
      "TreasuryAddressSet(address,address)": {
        "notice": "event (0x1db696c9): The Treasury address is set"
      },
      "WorkerRegistered(address,bool)": {
        "notice": "event (0x2ddb4d51): Worker is registered(true/false)"
      },
      "vERC20AddressSet(address,uint256)": {
        "notice": "event (0x1a40ce6d): vERC20 contract address is set"
      }
    },
    "kind": "user",
    "methods": {
      "asset()": {
        "notice": "Return the address of underlying ERC20 contract address"
      },
      "callbackHandler(uint256,bytes32,bool,uint256)": {
        "notice": "callback handler to handle acknowledgement for deposit/withdraw"
      },
      "deposit(uint256,uint256,address,uint256,uint256)": {
        "notice": "Deposit ERC20 tokens to obtain vERC20 on target chain"
      },
      "getNonce()": {
        "notice": "Get the latest nonce "
      },
      "isTrustedForwarder(address)": {
        "notice": "Check if the given address is the trusted forwarder"
      },
      "pause()": {
        "notice": "Pauses the contract (mint, transfer and burn operations are paused)"
      },
      "pendingAction(bytes32)": {
        "notice": "mapping of current deposit/withdraw operations for which callback has not yet been received"
      },
      "registerWorker(address,bool)": {
        "notice": "Registers or unregisters a worker, allowing or denying access to specific functionality."
      },
      "relayWrapper()": {
        "notice": "RelayWrapper contract address"
      },
      "setRelayWrapperAddress(address)": {
        "notice": "Set the address of core relay wrapper"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set the forwarder contract address"
      },
      "setvERC20Address(address,uint256)": {
        "notice": "Set the address of vERC20 on a given chain"
      },
      "totalSupply(uint256)": {
        "notice": "Return the amount of vERC20 currently available on a given chain"
      },
      "totalSupplyAllChains()": {
        "notice": "Return the amount of vERC20 currently available on all chains"
      },
      "ulAsset()": {
        "notice": "The underlying ERC20 token contract"
      },
      "unpause()": {
        "notice": "Unpauses the paused contract"
      },
      "vERC20Addresses(uint256)": {
        "notice": "mapping of the vERC20 contract address for the chain"
      },
      "withdraw(uint256,uint256,address,address)": {
        "notice": "Withdraw ERC20 tokens by depositing vERC20 on target chain"
      },
      "withdrawRoyalty(uint256,uint256,uint256)": {
        "notice": "Withdraw ERC20 tokens by depositing vERC20 on target chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 292,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9843,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 377,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2125,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2129,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "_reserve",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2134,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "vERC20Addresses",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2138,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "ulAsset",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)1030"
      },
      {
        "astId": 2143,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "authorizedWorkers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2147,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "relayWrapper",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRelayWrapper)7619"
      },
      {
        "astId": 2150,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "nonce",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2173,
        "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
        "label": "pendingAction",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(PendingAction)2167_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1030": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRelayWrapper)7619": {
        "encoding": "inplace",
        "label": "contract IRelayWrapper",
        "numberOfBytes": "20"
      },
      "t_enum(Action)2155": {
        "encoding": "inplace",
        "label": "enum EscrowERC20.Action",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(PendingAction)2167_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EscrowERC20.PendingAction)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingAction)2167_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PendingAction)2167_storage": {
        "encoding": "inplace",
        "label": "struct EscrowERC20.PendingAction",
        "members": [
          {
            "astId": 2158,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "action",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Action)2155"
          },
          {
            "astId": 2160,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "nAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2162,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "rAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2164,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2166,
            "contract": "contracts/core/ZbyteEscrow.sol:ZbyteEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}